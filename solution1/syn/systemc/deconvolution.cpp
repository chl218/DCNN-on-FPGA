// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "deconvolution.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic deconvolution::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic deconvolution::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<7> deconvolution::ap_ST_fsm_state1 = "1";
const sc_lv<7> deconvolution::ap_ST_fsm_state2 = "10";
const sc_lv<7> deconvolution::ap_ST_fsm_state3 = "100";
const sc_lv<7> deconvolution::ap_ST_fsm_state4 = "1000";
const sc_lv<7> deconvolution::ap_ST_fsm_state5 = "10000";
const sc_lv<7> deconvolution::ap_ST_fsm_state6 = "100000";
const sc_lv<7> deconvolution::ap_ST_fsm_state7 = "1000000";
const sc_lv<32> deconvolution::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> deconvolution::ap_const_lv32_1 = "1";
const sc_lv<32> deconvolution::ap_const_lv32_2 = "10";
const sc_lv<32> deconvolution::ap_const_lv32_3 = "11";
const sc_lv<32> deconvolution::ap_const_lv32_4 = "100";
const sc_lv<32> deconvolution::ap_const_lv32_5 = "101";
const sc_lv<1> deconvolution::ap_const_lv1_1 = "1";
const sc_lv<2> deconvolution::ap_const_lv2_0 = "00";
const sc_lv<32> deconvolution::ap_const_lv32_6 = "110";
const sc_lv<1> deconvolution::ap_const_lv1_0 = "0";
const sc_lv<32> deconvolution::ap_const_lv32_B = "1011";
const sc_lv<32> deconvolution::ap_const_lv32_9 = "1001";
const sc_lv<4> deconvolution::ap_const_lv4_0 = "0000";
const sc_lv<2> deconvolution::ap_const_lv2_3 = "11";
const sc_lv<2> deconvolution::ap_const_lv2_1 = "1";
const bool deconvolution::ap_const_boolean_1 = true;

deconvolution::deconvolution(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);

    SC_METHOD(thread_ifeat_address0);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_ifeat_ce0);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_kc_fu_291_p2);
    sensitive << ( p_oc_reg_111 );

    SC_METHOD(thread_kernel_address0);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_19_cast_fu_270_p1 );

    SC_METHOD(thread_kernel_ce0);
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_kr_fu_251_p2);
    sensitive << ( p_or_reg_100 );

    SC_METHOD(thread_oc_1_fu_158_p2);
    sensitive << ( oc_reg_89 );

    SC_METHOD(thread_ofeat_address0);
    sensitive << ( ofeat_addr_reg_345 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_ofeat_ce0);
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_ofeat_d0);
    sensitive << ( tmp_6_reg_368 );
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_ofeat_we0);
    sensitive << ( ap_CS_fsm_state7 );

    SC_METHOD(thread_p_oc_cast1_cast7_fu_257_p1);
    sensitive << ( p_oc_reg_111 );

    SC_METHOD(thread_p_oc_cast1_cast_fu_261_p1);
    sensitive << ( p_oc_reg_111 );

    SC_METHOD(thread_p_or_cast2_fu_164_p1);
    sensitive << ( p_or_reg_100 );

    SC_METHOD(thread_p_shl4_cast_fu_219_p3);
    sensitive << ( tmp_12_fu_215_p1 );

    SC_METHOD(thread_p_shl5_cast_fu_231_p3);
    sensitive << ( tmp_13_fu_227_p1 );

    SC_METHOD(thread_p_shl6_cast_fu_194_p4);
    sensitive << ( p_or_reg_100 );
    sensitive << ( tmp_10_fu_185_p4 );

    SC_METHOD(thread_tmp_10_fu_185_p4);
    sensitive << ( tmp_3_reg_306 );

    SC_METHOD(thread_tmp_11_fu_210_p2);
    sensitive << ( tmp_8_reg_312 );
    sensitive << ( p_or_cast2_fu_164_p1 );

    SC_METHOD(thread_tmp_12_cast_fu_177_p3);
    sensitive << ( p_or_reg_100 );
    sensitive << ( tmp_9_fu_168_p4 );

    SC_METHOD(thread_tmp_12_fu_215_p1);
    sensitive << ( tmp_11_fu_210_p2 );

    SC_METHOD(thread_tmp_13_fu_227_p1);
    sensitive << ( tmp_11_fu_210_p2 );

    SC_METHOD(thread_tmp_14_fu_239_p2);
    sensitive << ( p_shl5_cast_fu_231_p3 );
    sensitive << ( p_shl4_cast_fu_219_p3 );

    SC_METHOD(thread_tmp_15_fu_265_p2);
    sensitive << ( tmp_s_reg_322 );
    sensitive << ( p_oc_cast1_cast_fu_261_p1 );

    SC_METHOD(thread_tmp_16_fu_275_p2);
    sensitive << ( tmp_14_reg_327 );
    sensitive << ( p_oc_cast1_cast7_fu_257_p1 );

    SC_METHOD(thread_tmp_19_cast_fu_270_p1);
    sensitive << ( tmp_15_fu_265_p2 );

    SC_METHOD(thread_tmp_1_fu_128_p2);
    sensitive << ( oc_reg_89 );

    SC_METHOD(thread_tmp_20_cast_fu_280_p1);
    sensitive << ( tmp_16_fu_275_p2 );

    SC_METHOD(thread_tmp_2_fu_245_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( p_or_reg_100 );

    SC_METHOD(thread_tmp_3_fu_134_p2);
    sensitive << ( tmp_fu_122_p2 );
    sensitive << ( tmp_1_fu_128_p2 );

    SC_METHOD(thread_tmp_4_fu_285_p2);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( p_oc_reg_111 );

    SC_METHOD(thread_tmp_5_fu_140_p2);
    sensitive << ( oc_reg_89 );

    SC_METHOD(thread_tmp_6_fu_297_p2);
    sensitive << ( ifeat_load_reg_358 );
    sensitive << ( kernel_load_reg_363 );

    SC_METHOD(thread_tmp_7_fu_146_p2);
    sensitive << ( oc_reg_89 );

    SC_METHOD(thread_tmp_8_fu_152_p2);
    sensitive << ( tmp_7_fu_146_p2 );
    sensitive << ( tmp_5_fu_140_p2 );

    SC_METHOD(thread_tmp_9_fu_168_p4);
    sensitive << ( tmp_3_reg_306 );

    SC_METHOD(thread_tmp_fu_122_p2);
    sensitive << ( oc_reg_89 );

    SC_METHOD(thread_tmp_s_fu_204_p2);
    sensitive << ( p_shl6_cast_fu_194_p4 );
    sensitive << ( tmp_12_cast_fu_177_p3 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( tmp_2_fu_245_p2 );
    sensitive << ( tmp_4_fu_285_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "0000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "deconvolution_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, kernel_address0, "(port)kernel_address0");
    sc_trace(mVcdFile, kernel_ce0, "(port)kernel_ce0");
    sc_trace(mVcdFile, kernel_q0, "(port)kernel_q0");
    sc_trace(mVcdFile, ifeat_address0, "(port)ifeat_address0");
    sc_trace(mVcdFile, ifeat_ce0, "(port)ifeat_ce0");
    sc_trace(mVcdFile, ifeat_q0, "(port)ifeat_q0");
    sc_trace(mVcdFile, ofeat_address0, "(port)ofeat_address0");
    sc_trace(mVcdFile, ofeat_ce0, "(port)ofeat_ce0");
    sc_trace(mVcdFile, ofeat_we0, "(port)ofeat_we0");
    sc_trace(mVcdFile, ofeat_d0, "(port)ofeat_d0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, tmp_3_fu_134_p2, "tmp_3_fu_134_p2");
    sc_trace(mVcdFile, tmp_3_reg_306, "tmp_3_reg_306");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, tmp_8_fu_152_p2, "tmp_8_fu_152_p2");
    sc_trace(mVcdFile, tmp_8_reg_312, "tmp_8_reg_312");
    sc_trace(mVcdFile, oc_1_fu_158_p2, "oc_1_fu_158_p2");
    sc_trace(mVcdFile, oc_1_reg_317, "oc_1_reg_317");
    sc_trace(mVcdFile, tmp_s_fu_204_p2, "tmp_s_fu_204_p2");
    sc_trace(mVcdFile, tmp_s_reg_322, "tmp_s_reg_322");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, tmp_14_fu_239_p2, "tmp_14_fu_239_p2");
    sc_trace(mVcdFile, tmp_14_reg_327, "tmp_14_reg_327");
    sc_trace(mVcdFile, kr_fu_251_p2, "kr_fu_251_p2");
    sc_trace(mVcdFile, kr_reg_335, "kr_reg_335");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ofeat_addr_reg_345, "ofeat_addr_reg_345");
    sc_trace(mVcdFile, kc_fu_291_p2, "kc_fu_291_p2");
    sc_trace(mVcdFile, kc_reg_353, "kc_reg_353");
    sc_trace(mVcdFile, ifeat_load_reg_358, "ifeat_load_reg_358");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, kernel_load_reg_363, "kernel_load_reg_363");
    sc_trace(mVcdFile, tmp_6_fu_297_p2, "tmp_6_fu_297_p2");
    sc_trace(mVcdFile, tmp_6_reg_368, "tmp_6_reg_368");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, oc_reg_89, "oc_reg_89");
    sc_trace(mVcdFile, tmp_2_fu_245_p2, "tmp_2_fu_245_p2");
    sc_trace(mVcdFile, p_or_reg_100, "p_or_reg_100");
    sc_trace(mVcdFile, tmp_4_fu_285_p2, "tmp_4_fu_285_p2");
    sc_trace(mVcdFile, p_oc_reg_111, "p_oc_reg_111");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, tmp_19_cast_fu_270_p1, "tmp_19_cast_fu_270_p1");
    sc_trace(mVcdFile, tmp_20_cast_fu_280_p1, "tmp_20_cast_fu_280_p1");
    sc_trace(mVcdFile, tmp_fu_122_p2, "tmp_fu_122_p2");
    sc_trace(mVcdFile, tmp_1_fu_128_p2, "tmp_1_fu_128_p2");
    sc_trace(mVcdFile, tmp_7_fu_146_p2, "tmp_7_fu_146_p2");
    sc_trace(mVcdFile, tmp_5_fu_140_p2, "tmp_5_fu_140_p2");
    sc_trace(mVcdFile, tmp_9_fu_168_p4, "tmp_9_fu_168_p4");
    sc_trace(mVcdFile, tmp_10_fu_185_p4, "tmp_10_fu_185_p4");
    sc_trace(mVcdFile, p_shl6_cast_fu_194_p4, "p_shl6_cast_fu_194_p4");
    sc_trace(mVcdFile, tmp_12_cast_fu_177_p3, "tmp_12_cast_fu_177_p3");
    sc_trace(mVcdFile, p_or_cast2_fu_164_p1, "p_or_cast2_fu_164_p1");
    sc_trace(mVcdFile, tmp_11_fu_210_p2, "tmp_11_fu_210_p2");
    sc_trace(mVcdFile, tmp_12_fu_215_p1, "tmp_12_fu_215_p1");
    sc_trace(mVcdFile, tmp_13_fu_227_p1, "tmp_13_fu_227_p1");
    sc_trace(mVcdFile, p_shl5_cast_fu_231_p3, "p_shl5_cast_fu_231_p3");
    sc_trace(mVcdFile, p_shl4_cast_fu_219_p3, "p_shl4_cast_fu_219_p3");
    sc_trace(mVcdFile, p_oc_cast1_cast_fu_261_p1, "p_oc_cast1_cast_fu_261_p1");
    sc_trace(mVcdFile, tmp_15_fu_265_p2, "tmp_15_fu_265_p2");
    sc_trace(mVcdFile, p_oc_cast1_cast7_fu_257_p1, "p_oc_cast1_cast7_fu_257_p1");
    sc_trace(mVcdFile, tmp_16_fu_275_p2, "tmp_16_fu_275_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("deconvolution.hdltvin.dat");
    mHdltvoutHandle.open("deconvolution.hdltvout.dat");
}

deconvolution::~deconvolution() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void deconvolution::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(tmp_2_fu_245_p2.read(), ap_const_lv1_1))) {
        oc_reg_89 = oc_1_reg_317.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        oc_reg_89 = ap_const_lv32_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(tmp_2_fu_245_p2.read(), ap_const_lv1_0))) {
        p_oc_reg_111 = ap_const_lv2_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        p_oc_reg_111 = kc_reg_353.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, tmp_4_fu_285_p2.read()))) {
        p_or_reg_100 = kr_reg_335.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        p_or_reg_100 = ap_const_lv2_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        ifeat_load_reg_358 = ifeat_q0.read();
        kernel_load_reg_363 = kernel_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        kc_reg_353 = kc_fu_291_p2.read();
        ofeat_addr_reg_345 =  (sc_lv<13>) (tmp_20_cast_fu_280_p1.read());
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        kr_reg_335 = kr_fu_251_p2.read();
        tmp_14_reg_327 = tmp_14_fu_239_p2.read();
        tmp_s_reg_322 = tmp_s_fu_204_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        oc_1_reg_317 = oc_1_fu_158_p2.read();
        tmp_3_reg_306 = tmp_3_fu_134_p2.read();
        tmp_8_reg_312 = tmp_8_fu_152_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        tmp_6_reg_368 = tmp_6_fu_297_p2.read();
    }
}

void deconvolution::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void deconvolution::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void deconvolution::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void deconvolution::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void deconvolution::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void deconvolution::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void deconvolution::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void deconvolution::thread_ap_done() {
    ap_done = ap_const_logic_0;
}

void deconvolution::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void deconvolution::thread_ap_ready() {
    ap_ready = ap_const_logic_0;
}

void deconvolution::thread_ifeat_address0() {
    ifeat_address0 =  (sc_lv<11>) (ap_const_lv32_0);
}

void deconvolution::thread_ifeat_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        ifeat_ce0 = ap_const_logic_1;
    } else {
        ifeat_ce0 = ap_const_logic_0;
    }
}

void deconvolution::thread_kc_fu_291_p2() {
    kc_fu_291_p2 = (!p_oc_reg_111.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<2>(): (sc_biguint<2>(p_oc_reg_111.read()) + sc_biguint<2>(ap_const_lv2_1));
}

void deconvolution::thread_kernel_address0() {
    kernel_address0 =  (sc_lv<11>) (tmp_19_cast_fu_270_p1.read());
}

void deconvolution::thread_kernel_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        kernel_ce0 = ap_const_logic_1;
    } else {
        kernel_ce0 = ap_const_logic_0;
    }
}

void deconvolution::thread_kr_fu_251_p2() {
    kr_fu_251_p2 = (!ap_const_lv2_1.is_01() || !p_or_reg_100.read().is_01())? sc_lv<2>(): (sc_biguint<2>(ap_const_lv2_1) + sc_biguint<2>(p_or_reg_100.read()));
}

void deconvolution::thread_oc_1_fu_158_p2() {
    oc_1_fu_158_p2 = (!ap_const_lv32_1.is_01() || !oc_reg_89.read().is_01())? sc_lv<32>(): (sc_biguint<32>(ap_const_lv32_1) + sc_biguint<32>(oc_reg_89.read()));
}

void deconvolution::thread_ofeat_address0() {
    ofeat_address0 = ofeat_addr_reg_345.read();
}

void deconvolution::thread_ofeat_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        ofeat_ce0 = ap_const_logic_1;
    } else {
        ofeat_ce0 = ap_const_logic_0;
    }
}

void deconvolution::thread_ofeat_d0() {
    ofeat_d0 = tmp_6_reg_368.read();
}

void deconvolution::thread_ofeat_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        ofeat_we0 = ap_const_logic_1;
    } else {
        ofeat_we0 = ap_const_logic_0;
    }
}

void deconvolution::thread_p_oc_cast1_cast7_fu_257_p1() {
    p_oc_cast1_cast7_fu_257_p1 = esl_zext<14,2>(p_oc_reg_111.read());
}

void deconvolution::thread_p_oc_cast1_cast_fu_261_p1() {
    p_oc_cast1_cast_fu_261_p1 = esl_zext<12,2>(p_oc_reg_111.read());
}

void deconvolution::thread_p_or_cast2_fu_164_p1() {
    p_or_cast2_fu_164_p1 = esl_zext<32,2>(p_or_reg_100.read());
}

void deconvolution::thread_p_shl4_cast_fu_219_p3() {
    p_shl4_cast_fu_219_p3 = esl_concat<10,4>(tmp_12_fu_215_p1.read(), ap_const_lv4_0);
}

void deconvolution::thread_p_shl5_cast_fu_231_p3() {
    p_shl5_cast_fu_231_p3 = esl_concat<13,1>(tmp_13_fu_227_p1.read(), ap_const_lv1_0);
}

void deconvolution::thread_p_shl6_cast_fu_194_p4() {
    p_shl6_cast_fu_194_p4 = esl_concat<10,2>(esl_concat<8,2>(tmp_10_fu_185_p4.read(), p_or_reg_100.read()), ap_const_lv2_0);
}

void deconvolution::thread_tmp_10_fu_185_p4() {
    tmp_10_fu_185_p4 = tmp_3_reg_306.read().range(9, 2);
}

void deconvolution::thread_tmp_11_fu_210_p2() {
    tmp_11_fu_210_p2 = (!tmp_8_reg_312.read().is_01() || !p_or_cast2_fu_164_p1.read().is_01())? sc_lv<32>(): (sc_biguint<32>(tmp_8_reg_312.read()) + sc_biguint<32>(p_or_cast2_fu_164_p1.read()));
}

void deconvolution::thread_tmp_12_cast_fu_177_p3() {
    tmp_12_cast_fu_177_p3 = esl_concat<10,2>(tmp_9_fu_168_p4.read(), p_or_reg_100.read());
}

void deconvolution::thread_tmp_12_fu_215_p1() {
    tmp_12_fu_215_p1 = tmp_11_fu_210_p2.read().range(10-1, 0);
}

void deconvolution::thread_tmp_13_fu_227_p1() {
    tmp_13_fu_227_p1 = tmp_11_fu_210_p2.read().range(13-1, 0);
}

void deconvolution::thread_tmp_14_fu_239_p2() {
    tmp_14_fu_239_p2 = (!p_shl5_cast_fu_231_p3.read().is_01() || !p_shl4_cast_fu_219_p3.read().is_01())? sc_lv<14>(): (sc_biguint<14>(p_shl5_cast_fu_231_p3.read()) + sc_biguint<14>(p_shl4_cast_fu_219_p3.read()));
}

void deconvolution::thread_tmp_15_fu_265_p2() {
    tmp_15_fu_265_p2 = (!tmp_s_reg_322.read().is_01() || !p_oc_cast1_cast_fu_261_p1.read().is_01())? sc_lv<12>(): (sc_biguint<12>(tmp_s_reg_322.read()) + sc_biguint<12>(p_oc_cast1_cast_fu_261_p1.read()));
}

void deconvolution::thread_tmp_16_fu_275_p2() {
    tmp_16_fu_275_p2 = (!tmp_14_reg_327.read().is_01() || !p_oc_cast1_cast7_fu_257_p1.read().is_01())? sc_lv<14>(): (sc_biguint<14>(tmp_14_reg_327.read()) + sc_biguint<14>(p_oc_cast1_cast7_fu_257_p1.read()));
}

void deconvolution::thread_tmp_19_cast_fu_270_p1() {
    tmp_19_cast_fu_270_p1 = esl_zext<32,12>(tmp_15_fu_265_p2.read());
}

void deconvolution::thread_tmp_1_fu_128_p2() {
    tmp_1_fu_128_p2 = (!ap_const_lv32_3.is_01())? sc_lv<32>(): oc_reg_89.read() << (unsigned short)ap_const_lv32_3.to_uint();
}

void deconvolution::thread_tmp_20_cast_fu_280_p1() {
    tmp_20_cast_fu_280_p1 = esl_zext<32,14>(tmp_16_fu_275_p2.read());
}

void deconvolution::thread_tmp_2_fu_245_p2() {
    tmp_2_fu_245_p2 = (!p_or_reg_100.read().is_01() || !ap_const_lv2_3.is_01())? sc_lv<1>(): sc_lv<1>(p_or_reg_100.read() == ap_const_lv2_3);
}

void deconvolution::thread_tmp_3_fu_134_p2() {
    tmp_3_fu_134_p2 = (!tmp_fu_122_p2.read().is_01() || !tmp_1_fu_128_p2.read().is_01())? sc_lv<32>(): (sc_biguint<32>(tmp_fu_122_p2.read()) - sc_biguint<32>(tmp_1_fu_128_p2.read()));
}

void deconvolution::thread_tmp_4_fu_285_p2() {
    tmp_4_fu_285_p2 = (!p_oc_reg_111.read().is_01() || !ap_const_lv2_3.is_01())? sc_lv<1>(): sc_lv<1>(p_oc_reg_111.read() == ap_const_lv2_3);
}

void deconvolution::thread_tmp_5_fu_140_p2() {
    tmp_5_fu_140_p2 = (!ap_const_lv32_4.is_01())? sc_lv<32>(): oc_reg_89.read() << (unsigned short)ap_const_lv32_4.to_uint();
}

void deconvolution::thread_tmp_6_fu_297_p2() {
    tmp_6_fu_297_p2 = (!kernel_load_reg_363.read().is_01() || !ifeat_load_reg_358.read().is_01())? sc_lv<32>(): sc_bigint<32>(kernel_load_reg_363.read()) * sc_bigint<32>(ifeat_load_reg_358.read());
}

void deconvolution::thread_tmp_7_fu_146_p2() {
    tmp_7_fu_146_p2 = (!ap_const_lv32_1.is_01())? sc_lv<32>(): oc_reg_89.read() << (unsigned short)ap_const_lv32_1.to_uint();
}

void deconvolution::thread_tmp_8_fu_152_p2() {
    tmp_8_fu_152_p2 = (!tmp_7_fu_146_p2.read().is_01() || !tmp_5_fu_140_p2.read().is_01())? sc_lv<32>(): (sc_biguint<32>(tmp_7_fu_146_p2.read()) + sc_biguint<32>(tmp_5_fu_140_p2.read()));
}

void deconvolution::thread_tmp_9_fu_168_p4() {
    tmp_9_fu_168_p4 = tmp_3_reg_306.read().range(11, 2);
}

void deconvolution::thread_tmp_fu_122_p2() {
    tmp_fu_122_p2 = (!ap_const_lv32_5.is_01())? sc_lv<32>(): oc_reg_89.read() << (unsigned short)ap_const_lv32_5.to_uint();
}

void deconvolution::thread_tmp_s_fu_204_p2() {
    tmp_s_fu_204_p2 = (!p_shl6_cast_fu_194_p4.read().is_01() || !tmp_12_cast_fu_177_p3.read().is_01())? sc_lv<12>(): (sc_biguint<12>(p_shl6_cast_fu_194_p4.read()) - sc_biguint<12>(tmp_12_cast_fu_177_p3.read()));
}

void deconvolution::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(tmp_2_fu_245_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, tmp_4_fu_285_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        default : 
            ap_NS_fsm = "XXXXXXX";
            break;
    }
}

void deconvolution::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"kernel_address0\" :  \"" << kernel_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"kernel_ce0\" :  \"" << kernel_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"kernel_q0\" :  \"" << kernel_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ifeat_address0\" :  \"" << ifeat_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ifeat_ce0\" :  \"" << ifeat_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ifeat_q0\" :  \"" << ifeat_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ofeat_address0\" :  \"" << ofeat_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ofeat_ce0\" :  \"" << ofeat_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ofeat_we0\" :  \"" << ofeat_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ofeat_d0\" :  \"" << ofeat_d0.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

