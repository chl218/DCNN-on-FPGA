// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="deconvolution,hls_ip_2017_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.510000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=3,HLS_SYN_FF=273,HLS_SYN_LUT=360}" *)

module deconvolution (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        kernel_address0,
        kernel_ce0,
        kernel_q0,
        ifeat_address0,
        ifeat_ce0,
        ifeat_q0,
        ofeat_address0,
        ofeat_ce0,
        ofeat_we0,
        ofeat_d0
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_state2 = 7'd2;
parameter    ap_ST_fsm_state3 = 7'd4;
parameter    ap_ST_fsm_state4 = 7'd8;
parameter    ap_ST_fsm_state5 = 7'd16;
parameter    ap_ST_fsm_state6 = 7'd32;
parameter    ap_ST_fsm_state7 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [10:0] kernel_address0;
output   kernel_ce0;
input  [31:0] kernel_q0;
output  [10:0] ifeat_address0;
output   ifeat_ce0;
input  [31:0] ifeat_q0;
output  [12:0] ofeat_address0;
output   ofeat_ce0;
output   ofeat_we0;
output  [31:0] ofeat_d0;

reg ap_idle;
reg kernel_ce0;
reg ifeat_ce0;
reg ofeat_ce0;
reg ofeat_we0;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] tmp_3_fu_134_p2;
reg   [31:0] tmp_3_reg_306;
wire    ap_CS_fsm_state2;
wire   [31:0] tmp_8_fu_152_p2;
reg   [31:0] tmp_8_reg_312;
wire   [31:0] oc_1_fu_158_p2;
reg   [31:0] oc_1_reg_317;
wire   [11:0] tmp_s_fu_204_p2;
reg   [11:0] tmp_s_reg_322;
wire    ap_CS_fsm_state3;
wire   [13:0] tmp_14_fu_239_p2;
reg   [13:0] tmp_14_reg_327;
wire   [1:0] kr_fu_251_p2;
reg   [1:0] kr_reg_335;
wire    ap_CS_fsm_state4;
reg   [12:0] ofeat_addr_reg_345;
wire   [1:0] kc_fu_291_p2;
reg   [1:0] kc_reg_353;
reg  signed [31:0] ifeat_load_reg_358;
wire    ap_CS_fsm_state5;
reg  signed [31:0] kernel_load_reg_363;
wire   [31:0] tmp_6_fu_297_p2;
reg   [31:0] tmp_6_reg_368;
wire    ap_CS_fsm_state6;
reg   [31:0] oc_reg_89;
wire   [0:0] tmp_2_fu_245_p2;
reg   [1:0] p_or_reg_100;
wire   [0:0] tmp_4_fu_285_p2;
reg   [1:0] p_oc_reg_111;
wire    ap_CS_fsm_state7;
wire   [31:0] tmp_19_cast_fu_270_p1;
wire   [31:0] tmp_20_cast_fu_280_p1;
wire   [31:0] tmp_fu_122_p2;
wire   [31:0] tmp_1_fu_128_p2;
wire   [31:0] tmp_7_fu_146_p2;
wire   [31:0] tmp_5_fu_140_p2;
wire   [9:0] tmp_9_fu_168_p4;
wire   [7:0] tmp_10_fu_185_p4;
wire   [11:0] p_shl6_cast_fu_194_p4;
wire   [11:0] tmp_12_cast_fu_177_p3;
wire   [31:0] p_or_cast2_fu_164_p1;
wire   [31:0] tmp_11_fu_210_p2;
wire   [9:0] tmp_12_fu_215_p1;
wire   [12:0] tmp_13_fu_227_p1;
wire   [13:0] p_shl5_cast_fu_231_p3;
wire   [13:0] p_shl4_cast_fu_219_p3;
wire   [11:0] p_oc_cast1_cast_fu_261_p1;
wire   [11:0] tmp_15_fu_265_p2;
wire   [13:0] p_oc_cast1_cast7_fu_257_p1;
wire   [13:0] tmp_16_fu_275_p2;
reg   [6:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (tmp_2_fu_245_p2 == 1'd1))) begin
        oc_reg_89 <= oc_1_reg_317;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        oc_reg_89 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (tmp_2_fu_245_p2 == 1'd0))) begin
        p_oc_reg_111 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        p_oc_reg_111 <= kc_reg_353;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == tmp_4_fu_285_p2))) begin
        p_or_reg_100 <= kr_reg_335;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        p_or_reg_100 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        ifeat_load_reg_358 <= ifeat_q0;
        kernel_load_reg_363 <= kernel_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        kc_reg_353 <= kc_fu_291_p2;
        ofeat_addr_reg_345 <= tmp_20_cast_fu_280_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        kr_reg_335 <= kr_fu_251_p2;
        tmp_14_reg_327[13 : 1] <= tmp_14_fu_239_p2[13 : 1];
        tmp_s_reg_322 <= tmp_s_fu_204_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        oc_1_reg_317 <= oc_1_fu_158_p2;
        tmp_3_reg_306[31 : 3] <= tmp_3_fu_134_p2[31 : 3];
        tmp_8_reg_312[31 : 1] <= tmp_8_fu_152_p2[31 : 1];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        tmp_6_reg_368 <= tmp_6_fu_297_p2;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        ifeat_ce0 = 1'b1;
    end else begin
        ifeat_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        kernel_ce0 = 1'b1;
    end else begin
        kernel_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ofeat_ce0 = 1'b1;
    end else begin
        ofeat_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ofeat_we0 = 1'b1;
    end else begin
        ofeat_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (tmp_2_fu_245_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == tmp_4_fu_285_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_done = 1'b0;

assign ap_ready = 1'b0;

assign ifeat_address0 = 32'd0;

assign kc_fu_291_p2 = (p_oc_reg_111 + 2'd1);

assign kernel_address0 = tmp_19_cast_fu_270_p1;

assign kr_fu_251_p2 = (2'd1 + p_or_reg_100);

assign oc_1_fu_158_p2 = (32'd1 + oc_reg_89);

assign ofeat_address0 = ofeat_addr_reg_345;

assign ofeat_d0 = tmp_6_reg_368;

assign p_oc_cast1_cast7_fu_257_p1 = p_oc_reg_111;

assign p_oc_cast1_cast_fu_261_p1 = p_oc_reg_111;

assign p_or_cast2_fu_164_p1 = p_or_reg_100;

assign p_shl4_cast_fu_219_p3 = {{tmp_12_fu_215_p1}, {4'd0}};

assign p_shl5_cast_fu_231_p3 = {{tmp_13_fu_227_p1}, {1'd0}};

assign p_shl6_cast_fu_194_p4 = {{{tmp_10_fu_185_p4}, {p_or_reg_100}}, {2'd0}};

assign tmp_10_fu_185_p4 = {{tmp_3_reg_306[9:2]}};

assign tmp_11_fu_210_p2 = (tmp_8_reg_312 + p_or_cast2_fu_164_p1);

assign tmp_12_cast_fu_177_p3 = {{tmp_9_fu_168_p4}, {p_or_reg_100}};

assign tmp_12_fu_215_p1 = tmp_11_fu_210_p2[9:0];

assign tmp_13_fu_227_p1 = tmp_11_fu_210_p2[12:0];

assign tmp_14_fu_239_p2 = (p_shl5_cast_fu_231_p3 + p_shl4_cast_fu_219_p3);

assign tmp_15_fu_265_p2 = (tmp_s_reg_322 + p_oc_cast1_cast_fu_261_p1);

assign tmp_16_fu_275_p2 = (tmp_14_reg_327 + p_oc_cast1_cast7_fu_257_p1);

assign tmp_19_cast_fu_270_p1 = tmp_15_fu_265_p2;

assign tmp_1_fu_128_p2 = oc_reg_89 << 32'd3;

assign tmp_20_cast_fu_280_p1 = tmp_16_fu_275_p2;

assign tmp_2_fu_245_p2 = ((p_or_reg_100 == 2'd3) ? 1'b1 : 1'b0);

assign tmp_3_fu_134_p2 = (tmp_fu_122_p2 - tmp_1_fu_128_p2);

assign tmp_4_fu_285_p2 = ((p_oc_reg_111 == 2'd3) ? 1'b1 : 1'b0);

assign tmp_5_fu_140_p2 = oc_reg_89 << 32'd4;

assign tmp_6_fu_297_p2 = ($signed(kernel_load_reg_363) * $signed(ifeat_load_reg_358));

assign tmp_7_fu_146_p2 = oc_reg_89 << 32'd1;

assign tmp_8_fu_152_p2 = (tmp_7_fu_146_p2 + tmp_5_fu_140_p2);

assign tmp_9_fu_168_p4 = {{tmp_3_reg_306[11:2]}};

assign tmp_fu_122_p2 = oc_reg_89 << 32'd5;

assign tmp_s_fu_204_p2 = (p_shl6_cast_fu_194_p4 - tmp_12_cast_fu_177_p3);

always @ (posedge ap_clk) begin
    tmp_3_reg_306[2:0] <= 3'b000;
    tmp_8_reg_312[0] <= 1'b0;
    tmp_14_reg_327[0] <= 1'b0;
end

endmodule //deconvolution
