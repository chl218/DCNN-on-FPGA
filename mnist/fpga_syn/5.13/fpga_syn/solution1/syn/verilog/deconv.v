// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="deconv,hls_ip_2017_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.703750,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=1,HLS_SYN_FF=1207,HLS_SYN_LUT=1778}" *)

module deconv (
        ap_clk,
        ap_rst_n,
        in_r_TDATA,
        in_r_TVALID,
        in_r_TREADY,
        out_r_TDATA,
        out_r_TVALID,
        out_r_TREADY,
        w_TDATA,
        w_TVALID,
        w_TREADY,
        b_TDATA,
        b_TVALID,
        b_TREADY,
        mean_TDATA,
        mean_TVALID,
        mean_TREADY,
        std_TDATA,
        std_TVALID,
        std_TREADY,
        s_axi_CTRL_BUS_AWVALID,
        s_axi_CTRL_BUS_AWREADY,
        s_axi_CTRL_BUS_AWADDR,
        s_axi_CTRL_BUS_WVALID,
        s_axi_CTRL_BUS_WREADY,
        s_axi_CTRL_BUS_WDATA,
        s_axi_CTRL_BUS_WSTRB,
        s_axi_CTRL_BUS_ARVALID,
        s_axi_CTRL_BUS_ARREADY,
        s_axi_CTRL_BUS_ARADDR,
        s_axi_CTRL_BUS_RVALID,
        s_axi_CTRL_BUS_RREADY,
        s_axi_CTRL_BUS_RDATA,
        s_axi_CTRL_BUS_RRESP,
        s_axi_CTRL_BUS_BVALID,
        s_axi_CTRL_BUS_BREADY,
        s_axi_CTRL_BUS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 54'd1;
parameter    ap_ST_fsm_state2 = 54'd2;
parameter    ap_ST_fsm_state3 = 54'd4;
parameter    ap_ST_fsm_state4 = 54'd8;
parameter    ap_ST_fsm_state5 = 54'd16;
parameter    ap_ST_fsm_state6 = 54'd32;
parameter    ap_ST_fsm_state7 = 54'd64;
parameter    ap_ST_fsm_state8 = 54'd128;
parameter    ap_ST_fsm_state9 = 54'd256;
parameter    ap_ST_fsm_state10 = 54'd512;
parameter    ap_ST_fsm_state11 = 54'd1024;
parameter    ap_ST_fsm_state12 = 54'd2048;
parameter    ap_ST_fsm_state13 = 54'd4096;
parameter    ap_ST_fsm_state14 = 54'd8192;
parameter    ap_ST_fsm_state15 = 54'd16384;
parameter    ap_ST_fsm_state16 = 54'd32768;
parameter    ap_ST_fsm_state17 = 54'd65536;
parameter    ap_ST_fsm_state18 = 54'd131072;
parameter    ap_ST_fsm_state19 = 54'd262144;
parameter    ap_ST_fsm_state20 = 54'd524288;
parameter    ap_ST_fsm_state21 = 54'd1048576;
parameter    ap_ST_fsm_state22 = 54'd2097152;
parameter    ap_ST_fsm_state23 = 54'd4194304;
parameter    ap_ST_fsm_state24 = 54'd8388608;
parameter    ap_ST_fsm_state25 = 54'd16777216;
parameter    ap_ST_fsm_state26 = 54'd33554432;
parameter    ap_ST_fsm_state27 = 54'd67108864;
parameter    ap_ST_fsm_state28 = 54'd134217728;
parameter    ap_ST_fsm_state29 = 54'd268435456;
parameter    ap_ST_fsm_state30 = 54'd536870912;
parameter    ap_ST_fsm_state31 = 54'd1073741824;
parameter    ap_ST_fsm_state32 = 54'd2147483648;
parameter    ap_ST_fsm_state33 = 54'd4294967296;
parameter    ap_ST_fsm_state34 = 54'd8589934592;
parameter    ap_ST_fsm_state35 = 54'd17179869184;
parameter    ap_ST_fsm_state36 = 54'd34359738368;
parameter    ap_ST_fsm_state37 = 54'd68719476736;
parameter    ap_ST_fsm_state38 = 54'd137438953472;
parameter    ap_ST_fsm_state39 = 54'd274877906944;
parameter    ap_ST_fsm_state40 = 54'd549755813888;
parameter    ap_ST_fsm_state41 = 54'd1099511627776;
parameter    ap_ST_fsm_state42 = 54'd2199023255552;
parameter    ap_ST_fsm_state43 = 54'd4398046511104;
parameter    ap_ST_fsm_state44 = 54'd8796093022208;
parameter    ap_ST_fsm_state45 = 54'd17592186044416;
parameter    ap_ST_fsm_state46 = 54'd35184372088832;
parameter    ap_ST_fsm_state47 = 54'd70368744177664;
parameter    ap_ST_fsm_state48 = 54'd140737488355328;
parameter    ap_ST_fsm_state49 = 54'd281474976710656;
parameter    ap_ST_fsm_state50 = 54'd562949953421312;
parameter    ap_ST_fsm_state51 = 54'd1125899906842624;
parameter    ap_ST_fsm_state52 = 54'd2251799813685248;
parameter    ap_ST_fsm_state53 = 54'd4503599627370496;
parameter    ap_ST_fsm_state54 = 54'd9007199254740992;
parameter    C_S_AXI_CTRL_BUS_DATA_WIDTH = 32;
parameter    C_S_AXI_CTRL_BUS_ADDR_WIDTH = 7;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_CTRL_BUS_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
input  [23:0] in_r_TDATA;
input   in_r_TVALID;
output   in_r_TREADY;
output  [23:0] out_r_TDATA;
output   out_r_TVALID;
input   out_r_TREADY;
input  [23:0] w_TDATA;
input   w_TVALID;
output   w_TREADY;
input  [23:0] b_TDATA;
input   b_TVALID;
output   b_TREADY;
input  [23:0] mean_TDATA;
input   mean_TVALID;
output   mean_TREADY;
input  [23:0] std_TDATA;
input   std_TVALID;
output   std_TREADY;
input   s_axi_CTRL_BUS_AWVALID;
output   s_axi_CTRL_BUS_AWREADY;
input  [C_S_AXI_CTRL_BUS_ADDR_WIDTH - 1:0] s_axi_CTRL_BUS_AWADDR;
input   s_axi_CTRL_BUS_WVALID;
output   s_axi_CTRL_BUS_WREADY;
input  [C_S_AXI_CTRL_BUS_DATA_WIDTH - 1:0] s_axi_CTRL_BUS_WDATA;
input  [C_S_AXI_CTRL_BUS_WSTRB_WIDTH - 1:0] s_axi_CTRL_BUS_WSTRB;
input   s_axi_CTRL_BUS_ARVALID;
output   s_axi_CTRL_BUS_ARREADY;
input  [C_S_AXI_CTRL_BUS_ADDR_WIDTH - 1:0] s_axi_CTRL_BUS_ARADDR;
output   s_axi_CTRL_BUS_RVALID;
input   s_axi_CTRL_BUS_RREADY;
output  [C_S_AXI_CTRL_BUS_DATA_WIDTH - 1:0] s_axi_CTRL_BUS_RDATA;
output  [1:0] s_axi_CTRL_BUS_RRESP;
output   s_axi_CTRL_BUS_BVALID;
input   s_axi_CTRL_BUS_BREADY;
output  [1:0] s_axi_CTRL_BUS_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [53:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [5:0] x_I_h;
wire   [5:0] x_I_w;
wire   [5:0] x_I_c;
wire   [5:0] x_O_h;
wire   [5:0] x_O_w;
wire   [5:0] x_O_c;
wire   [5:0] x_K;
wire   [5:0] x_S;
wire   [5:0] x_P;
wire   [0:0] x_norm;
reg   [23:0] in_r_0_data_out;
wire    in_r_0_vld_in;
wire    in_r_0_vld_out;
wire    in_r_0_ack_in;
reg    in_r_0_ack_out;
reg   [23:0] in_r_0_payload_A;
reg   [23:0] in_r_0_payload_B;
reg    in_r_0_sel_rd;
reg    in_r_0_sel_wr;
wire    in_r_0_sel;
wire    in_r_0_load_A;
wire    in_r_0_load_B;
reg   [1:0] in_r_0_state;
wire    in_r_0_state_cmp_full;
reg   [23:0] out_r_1_data_in;
reg   [23:0] out_r_1_data_out;
reg    out_r_1_vld_in;
wire    out_r_1_vld_out;
wire    out_r_1_ack_in;
wire    out_r_1_ack_out;
reg   [23:0] out_r_1_payload_A;
reg   [23:0] out_r_1_payload_B;
reg    out_r_1_sel_rd;
reg    out_r_1_sel_wr;
wire    out_r_1_sel;
wire    out_r_1_load_A;
wire    out_r_1_load_B;
reg   [1:0] out_r_1_state;
wire    out_r_1_state_cmp_full;
reg   [23:0] w_0_data_out;
wire    w_0_vld_in;
wire    w_0_vld_out;
wire    w_0_ack_in;
reg    w_0_ack_out;
reg   [23:0] w_0_payload_A;
reg   [23:0] w_0_payload_B;
reg    w_0_sel_rd;
reg    w_0_sel_wr;
wire    w_0_sel;
wire    w_0_load_A;
wire    w_0_load_B;
reg   [1:0] w_0_state;
wire    w_0_state_cmp_full;
reg   [23:0] b_0_data_out;
wire    b_0_vld_in;
wire    b_0_vld_out;
wire    b_0_ack_in;
reg    b_0_ack_out;
reg   [23:0] b_0_payload_A;
reg   [23:0] b_0_payload_B;
reg    b_0_sel_rd;
reg    b_0_sel_wr;
wire    b_0_sel;
wire    b_0_load_A;
wire    b_0_load_B;
reg   [1:0] b_0_state;
wire    b_0_state_cmp_full;
reg   [23:0] mean_0_data_out;
wire    mean_0_vld_in;
wire    mean_0_vld_out;
wire    mean_0_ack_in;
reg    mean_0_ack_out;
reg   [23:0] mean_0_payload_A;
reg   [23:0] mean_0_payload_B;
reg    mean_0_sel_rd;
reg    mean_0_sel_wr;
wire    mean_0_sel;
wire    mean_0_load_A;
wire    mean_0_load_B;
reg   [1:0] mean_0_state;
wire    mean_0_state_cmp_full;
reg   [23:0] std_0_data_out;
wire    std_0_vld_in;
wire    std_0_vld_out;
wire    std_0_ack_in;
reg    std_0_ack_out;
reg   [23:0] std_0_payload_A;
reg   [23:0] std_0_payload_B;
reg    std_0_sel_rd;
reg    std_0_sel_wr;
wire    std_0_sel;
wire    std_0_load_A;
wire    std_0_load_B;
reg   [1:0] std_0_state;
wire    std_0_state_cmp_full;
reg   [9:0] temp_address0;
reg    temp_ce0;
reg    temp_we0;
reg   [19:0] temp_d0;
wire   [19:0] temp_q0;
reg    in_r_TDATA_blk_n;
wire    ap_CS_fsm_state11;
reg    out_r_TDATA_blk_n;
wire    ap_CS_fsm_state53;
wire    ap_CS_fsm_state54;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state17;
reg    w_TDATA_blk_n;
reg    b_TDATA_blk_n;
wire    ap_CS_fsm_state5;
reg    mean_TDATA_blk_n;
wire    ap_CS_fsm_state20;
reg    std_TDATA_blk_n;
reg   [0:0] x_norm_read_reg_857;
reg   [5:0] x_P_read_reg_861;
reg   [5:0] x_S_read_reg_867;
reg   [5:0] x_K_read_reg_873;
reg   [5:0] x_O_c_read_reg_879;
reg   [5:0] x_O_w_read_reg_884;
reg   [5:0] x_O_h_read_reg_891;
reg   [5:0] x_I_c_read_reg_898;
reg   [5:0] x_I_w_read_reg_903;
reg   [5:0] x_I_h_read_reg_908;
wire   [5:0] oc_1_fu_397_p2;
reg   [5:0] oc_1_reg_916;
wire    ap_CS_fsm_state2;
wire   [5:0] i_1_fu_408_p2;
reg   [5:0] i_1_reg_924;
wire    ap_CS_fsm_state3;
wire   [10:0] tmp_4_fu_434_p2;
reg   [10:0] tmp_4_reg_929;
wire   [0:0] exitcond11_fu_403_p2;
wire   [5:0] j_1_fu_445_p2;
reg   [5:0] j_1_reg_937;
wire    ap_CS_fsm_state4;
wire   [10:0] tmp_s_fu_455_p2;
reg   [10:0] tmp_s_reg_942;
wire   [0:0] exitcond10_fu_440_p2;
wire   [5:0] ic_1_fu_478_p2;
reg   [5:0] ic_1_reg_950;
wire    ap_CS_fsm_state6;
wire   [5:0] next_mul1_fu_484_p2;
reg   [5:0] next_mul1_reg_955;
wire    ap_CS_fsm_state7;
wire   [5:0] ih_1_fu_494_p2;
reg   [5:0] ih_1_reg_963;
wire   [5:0] next_mul_fu_500_p2;
reg   [5:0] next_mul_reg_968;
wire    ap_CS_fsm_state8;
wire   [5:0] iw_1_fu_510_p2;
reg   [5:0] iw_1_reg_976;
wire   [5:0] kh_1_fu_521_p2;
reg   [5:0] kh_1_reg_984;
wire    ap_CS_fsm_state9;
wire   [10:0] tmp_28_fu_558_p2;
reg   [10:0] tmp_28_reg_989;
wire   [0:0] exitcond6_fu_516_p2;
wire   [5:0] kw_1_fu_569_p2;
reg   [5:0] kw_1_reg_997;
wire    ap_CS_fsm_state10;
reg   [9:0] temp_addr_3_reg_1002;
wire   [0:0] exitcond5_fu_564_p2;
reg   [17:0] tmp_2_i_reg_1007;
reg    ap_block_state11;
wire   [0:0] icmp_fu_645_p2;
reg   [0:0] icmp_reg_1012;
wire    ap_CS_fsm_state12;
wire   [0:0] tmp_21_fu_651_p2;
reg   [0:0] tmp_21_reg_1016;
wire   [5:0] oh_1_fu_662_p2;
reg   [5:0] oh_1_reg_1023;
wire    ap_CS_fsm_state14;
wire   [10:0] tmp_10_fu_688_p2;
reg   [10:0] tmp_10_reg_1028;
wire   [0:0] exitcond2_fu_657_p2;
wire   [5:0] oh_fu_699_p2;
reg   [5:0] oh_reg_1036;
wire   [10:0] tmp_7_fu_725_p2;
reg   [10:0] tmp_7_reg_1041;
wire   [0:0] exitcond4_fu_694_p2;
wire   [5:0] ow_1_fu_736_p2;
reg   [5:0] ow_1_reg_1049;
wire    ap_CS_fsm_state15;
wire   [0:0] exitcond_fu_731_p2;
wire  signed [23:0] tmp_13_fu_760_p1;
wire   [5:0] ow_fu_770_p2;
reg   [5:0] ow_reg_1067;
wire    ap_CS_fsm_state18;
wire   [0:0] exitcond3_fu_765_p2;
wire   [17:0] tmp_15_fu_790_p1;
reg   [17:0] tmp_15_reg_1077;
wire    ap_CS_fsm_state19;
reg    ap_block_state20;
wire   [23:0] tmp_11_fu_845_p1;
reg   [5:0] oc_reg_236;
reg   [5:0] i_reg_247;
wire   [0:0] exitcond1_fu_392_p2;
reg   [5:0] j_reg_258;
reg   [5:0] ic_reg_269;
wire   [0:0] exitcond8_fu_489_p2;
reg   [5:0] ih_reg_280;
wire   [0:0] exitcond7_fu_505_p2;
wire   [0:0] exitcond9_fu_473_p2;
reg   [5:0] phi_mul1_reg_291;
reg   [5:0] iw_reg_303;
reg   [5:0] phi_mul_reg_314;
reg   [5:0] kh_reg_326;
reg   [5:0] kw_reg_337;
wire    ap_CS_fsm_state13;
reg   [5:0] oh3_reg_348;
reg   [5:0] oh1_reg_359;
reg   [5:0] ow4_reg_370;
reg   [5:0] ow2_reg_381;
wire  signed [31:0] tmp_15_cast_fu_469_p1;
wire  signed [31:0] tmp_33_cast_fu_595_p1;
wire  signed [31:0] tmp_29_cast_fu_751_p1;
wire  signed [31:0] tmp_28_cast_fu_785_p1;
wire  signed [19:0] tmp_3_fu_464_p1;
wire   [19:0] tmp_19_fu_628_p2;
wire   [7:0] tmp_2_fu_422_p3;
wire   [10:0] tmp_1_fu_414_p3;
wire   [10:0] p_shl2_cast_fu_430_p1;
wire   [10:0] tmp_5_cast_fu_451_p1;
wire   [17:0] tmp_fu_460_p1;
wire   [5:0] tmp_14_fu_527_p2;
wire   [5:0] oh_2_fu_533_p2;
wire   [7:0] tmp_27_fu_546_p3;
wire   [10:0] tmp_26_fu_538_p3;
wire   [10:0] p_shl4_cast_fu_554_p1;
wire   [5:0] tmp_16_fu_575_p2;
wire   [5:0] ow_2_fu_581_p2;
wire   [10:0] tmp_18_cast_fu_586_p1;
wire   [10:0] tmp_31_fu_590_p2;
wire  signed [17:0] tmp_29_fu_600_p1;
wire  signed [17:0] tmp_30_fu_604_p1;
wire  signed [29:0] c_fu_850_p2;
wire  signed [19:0] tmp_17_fu_625_p1;
wire   [2:0] tmp_32_fu_635_p4;
wire   [7:0] tmp_9_fu_676_p3;
wire   [10:0] tmp_8_fu_668_p3;
wire   [10:0] p_shl8_cast_fu_684_p1;
wire   [7:0] tmp_6_fu_713_p3;
wire   [10:0] tmp_5_fu_705_p3;
wire   [10:0] p_shl6_cast_fu_721_p1;
wire   [10:0] tmp_10_cast_fu_742_p1;
wire   [10:0] tmp_24_fu_746_p2;
wire   [17:0] tmp_25_fu_756_p1;
wire   [10:0] tmp_7_cast_fu_776_p1;
wire   [10:0] tmp_12_fu_780_p2;
wire   [17:0] tmp_18_fu_794_p1;
wire   [17:0] a_assign_fu_798_p2;
wire  signed [17:0] tmp_20_fu_803_p1;
wire   [29:0] grp_fu_819_p0;
wire   [29:0] grp_fu_819_p2;
wire   [0:0] tmp_23_fu_829_p3;
wire   [16:0] tmp_22_fu_825_p1;
wire   [16:0] y_assign_1_fu_837_p3;
reg    grp_fu_819_ap_start;
wire    grp_fu_819_ap_done;
reg    grp_fu_819_ce;
reg   [53:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 54'd1;
#0 in_r_0_sel_rd = 1'b0;
#0 in_r_0_sel_wr = 1'b0;
#0 in_r_0_state = 2'd0;
#0 out_r_1_sel_rd = 1'b0;
#0 out_r_1_sel_wr = 1'b0;
#0 out_r_1_state = 2'd0;
#0 w_0_sel_rd = 1'b0;
#0 w_0_sel_wr = 1'b0;
#0 w_0_state = 2'd0;
#0 b_0_sel_rd = 1'b0;
#0 b_0_sel_wr = 1'b0;
#0 b_0_state = 2'd0;
#0 mean_0_sel_rd = 1'b0;
#0 mean_0_sel_wr = 1'b0;
#0 mean_0_state = 2'd0;
#0 std_0_sel_rd = 1'b0;
#0 std_0_sel_wr = 1'b0;
#0 std_0_state = 2'd0;
end

deconv_temp #(
    .DataWidth( 20 ),
    .AddressRange( 784 ),
    .AddressWidth( 10 ))
temp_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(temp_address0),
    .ce0(temp_ce0),
    .we0(temp_we0),
    .d0(temp_d0),
    .q0(temp_q0)
);

deconv_CTRL_BUS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CTRL_BUS_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CTRL_BUS_DATA_WIDTH ))
deconv_CTRL_BUS_s_axi_U(
    .AWVALID(s_axi_CTRL_BUS_AWVALID),
    .AWREADY(s_axi_CTRL_BUS_AWREADY),
    .AWADDR(s_axi_CTRL_BUS_AWADDR),
    .WVALID(s_axi_CTRL_BUS_WVALID),
    .WREADY(s_axi_CTRL_BUS_WREADY),
    .WDATA(s_axi_CTRL_BUS_WDATA),
    .WSTRB(s_axi_CTRL_BUS_WSTRB),
    .ARVALID(s_axi_CTRL_BUS_ARVALID),
    .ARREADY(s_axi_CTRL_BUS_ARREADY),
    .ARADDR(s_axi_CTRL_BUS_ARADDR),
    .RVALID(s_axi_CTRL_BUS_RVALID),
    .RREADY(s_axi_CTRL_BUS_RREADY),
    .RDATA(s_axi_CTRL_BUS_RDATA),
    .RRESP(s_axi_CTRL_BUS_RRESP),
    .BVALID(s_axi_CTRL_BUS_BVALID),
    .BREADY(s_axi_CTRL_BUS_BREADY),
    .BRESP(s_axi_CTRL_BUS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .x_I_h(x_I_h),
    .x_I_w(x_I_w),
    .x_I_c(x_I_c),
    .x_O_h(x_O_h),
    .x_O_w(x_O_w),
    .x_O_c(x_O_c),
    .x_K(x_K),
    .x_S(x_S),
    .x_P(x_P),
    .x_norm(x_norm)
);

deconv_sdiv_30ns_bkb #(
    .ID( 1 ),
    .NUM_STAGE( 34 ),
    .din0_WIDTH( 30 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 30 ))
deconv_sdiv_30ns_bkb_U0(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .start(grp_fu_819_ap_start),
    .done(grp_fu_819_ap_done),
    .din0(grp_fu_819_p0),
    .din1(tmp_20_fu_803_p1),
    .ce(grp_fu_819_ce),
    .dout(grp_fu_819_p2)
);

deconv_mul_mul_18cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 18 ),
    .din1_WIDTH( 18 ),
    .dout_WIDTH( 30 ))
deconv_mul_mul_18cud_U1(
    .din0(tmp_30_fu_604_p1),
    .din1(tmp_29_fu_600_p1),
    .dout(c_fu_850_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        b_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == b_0_ack_out) & (1'b1 == b_0_vld_out))) begin
            b_0_sel_rd <= ~b_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        b_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == b_0_vld_in) & (1'b1 == b_0_ack_in))) begin
            b_0_sel_wr <= ~b_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        b_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == b_0_vld_in) & (1'b1 == b_0_ack_out) & (2'd3 == b_0_state)) | ((1'b0 == b_0_vld_in) & (2'd2 == b_0_state)))) begin
            b_0_state <= 2'd2;
        end else if ((((1'b1 == b_0_vld_in) & (1'b0 == b_0_ack_out) & (2'd3 == b_0_state)) | ((1'b0 == b_0_ack_out) & (2'd1 == b_0_state)))) begin
            b_0_state <= 2'd1;
        end else if ((((1'b1 == b_0_vld_in) & (2'd2 == b_0_state)) | ((1'b1 == b_0_ack_out) & (2'd1 == b_0_state)) | ((2'd3 == b_0_state) & ~((1'b1 == b_0_vld_in) & (1'b0 == b_0_ack_out)) & ~((1'b0 == b_0_vld_in) & (1'b1 == b_0_ack_out))))) begin
            b_0_state <= 2'd3;
        end else begin
            b_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_r_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == in_r_0_ack_out) & (1'b1 == in_r_0_vld_out))) begin
            in_r_0_sel_rd <= ~in_r_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_r_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == in_r_0_vld_in) & (1'b1 == in_r_0_ack_in))) begin
            in_r_0_sel_wr <= ~in_r_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        in_r_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == in_r_0_vld_in) & (1'b1 == in_r_0_ack_out) & (in_r_0_state == 2'd3)) | ((1'b0 == in_r_0_vld_in) & (in_r_0_state == 2'd2)))) begin
            in_r_0_state <= 2'd2;
        end else if ((((1'b1 == in_r_0_vld_in) & (1'b0 == in_r_0_ack_out) & (in_r_0_state == 2'd3)) | ((1'b0 == in_r_0_ack_out) & (in_r_0_state == 2'd1)))) begin
            in_r_0_state <= 2'd1;
        end else if ((((1'b1 == in_r_0_vld_in) & (in_r_0_state == 2'd2)) | ((1'b1 == in_r_0_ack_out) & (in_r_0_state == 2'd1)) | ((in_r_0_state == 2'd3) & ~((1'b1 == in_r_0_vld_in) & (1'b0 == in_r_0_ack_out)) & ~((1'b0 == in_r_0_vld_in) & (1'b1 == in_r_0_ack_out))))) begin
            in_r_0_state <= 2'd3;
        end else begin
            in_r_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        mean_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == mean_0_ack_out) & (1'b1 == mean_0_vld_out))) begin
            mean_0_sel_rd <= ~mean_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        mean_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == mean_0_vld_in) & (1'b1 == mean_0_ack_in))) begin
            mean_0_sel_wr <= ~mean_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        mean_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == mean_0_vld_in) & (1'b1 == mean_0_ack_out) & (2'd3 == mean_0_state)) | ((1'b0 == mean_0_vld_in) & (2'd2 == mean_0_state)))) begin
            mean_0_state <= 2'd2;
        end else if ((((1'b1 == mean_0_vld_in) & (1'b0 == mean_0_ack_out) & (2'd3 == mean_0_state)) | ((1'b0 == mean_0_ack_out) & (2'd1 == mean_0_state)))) begin
            mean_0_state <= 2'd1;
        end else if ((((1'b1 == mean_0_vld_in) & (2'd2 == mean_0_state)) | ((1'b1 == mean_0_ack_out) & (2'd1 == mean_0_state)) | ((2'd3 == mean_0_state) & ~((1'b1 == mean_0_vld_in) & (1'b0 == mean_0_ack_out)) & ~((1'b0 == mean_0_vld_in) & (1'b1 == mean_0_ack_out))))) begin
            mean_0_state <= 2'd3;
        end else begin
            mean_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_r_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == out_r_1_ack_out) & (1'b1 == out_r_1_vld_out))) begin
            out_r_1_sel_rd <= ~out_r_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_r_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == out_r_1_vld_in) & (1'b1 == out_r_1_ack_in))) begin
            out_r_1_sel_wr <= ~out_r_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        out_r_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == out_r_1_vld_in) & (1'b1 == out_r_1_ack_out) & (2'd3 == out_r_1_state)) | ((1'b0 == out_r_1_vld_in) & (2'd2 == out_r_1_state)))) begin
            out_r_1_state <= 2'd2;
        end else if ((((1'b1 == out_r_1_vld_in) & (1'b0 == out_r_1_ack_out) & (2'd3 == out_r_1_state)) | ((1'b0 == out_r_1_ack_out) & (2'd1 == out_r_1_state)))) begin
            out_r_1_state <= 2'd1;
        end else if ((((1'b1 == out_r_1_vld_in) & (2'd2 == out_r_1_state)) | ((1'b1 == out_r_1_ack_out) & (2'd1 == out_r_1_state)) | ((2'd3 == out_r_1_state) & ~((1'b1 == out_r_1_vld_in) & (1'b0 == out_r_1_ack_out)) & ~((1'b0 == out_r_1_vld_in) & (1'b1 == out_r_1_ack_out))))) begin
            out_r_1_state <= 2'd3;
        end else begin
            out_r_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        std_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == std_0_ack_out) & (1'b1 == std_0_vld_out))) begin
            std_0_sel_rd <= ~std_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        std_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == std_0_vld_in) & (1'b1 == std_0_ack_in))) begin
            std_0_sel_wr <= ~std_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        std_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == std_0_vld_in) & (1'b1 == std_0_ack_out) & (2'd3 == std_0_state)) | ((1'b0 == std_0_vld_in) & (2'd2 == std_0_state)))) begin
            std_0_state <= 2'd2;
        end else if ((((1'b1 == std_0_vld_in) & (1'b0 == std_0_ack_out) & (2'd3 == std_0_state)) | ((1'b0 == std_0_ack_out) & (2'd1 == std_0_state)))) begin
            std_0_state <= 2'd1;
        end else if ((((1'b1 == std_0_vld_in) & (2'd2 == std_0_state)) | ((1'b1 == std_0_ack_out) & (2'd1 == std_0_state)) | ((2'd3 == std_0_state) & ~((1'b1 == std_0_vld_in) & (1'b0 == std_0_ack_out)) & ~((1'b0 == std_0_vld_in) & (1'b1 == std_0_ack_out))))) begin
            std_0_state <= 2'd3;
        end else begin
            std_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        w_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == w_0_ack_out) & (1'b1 == w_0_vld_out))) begin
            w_0_sel_rd <= ~w_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        w_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == w_0_vld_in) & (1'b1 == w_0_ack_in))) begin
            w_0_sel_wr <= ~w_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        w_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == w_0_vld_in) & (1'b1 == w_0_ack_out) & (2'd3 == w_0_state)) | ((1'b0 == w_0_vld_in) & (2'd2 == w_0_state)))) begin
            w_0_state <= 2'd2;
        end else if ((((1'b1 == w_0_vld_in) & (1'b0 == w_0_ack_out) & (2'd3 == w_0_state)) | ((1'b0 == w_0_ack_out) & (2'd1 == w_0_state)))) begin
            w_0_state <= 2'd1;
        end else if ((((1'b1 == w_0_vld_in) & (2'd2 == w_0_state)) | ((1'b1 == w_0_ack_out) & (2'd1 == w_0_state)) | ((2'd3 == w_0_state) & ~((1'b1 == w_0_vld_in) & (1'b0 == w_0_ack_out)) & ~((1'b0 == w_0_vld_in) & (1'b1 == w_0_ack_out))))) begin
            w_0_state <= 2'd3;
        end else begin
            w_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (out_r_1_ack_in == 1'b1) & (1'd0 == exitcond1_fu_392_p2))) begin
        i_reg_247 <= 6'd0;
    end else if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == exitcond10_fu_440_p2))) begin
        i_reg_247 <= i_1_reg_924;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd1 == exitcond11_fu_403_p2))) begin
        ic_reg_269 <= 6'd0;
    end else if (((1'b1 == ap_CS_fsm_state7) & (1'd1 == exitcond8_fu_489_p2))) begin
        ic_reg_269 <= ic_1_reg_950;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd0 == exitcond9_fu_473_p2))) begin
        ih_reg_280 <= 6'd0;
    end else if (((1'b1 == ap_CS_fsm_state8) & (1'd1 == exitcond7_fu_505_p2))) begin
        ih_reg_280 <= ih_1_reg_963;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (1'd0 == exitcond8_fu_489_p2))) begin
        iw_reg_303 <= 6'd0;
    end else if (((1'b1 == ap_CS_fsm_state9) & (1'd1 == exitcond6_fu_516_p2))) begin
        iw_reg_303 <= iw_1_reg_976;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond11_fu_403_p2))) begin
        j_reg_258 <= 6'd0;
    end else if (((1'b1 == ap_CS_fsm_state5) & (b_0_vld_out == 1'b1))) begin
        j_reg_258 <= j_1_reg_937;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (1'd0 == exitcond7_fu_505_p2))) begin
        kh_reg_326 <= 6'd0;
    end else if (((1'b1 == ap_CS_fsm_state10) & (1'd1 == exitcond5_fu_564_p2))) begin
        kh_reg_326 <= kh_1_reg_984;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (1'd0 == exitcond6_fu_516_p2))) begin
        kw_reg_337 <= 6'd0;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        kw_reg_337 <= kw_1_reg_997;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) & (((1'd0 == x_norm_read_reg_857) & (1'd1 == exitcond2_fu_657_p2)) | ((1'd1 == x_norm_read_reg_857) & (1'd1 == exitcond4_fu_694_p2))))) begin
        oc_reg_236 <= oc_1_reg_916;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        oc_reg_236 <= 6'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == x_norm_read_reg_857) & (1'd1 == exitcond9_fu_473_p2))) begin
        oh1_reg_359 <= 6'd0;
    end else if (((1'b1 == ap_CS_fsm_state18) & (1'd1 == exitcond3_fu_765_p2))) begin
        oh1_reg_359 <= oh_reg_1036;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd0 == x_norm_read_reg_857) & (1'd1 == exitcond9_fu_473_p2))) begin
        oh3_reg_348 <= 6'd0;
    end else if (((1'b1 == ap_CS_fsm_state15) & (1'd1 == exitcond_fu_731_p2))) begin
        oh3_reg_348 <= oh_1_reg_1023;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) & (1'd1 == x_norm_read_reg_857) & (1'd0 == exitcond4_fu_694_p2))) begin
        ow2_reg_381 <= 6'd0;
    end else if (((1'b1 == ap_CS_fsm_state54) & (out_r_1_ack_in == 1'b1))) begin
        ow2_reg_381 <= ow_reg_1067;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) & (1'd0 == x_norm_read_reg_857) & (1'd0 == exitcond2_fu_657_p2))) begin
        ow4_reg_370 <= 6'd0;
    end else if (((1'b1 == ap_CS_fsm_state17) & (out_r_1_ack_in == 1'b1))) begin
        ow4_reg_370 <= ow_1_reg_1049;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (1'd0 == exitcond9_fu_473_p2))) begin
        phi_mul1_reg_291 <= 6'd0;
    end else if (((1'b1 == ap_CS_fsm_state8) & (1'd1 == exitcond7_fu_505_p2))) begin
        phi_mul1_reg_291 <= next_mul1_reg_955;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (1'd0 == exitcond8_fu_489_p2))) begin
        phi_mul_reg_314 <= 6'd0;
    end else if (((1'b1 == ap_CS_fsm_state9) & (1'd1 == exitcond6_fu_516_p2))) begin
        phi_mul_reg_314 <= next_mul_reg_968;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == b_0_load_A)) begin
        b_0_payload_A <= b_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == b_0_load_B)) begin
        b_0_payload_B <= b_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_1_reg_924 <= i_1_fu_408_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        ic_1_reg_950 <= ic_1_fu_478_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        icmp_reg_1012 <= icmp_fu_645_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        ih_1_reg_963 <= ih_1_fu_494_p2;
        next_mul1_reg_955 <= next_mul1_fu_484_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == in_r_0_load_A)) begin
        in_r_0_payload_A <= in_r_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == in_r_0_load_B)) begin
        in_r_0_payload_B <= in_r_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        iw_1_reg_976 <= iw_1_fu_510_p2;
        next_mul_reg_968 <= next_mul_fu_500_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        j_1_reg_937 <= j_1_fu_445_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        kh_1_reg_984 <= kh_1_fu_521_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        kw_1_reg_997 <= kw_1_fu_569_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == mean_0_load_A)) begin
        mean_0_payload_A <= mean_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == mean_0_load_B)) begin
        mean_0_payload_B <= mean_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (out_r_1_ack_in == 1'b1))) begin
        oc_1_reg_916 <= oc_1_fu_397_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) & (1'd0 == x_norm_read_reg_857))) begin
        oh_1_reg_1023 <= oh_1_fu_662_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) & (1'd1 == x_norm_read_reg_857))) begin
        oh_reg_1036 <= oh_fu_699_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == out_r_1_load_A)) begin
        out_r_1_payload_A <= out_r_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == out_r_1_load_B)) begin
        out_r_1_payload_B <= out_r_1_data_in;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        ow_1_reg_1049 <= ow_1_fu_736_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        ow_reg_1067 <= ow_fu_770_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == std_0_load_A)) begin
        std_0_payload_A <= std_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == std_0_load_B)) begin
        std_0_payload_B <= std_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & (1'd0 == exitcond5_fu_564_p2))) begin
        temp_addr_3_reg_1002 <= tmp_33_cast_fu_595_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) & (1'd0 == x_norm_read_reg_857) & (1'd0 == exitcond2_fu_657_p2))) begin
        tmp_10_reg_1028[10 : 2] <= tmp_10_fu_688_p2[10 : 2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state19)) begin
        tmp_15_reg_1077 <= tmp_15_fu_790_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) & (1'd0 == icmp_fu_645_p2))) begin
        tmp_21_reg_1016 <= tmp_21_fu_651_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & (1'd0 == exitcond6_fu_516_p2))) begin
        tmp_28_reg_989[10 : 2] <= tmp_28_fu_558_p2[10 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & ~((1'b0 == in_r_0_vld_out) | (1'b0 == w_0_vld_out)))) begin
        tmp_2_i_reg_1007 <= {{c_fu_850_p2[29:12]}};
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (1'd0 == exitcond11_fu_403_p2))) begin
        tmp_4_reg_929[10 : 2] <= tmp_4_fu_434_p2[10 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) & (1'd1 == x_norm_read_reg_857) & (1'd0 == exitcond4_fu_694_p2))) begin
        tmp_7_reg_1041[10 : 2] <= tmp_7_fu_725_p2[10 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (1'd0 == exitcond10_fu_440_p2))) begin
        tmp_s_reg_942 <= tmp_s_fu_455_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == w_0_load_A)) begin
        w_0_payload_A <= w_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == w_0_load_B)) begin
        w_0_payload_B <= w_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        x_I_c_read_reg_898 <= x_I_c;
        x_I_h_read_reg_908 <= x_I_h;
        x_I_w_read_reg_903 <= x_I_w;
        x_K_read_reg_873 <= x_K;
        x_O_c_read_reg_879 <= x_O_c;
        x_O_h_read_reg_891 <= x_O_h;
        x_O_w_read_reg_884 <= x_O_w;
        x_P_read_reg_861 <= x_P;
        x_S_read_reg_867 <= x_S;
        x_norm_read_reg_857 <= x_norm;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (out_r_1_ack_in == 1'b1) & (1'd1 == exitcond1_fu_392_p2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (out_r_1_ack_in == 1'b1) & (1'd1 == exitcond1_fu_392_p2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) & (b_0_vld_out == 1'b1))) begin
        b_0_ack_out = 1'b1;
    end else begin
        b_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == b_0_sel)) begin
        b_0_data_out = b_0_payload_B;
    end else begin
        b_0_data_out = b_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        b_TDATA_blk_n = b_0_state[1'd0];
    end else begin
        b_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) & ~((1'b0 == mean_0_vld_out) | (1'b0 == std_0_vld_out)))) begin
        grp_fu_819_ap_start = 1'b1;
    end else begin
        grp_fu_819_ap_start = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state13))) begin
        grp_fu_819_ce = 1'b0;
    end else begin
        grp_fu_819_ce = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) & ~((1'b0 == in_r_0_vld_out) | (1'b0 == w_0_vld_out)))) begin
        in_r_0_ack_out = 1'b1;
    end else begin
        in_r_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == in_r_0_sel)) begin
        in_r_0_data_out = in_r_0_payload_B;
    end else begin
        in_r_0_data_out = in_r_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        in_r_TDATA_blk_n = in_r_0_state[1'd0];
    end else begin
        in_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) & ~((1'b0 == mean_0_vld_out) | (1'b0 == std_0_vld_out)))) begin
        mean_0_ack_out = 1'b1;
    end else begin
        mean_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == mean_0_sel)) begin
        mean_0_data_out = mean_0_payload_B;
    end else begin
        mean_0_data_out = mean_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        mean_TDATA_blk_n = mean_0_state[1'd0];
    end else begin
        mean_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        out_r_1_data_in = tmp_11_fu_845_p1;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        out_r_1_data_in = tmp_13_fu_760_p1;
    end else begin
        out_r_1_data_in = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == out_r_1_sel)) begin
        out_r_1_data_out = out_r_1_payload_B;
    end else begin
        out_r_1_data_out = out_r_1_payload_A;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state16) & (out_r_1_ack_in == 1'b1)) | ((1'b1 == ap_CS_fsm_state53) & (out_r_1_ack_in == 1'b1)))) begin
        out_r_1_vld_in = 1'b1;
    end else begin
        out_r_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state17))) begin
        out_r_TDATA_blk_n = out_r_1_state[1'd1];
    end else begin
        out_r_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state20) & ~((1'b0 == mean_0_vld_out) | (1'b0 == std_0_vld_out)))) begin
        std_0_ack_out = 1'b1;
    end else begin
        std_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == std_0_sel)) begin
        std_0_data_out = std_0_payload_B;
    end else begin
        std_0_data_out = std_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        std_TDATA_blk_n = std_0_state[1'd0];
    end else begin
        std_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        temp_address0 = tmp_28_cast_fu_785_p1;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        temp_address0 = tmp_29_cast_fu_751_p1;
    end else if (((1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state12) | ((1'b1 == ap_CS_fsm_state13) & (1'd0 == icmp_reg_1012) & (1'd1 == tmp_21_reg_1016)) | ((1'b1 == ap_CS_fsm_state13) & (1'd1 == icmp_reg_1012)))) begin
        temp_address0 = temp_addr_3_reg_1002;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        temp_address0 = tmp_15_cast_fu_469_p1;
    end else begin
        temp_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state11) & ~((1'b0 == in_r_0_vld_out) | (1'b0 == w_0_vld_out))) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state18) | ((1'b1 == ap_CS_fsm_state5) & (b_0_vld_out == 1'b1)) | ((1'b1 == ap_CS_fsm_state13) & (1'd0 == icmp_reg_1012) & (1'd1 == tmp_21_reg_1016)) | ((1'b1 == ap_CS_fsm_state13) & (1'd1 == icmp_reg_1012)))) begin
        temp_ce0 = 1'b1;
    end else begin
        temp_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) & (1'd1 == icmp_reg_1012))) begin
        temp_d0 = 20'd131071;
    end else if (((1'b1 == ap_CS_fsm_state13) & (1'd0 == icmp_reg_1012) & (1'd1 == tmp_21_reg_1016))) begin
        temp_d0 = 20'd917504;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        temp_d0 = tmp_19_fu_628_p2;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        temp_d0 = tmp_3_fu_464_p1;
    end else begin
        temp_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) | ((1'b1 == ap_CS_fsm_state5) & (b_0_vld_out == 1'b1)) | ((1'b1 == ap_CS_fsm_state13) & (1'd0 == icmp_reg_1012) & (1'd1 == tmp_21_reg_1016)) | ((1'b1 == ap_CS_fsm_state13) & (1'd1 == icmp_reg_1012)))) begin
        temp_we0 = 1'b1;
    end else begin
        temp_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) & ~((1'b0 == in_r_0_vld_out) | (1'b0 == w_0_vld_out)))) begin
        w_0_ack_out = 1'b1;
    end else begin
        w_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == w_0_sel)) begin
        w_0_data_out = w_0_payload_B;
    end else begin
        w_0_data_out = w_0_payload_A;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        w_TDATA_blk_n = w_0_state[1'd0];
    end else begin
        w_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (out_r_1_ack_in == 1'b1) & (1'd1 == exitcond1_fu_392_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((1'b1 == ap_CS_fsm_state2) & (out_r_1_ack_in == 1'b1) & (1'd0 == exitcond1_fu_392_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (1'd1 == exitcond11_fu_403_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (1'd1 == exitcond10_fu_440_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (b_0_vld_out == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (1'd1 == exitcond9_fu_473_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (1'd1 == exitcond8_fu_489_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (1'd1 == exitcond7_fu_505_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (1'd1 == exitcond6_fu_516_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (1'd1 == exitcond5_fu_564_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == ap_CS_fsm_state11) & ~((1'b0 == in_r_0_vld_out) | (1'b0 == w_0_vld_out)))) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state14 : begin
            if (((1'b1 == ap_CS_fsm_state14) & (((1'd0 == x_norm_read_reg_857) & (1'd1 == exitcond2_fu_657_p2)) | ((1'd1 == x_norm_read_reg_857) & (1'd1 == exitcond4_fu_694_p2))))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else if (((1'b1 == ap_CS_fsm_state14) & (1'd1 == x_norm_read_reg_857) & (1'd0 == exitcond4_fu_694_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state15 : begin
            if (((1'b1 == ap_CS_fsm_state15) & (1'd1 == exitcond_fu_731_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state16 : begin
            if (((1'b1 == ap_CS_fsm_state16) & (out_r_1_ack_in == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            if (((1'b1 == ap_CS_fsm_state17) & (out_r_1_ack_in == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state18 : begin
            if (((1'b1 == ap_CS_fsm_state18) & (1'd1 == exitcond3_fu_765_p2))) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            if (((1'b1 == ap_CS_fsm_state20) & ~((1'b0 == mean_0_vld_out) | (1'b0 == std_0_vld_out)))) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state53;
        end
        ap_ST_fsm_state53 : begin
            if (((1'b1 == ap_CS_fsm_state53) & (out_r_1_ack_in == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state54;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state53;
            end
        end
        ap_ST_fsm_state54 : begin
            if (((1'b1 == ap_CS_fsm_state54) & (out_r_1_ack_in == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state54;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign a_assign_fu_798_p2 = (tmp_15_reg_1077 - tmp_18_fu_794_p1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state11 = ((1'b0 == in_r_0_vld_out) | (1'b0 == w_0_vld_out));
end

always @ (*) begin
    ap_block_state20 = ((1'b0 == mean_0_vld_out) | (1'b0 == std_0_vld_out));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign b_0_ack_in = b_0_state[1'd1];

assign b_0_load_A = (b_0_state_cmp_full & ~b_0_sel_wr);

assign b_0_load_B = (b_0_sel_wr & b_0_state_cmp_full);

assign b_0_sel = b_0_sel_rd;

assign b_0_state_cmp_full = ((b_0_state != 2'd1) ? 1'b1 : 1'b0);

assign b_0_vld_in = b_TVALID;

assign b_0_vld_out = b_0_state[1'd0];

assign b_TREADY = b_0_state[1'd1];

assign exitcond10_fu_440_p2 = ((j_reg_258 == x_O_w_read_reg_884) ? 1'b1 : 1'b0);

assign exitcond11_fu_403_p2 = ((i_reg_247 == x_O_h_read_reg_891) ? 1'b1 : 1'b0);

assign exitcond1_fu_392_p2 = ((oc_reg_236 == x_O_c_read_reg_879) ? 1'b1 : 1'b0);

assign exitcond2_fu_657_p2 = ((oh3_reg_348 == x_O_h_read_reg_891) ? 1'b1 : 1'b0);

assign exitcond3_fu_765_p2 = ((ow2_reg_381 == x_O_w_read_reg_884) ? 1'b1 : 1'b0);

assign exitcond4_fu_694_p2 = ((oh1_reg_359 == x_O_h_read_reg_891) ? 1'b1 : 1'b0);

assign exitcond5_fu_564_p2 = ((kw_reg_337 == x_K_read_reg_873) ? 1'b1 : 1'b0);

assign exitcond6_fu_516_p2 = ((kh_reg_326 == x_K_read_reg_873) ? 1'b1 : 1'b0);

assign exitcond7_fu_505_p2 = ((iw_reg_303 == x_I_w_read_reg_903) ? 1'b1 : 1'b0);

assign exitcond8_fu_489_p2 = ((ih_reg_280 == x_I_h_read_reg_908) ? 1'b1 : 1'b0);

assign exitcond9_fu_473_p2 = ((ic_reg_269 == x_I_c_read_reg_898) ? 1'b1 : 1'b0);

assign exitcond_fu_731_p2 = ((ow4_reg_370 == x_O_w_read_reg_884) ? 1'b1 : 1'b0);

assign grp_fu_819_p0 = {{a_assign_fu_798_p2}, {12'd0}};

assign i_1_fu_408_p2 = (i_reg_247 + 6'd1);

assign ic_1_fu_478_p2 = (ic_reg_269 + 6'd1);

assign icmp_fu_645_p2 = (($signed(tmp_32_fu_635_p4) > $signed(3'd0)) ? 1'b1 : 1'b0);

assign ih_1_fu_494_p2 = (ih_reg_280 + 6'd1);

assign in_r_0_ack_in = in_r_0_state[1'd1];

assign in_r_0_load_A = (in_r_0_state_cmp_full & ~in_r_0_sel_wr);

assign in_r_0_load_B = (in_r_0_sel_wr & in_r_0_state_cmp_full);

assign in_r_0_sel = in_r_0_sel_rd;

assign in_r_0_state_cmp_full = ((in_r_0_state != 2'd1) ? 1'b1 : 1'b0);

assign in_r_0_vld_in = in_r_TVALID;

assign in_r_0_vld_out = in_r_0_state[1'd0];

assign in_r_TREADY = in_r_0_state[1'd1];

assign iw_1_fu_510_p2 = (iw_reg_303 + 6'd1);

assign j_1_fu_445_p2 = (j_reg_258 + 6'd1);

assign kh_1_fu_521_p2 = (kh_reg_326 + 6'd1);

assign kw_1_fu_569_p2 = (kw_reg_337 + 6'd1);

assign mean_0_ack_in = mean_0_state[1'd1];

assign mean_0_load_A = (mean_0_state_cmp_full & ~mean_0_sel_wr);

assign mean_0_load_B = (mean_0_sel_wr & mean_0_state_cmp_full);

assign mean_0_sel = mean_0_sel_rd;

assign mean_0_state_cmp_full = ((mean_0_state != 2'd1) ? 1'b1 : 1'b0);

assign mean_0_vld_in = mean_TVALID;

assign mean_0_vld_out = mean_0_state[1'd0];

assign mean_TREADY = mean_0_state[1'd1];

assign next_mul1_fu_484_p2 = (phi_mul1_reg_291 + x_S_read_reg_867);

assign next_mul_fu_500_p2 = (phi_mul_reg_314 + x_S_read_reg_867);

assign oc_1_fu_397_p2 = (oc_reg_236 + 6'd1);

assign oh_1_fu_662_p2 = (oh3_reg_348 + 6'd1);

assign oh_2_fu_533_p2 = (tmp_14_fu_527_p2 - x_P_read_reg_861);

assign oh_fu_699_p2 = (oh1_reg_359 + 6'd1);

assign out_r_1_ack_in = out_r_1_state[1'd1];

assign out_r_1_ack_out = out_r_TREADY;

assign out_r_1_load_A = (out_r_1_state_cmp_full & ~out_r_1_sel_wr);

assign out_r_1_load_B = (out_r_1_sel_wr & out_r_1_state_cmp_full);

assign out_r_1_sel = out_r_1_sel_rd;

assign out_r_1_state_cmp_full = ((out_r_1_state != 2'd1) ? 1'b1 : 1'b0);

assign out_r_1_vld_out = out_r_1_state[1'd0];

assign out_r_TDATA = out_r_1_data_out;

assign out_r_TVALID = out_r_1_state[1'd0];

assign ow_1_fu_736_p2 = (ow4_reg_370 + 6'd1);

assign ow_2_fu_581_p2 = (tmp_16_fu_575_p2 - x_P_read_reg_861);

assign ow_fu_770_p2 = (ow2_reg_381 + 6'd1);

assign p_shl2_cast_fu_430_p1 = tmp_2_fu_422_p3;

assign p_shl4_cast_fu_554_p1 = tmp_27_fu_546_p3;

assign p_shl6_cast_fu_721_p1 = tmp_6_fu_713_p3;

assign p_shl8_cast_fu_684_p1 = tmp_9_fu_676_p3;

assign std_0_ack_in = std_0_state[1'd1];

assign std_0_load_A = (std_0_state_cmp_full & ~std_0_sel_wr);

assign std_0_load_B = (std_0_sel_wr & std_0_state_cmp_full);

assign std_0_sel = std_0_sel_rd;

assign std_0_state_cmp_full = ((std_0_state != 2'd1) ? 1'b1 : 1'b0);

assign std_0_vld_in = std_TVALID;

assign std_0_vld_out = std_0_state[1'd0];

assign std_TREADY = std_0_state[1'd1];

assign tmp_10_cast_fu_742_p1 = ow4_reg_370;

assign tmp_10_fu_688_p2 = (tmp_8_fu_668_p3 - p_shl8_cast_fu_684_p1);

assign tmp_11_fu_845_p1 = y_assign_1_fu_837_p3;

assign tmp_12_fu_780_p2 = (tmp_7_reg_1041 + tmp_7_cast_fu_776_p1);

assign tmp_13_fu_760_p1 = $signed(tmp_25_fu_756_p1);

assign tmp_14_fu_527_p2 = (kh_reg_326 + phi_mul1_reg_291);

assign tmp_15_cast_fu_469_p1 = $signed(tmp_s_reg_942);

assign tmp_15_fu_790_p1 = temp_q0[17:0];

assign tmp_16_fu_575_p2 = (phi_mul_reg_314 + kw_reg_337);

assign tmp_17_fu_625_p1 = $signed(tmp_2_i_reg_1007);

assign tmp_18_cast_fu_586_p1 = ow_2_fu_581_p2;

assign tmp_18_fu_794_p1 = mean_0_data_out[17:0];

assign tmp_19_fu_628_p2 = ($signed(temp_q0) + $signed(tmp_17_fu_625_p1));

assign tmp_1_fu_414_p3 = {{i_reg_247}, {5'd0}};

assign tmp_20_fu_803_p1 = std_0_data_out[17:0];

assign tmp_21_fu_651_p2 = (($signed(tmp_19_fu_628_p2) < $signed(20'd917504)) ? 1'b1 : 1'b0);

assign tmp_22_fu_825_p1 = grp_fu_819_p2[16:0];

assign tmp_23_fu_829_p3 = grp_fu_819_p2[32'd17];

assign tmp_24_fu_746_p2 = (tmp_10_reg_1028 + tmp_10_cast_fu_742_p1);

assign tmp_25_fu_756_p1 = temp_q0[17:0];

assign tmp_26_fu_538_p3 = {{oh_2_fu_533_p2}, {5'd0}};

assign tmp_27_fu_546_p3 = {{oh_2_fu_533_p2}, {2'd0}};

assign tmp_28_cast_fu_785_p1 = $signed(tmp_12_fu_780_p2);

assign tmp_28_fu_558_p2 = (tmp_26_fu_538_p3 - p_shl4_cast_fu_554_p1);

assign tmp_29_cast_fu_751_p1 = $signed(tmp_24_fu_746_p2);

assign tmp_29_fu_600_p1 = in_r_0_data_out[17:0];

assign tmp_2_fu_422_p3 = {{i_reg_247}, {2'd0}};

assign tmp_30_fu_604_p1 = w_0_data_out[17:0];

assign tmp_31_fu_590_p2 = (tmp_18_cast_fu_586_p1 + tmp_28_reg_989);

assign tmp_32_fu_635_p4 = {{tmp_19_fu_628_p2[19:17]}};

assign tmp_33_cast_fu_595_p1 = $signed(tmp_31_fu_590_p2);

assign tmp_3_fu_464_p1 = $signed(tmp_fu_460_p1);

assign tmp_4_fu_434_p2 = (tmp_1_fu_414_p3 - p_shl2_cast_fu_430_p1);

assign tmp_5_cast_fu_451_p1 = j_reg_258;

assign tmp_5_fu_705_p3 = {{oh1_reg_359}, {5'd0}};

assign tmp_6_fu_713_p3 = {{oh1_reg_359}, {2'd0}};

assign tmp_7_cast_fu_776_p1 = ow2_reg_381;

assign tmp_7_fu_725_p2 = (tmp_5_fu_705_p3 - p_shl6_cast_fu_721_p1);

assign tmp_8_fu_668_p3 = {{oh3_reg_348}, {5'd0}};

assign tmp_9_fu_676_p3 = {{oh3_reg_348}, {2'd0}};

assign tmp_fu_460_p1 = b_0_data_out[17:0];

assign tmp_s_fu_455_p2 = (tmp_4_reg_929 + tmp_5_cast_fu_451_p1);

assign w_0_ack_in = w_0_state[1'd1];

assign w_0_load_A = (w_0_state_cmp_full & ~w_0_sel_wr);

assign w_0_load_B = (w_0_sel_wr & w_0_state_cmp_full);

assign w_0_sel = w_0_sel_rd;

assign w_0_state_cmp_full = ((w_0_state != 2'd1) ? 1'b1 : 1'b0);

assign w_0_vld_in = w_TVALID;

assign w_0_vld_out = w_0_state[1'd0];

assign w_TREADY = w_0_state[1'd1];

assign y_assign_1_fu_837_p3 = ((tmp_23_fu_829_p3[0:0] === 1'b1) ? 17'd0 : tmp_22_fu_825_p1);

always @ (posedge ap_clk) begin
    tmp_4_reg_929[1:0] <= 2'b00;
    tmp_28_reg_989[1:0] <= 2'b00;
    tmp_10_reg_1028[1:0] <= 2'b00;
    tmp_7_reg_1041[1:0] <= 2'b00;
end

endmodule //deconv
