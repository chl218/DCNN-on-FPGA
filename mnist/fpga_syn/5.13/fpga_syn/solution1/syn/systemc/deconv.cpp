// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "deconv.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic deconv::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic deconv::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<54> deconv::ap_ST_fsm_state1 = "1";
const sc_lv<54> deconv::ap_ST_fsm_state2 = "10";
const sc_lv<54> deconv::ap_ST_fsm_state3 = "100";
const sc_lv<54> deconv::ap_ST_fsm_state4 = "1000";
const sc_lv<54> deconv::ap_ST_fsm_state5 = "10000";
const sc_lv<54> deconv::ap_ST_fsm_state6 = "100000";
const sc_lv<54> deconv::ap_ST_fsm_state7 = "1000000";
const sc_lv<54> deconv::ap_ST_fsm_state8 = "10000000";
const sc_lv<54> deconv::ap_ST_fsm_state9 = "100000000";
const sc_lv<54> deconv::ap_ST_fsm_state10 = "1000000000";
const sc_lv<54> deconv::ap_ST_fsm_state11 = "10000000000";
const sc_lv<54> deconv::ap_ST_fsm_state12 = "100000000000";
const sc_lv<54> deconv::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<54> deconv::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<54> deconv::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<54> deconv::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<54> deconv::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<54> deconv::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<54> deconv::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<54> deconv::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<54> deconv::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<54> deconv::ap_ST_fsm_state22 = "1000000000000000000000";
const sc_lv<54> deconv::ap_ST_fsm_state23 = "10000000000000000000000";
const sc_lv<54> deconv::ap_ST_fsm_state24 = "100000000000000000000000";
const sc_lv<54> deconv::ap_ST_fsm_state25 = "1000000000000000000000000";
const sc_lv<54> deconv::ap_ST_fsm_state26 = "10000000000000000000000000";
const sc_lv<54> deconv::ap_ST_fsm_state27 = "100000000000000000000000000";
const sc_lv<54> deconv::ap_ST_fsm_state28 = "1000000000000000000000000000";
const sc_lv<54> deconv::ap_ST_fsm_state29 = "10000000000000000000000000000";
const sc_lv<54> deconv::ap_ST_fsm_state30 = "100000000000000000000000000000";
const sc_lv<54> deconv::ap_ST_fsm_state31 = "1000000000000000000000000000000";
const sc_lv<54> deconv::ap_ST_fsm_state32 = "10000000000000000000000000000000";
const sc_lv<54> deconv::ap_ST_fsm_state33 = "100000000000000000000000000000000";
const sc_lv<54> deconv::ap_ST_fsm_state34 = "1000000000000000000000000000000000";
const sc_lv<54> deconv::ap_ST_fsm_state35 = "10000000000000000000000000000000000";
const sc_lv<54> deconv::ap_ST_fsm_state36 = "100000000000000000000000000000000000";
const sc_lv<54> deconv::ap_ST_fsm_state37 = "1000000000000000000000000000000000000";
const sc_lv<54> deconv::ap_ST_fsm_state38 = "10000000000000000000000000000000000000";
const sc_lv<54> deconv::ap_ST_fsm_state39 = "100000000000000000000000000000000000000";
const sc_lv<54> deconv::ap_ST_fsm_state40 = "1000000000000000000000000000000000000000";
const sc_lv<54> deconv::ap_ST_fsm_state41 = "10000000000000000000000000000000000000000";
const sc_lv<54> deconv::ap_ST_fsm_state42 = "100000000000000000000000000000000000000000";
const sc_lv<54> deconv::ap_ST_fsm_state43 = "1000000000000000000000000000000000000000000";
const sc_lv<54> deconv::ap_ST_fsm_state44 = "10000000000000000000000000000000000000000000";
const sc_lv<54> deconv::ap_ST_fsm_state45 = "100000000000000000000000000000000000000000000";
const sc_lv<54> deconv::ap_ST_fsm_state46 = "1000000000000000000000000000000000000000000000";
const sc_lv<54> deconv::ap_ST_fsm_state47 = "10000000000000000000000000000000000000000000000";
const sc_lv<54> deconv::ap_ST_fsm_state48 = "100000000000000000000000000000000000000000000000";
const sc_lv<54> deconv::ap_ST_fsm_state49 = "1000000000000000000000000000000000000000000000000";
const sc_lv<54> deconv::ap_ST_fsm_state50 = "10000000000000000000000000000000000000000000000000";
const sc_lv<54> deconv::ap_ST_fsm_state51 = "100000000000000000000000000000000000000000000000000";
const sc_lv<54> deconv::ap_ST_fsm_state52 = "1000000000000000000000000000000000000000000000000000";
const sc_lv<54> deconv::ap_ST_fsm_state53 = "10000000000000000000000000000000000000000000000000000";
const sc_lv<54> deconv::ap_ST_fsm_state54 = "100000000000000000000000000000000000000000000000000000";
const sc_lv<32> deconv::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> deconv::ap_const_lv1_0 = "0";
const sc_lv<1> deconv::ap_const_lv1_1 = "1";
const sc_lv<2> deconv::ap_const_lv2_0 = "00";
const sc_lv<2> deconv::ap_const_lv2_2 = "10";
const sc_lv<2> deconv::ap_const_lv2_3 = "11";
const sc_lv<2> deconv::ap_const_lv2_1 = "1";
const sc_lv<32> deconv::ap_const_lv32_A = "1010";
const sc_lv<32> deconv::ap_const_lv32_34 = "110100";
const sc_lv<32> deconv::ap_const_lv32_35 = "110101";
const sc_lv<32> deconv::ap_const_lv32_F = "1111";
const sc_lv<32> deconv::ap_const_lv32_10 = "10000";
const sc_lv<32> deconv::ap_const_lv32_4 = "100";
const sc_lv<32> deconv::ap_const_lv32_13 = "10011";
const int deconv::C_S_AXI_DATA_WIDTH = "100000";
const sc_lv<32> deconv::ap_const_lv32_1 = "1";
const sc_lv<32> deconv::ap_const_lv32_2 = "10";
const sc_lv<32> deconv::ap_const_lv32_3 = "11";
const sc_lv<32> deconv::ap_const_lv32_5 = "101";
const sc_lv<32> deconv::ap_const_lv32_6 = "110";
const sc_lv<32> deconv::ap_const_lv32_7 = "111";
const sc_lv<32> deconv::ap_const_lv32_8 = "1000";
const sc_lv<32> deconv::ap_const_lv32_9 = "1001";
const sc_lv<32> deconv::ap_const_lv32_B = "1011";
const sc_lv<32> deconv::ap_const_lv32_D = "1101";
const sc_lv<32> deconv::ap_const_lv32_E = "1110";
const sc_lv<32> deconv::ap_const_lv32_11 = "10001";
const sc_lv<32> deconv::ap_const_lv32_12 = "10010";
const sc_lv<6> deconv::ap_const_lv6_0 = "000000";
const sc_lv<32> deconv::ap_const_lv32_C = "1100";
const sc_lv<20> deconv::ap_const_lv20_E0000 = "11100000000000000000";
const sc_lv<20> deconv::ap_const_lv20_1FFFF = "11111111111111111";
const sc_lv<6> deconv::ap_const_lv6_1 = "1";
const sc_lv<5> deconv::ap_const_lv5_0 = "00000";
const sc_lv<32> deconv::ap_const_lv32_1D = "11101";
const sc_lv<3> deconv::ap_const_lv3_0 = "000";
const sc_lv<12> deconv::ap_const_lv12_0 = "000000000000";
const sc_lv<17> deconv::ap_const_lv17_0 = "00000000000000000";
const bool deconv::ap_const_boolean_1 = true;

deconv::deconv(sc_module_name name) : sc_module(name), mVcdFile(0) {
    temp_U = new deconv_temp("temp_U");
    temp_U->clk(ap_clk);
    temp_U->reset(ap_rst_n_inv);
    temp_U->address0(temp_address0);
    temp_U->ce0(temp_ce0);
    temp_U->we0(temp_we0);
    temp_U->d0(temp_d0);
    temp_U->q0(temp_q0);
    deconv_CTRL_BUS_s_axi_U = new deconv_CTRL_BUS_s_axi<C_S_AXI_CTRL_BUS_ADDR_WIDTH,C_S_AXI_CTRL_BUS_DATA_WIDTH>("deconv_CTRL_BUS_s_axi_U");
    deconv_CTRL_BUS_s_axi_U->AWVALID(s_axi_CTRL_BUS_AWVALID);
    deconv_CTRL_BUS_s_axi_U->AWREADY(s_axi_CTRL_BUS_AWREADY);
    deconv_CTRL_BUS_s_axi_U->AWADDR(s_axi_CTRL_BUS_AWADDR);
    deconv_CTRL_BUS_s_axi_U->WVALID(s_axi_CTRL_BUS_WVALID);
    deconv_CTRL_BUS_s_axi_U->WREADY(s_axi_CTRL_BUS_WREADY);
    deconv_CTRL_BUS_s_axi_U->WDATA(s_axi_CTRL_BUS_WDATA);
    deconv_CTRL_BUS_s_axi_U->WSTRB(s_axi_CTRL_BUS_WSTRB);
    deconv_CTRL_BUS_s_axi_U->ARVALID(s_axi_CTRL_BUS_ARVALID);
    deconv_CTRL_BUS_s_axi_U->ARREADY(s_axi_CTRL_BUS_ARREADY);
    deconv_CTRL_BUS_s_axi_U->ARADDR(s_axi_CTRL_BUS_ARADDR);
    deconv_CTRL_BUS_s_axi_U->RVALID(s_axi_CTRL_BUS_RVALID);
    deconv_CTRL_BUS_s_axi_U->RREADY(s_axi_CTRL_BUS_RREADY);
    deconv_CTRL_BUS_s_axi_U->RDATA(s_axi_CTRL_BUS_RDATA);
    deconv_CTRL_BUS_s_axi_U->RRESP(s_axi_CTRL_BUS_RRESP);
    deconv_CTRL_BUS_s_axi_U->BVALID(s_axi_CTRL_BUS_BVALID);
    deconv_CTRL_BUS_s_axi_U->BREADY(s_axi_CTRL_BUS_BREADY);
    deconv_CTRL_BUS_s_axi_U->BRESP(s_axi_CTRL_BUS_BRESP);
    deconv_CTRL_BUS_s_axi_U->ACLK(ap_clk);
    deconv_CTRL_BUS_s_axi_U->ARESET(ap_rst_n_inv);
    deconv_CTRL_BUS_s_axi_U->ACLK_EN(ap_var_for_const0);
    deconv_CTRL_BUS_s_axi_U->ap_start(ap_start);
    deconv_CTRL_BUS_s_axi_U->interrupt(interrupt);
    deconv_CTRL_BUS_s_axi_U->ap_ready(ap_ready);
    deconv_CTRL_BUS_s_axi_U->ap_done(ap_done);
    deconv_CTRL_BUS_s_axi_U->ap_idle(ap_idle);
    deconv_CTRL_BUS_s_axi_U->x_I_h(x_I_h);
    deconv_CTRL_BUS_s_axi_U->x_I_w(x_I_w);
    deconv_CTRL_BUS_s_axi_U->x_I_c(x_I_c);
    deconv_CTRL_BUS_s_axi_U->x_O_h(x_O_h);
    deconv_CTRL_BUS_s_axi_U->x_O_w(x_O_w);
    deconv_CTRL_BUS_s_axi_U->x_O_c(x_O_c);
    deconv_CTRL_BUS_s_axi_U->x_K(x_K);
    deconv_CTRL_BUS_s_axi_U->x_S(x_S);
    deconv_CTRL_BUS_s_axi_U->x_P(x_P);
    deconv_CTRL_BUS_s_axi_U->x_norm(x_norm);
    deconv_sdiv_30ns_bkb_U0 = new deconv_sdiv_30ns_bkb<1,34,30,18,30>("deconv_sdiv_30ns_bkb_U0");
    deconv_sdiv_30ns_bkb_U0->clk(ap_clk);
    deconv_sdiv_30ns_bkb_U0->reset(ap_rst_n_inv);
    deconv_sdiv_30ns_bkb_U0->start(grp_fu_819_ap_start);
    deconv_sdiv_30ns_bkb_U0->done(grp_fu_819_ap_done);
    deconv_sdiv_30ns_bkb_U0->din0(grp_fu_819_p0);
    deconv_sdiv_30ns_bkb_U0->din1(tmp_20_fu_803_p1);
    deconv_sdiv_30ns_bkb_U0->ce(grp_fu_819_ce);
    deconv_sdiv_30ns_bkb_U0->dout(grp_fu_819_p2);
    deconv_mul_mul_18cud_U1 = new deconv_mul_mul_18cud<1,1,18,18,30>("deconv_mul_mul_18cud_U1");
    deconv_mul_mul_18cud_U1->din0(tmp_30_fu_604_p1);
    deconv_mul_mul_18cud_U1->din1(tmp_29_fu_600_p1);
    deconv_mul_mul_18cud_U1->dout(c_fu_850_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_a_assign_fu_798_p2);
    sensitive << ( tmp_15_reg_1077 );
    sensitive << ( tmp_18_fu_794_p1 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state15);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state16);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state17);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state18);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state19);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state20);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state53);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state54);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state11);
    sensitive << ( in_r_0_vld_out );
    sensitive << ( w_0_vld_out );

    SC_METHOD(thread_ap_block_state20);
    sensitive << ( mean_0_vld_out );
    sensitive << ( std_0_vld_out );

    SC_METHOD(thread_ap_done);
    sensitive << ( out_r_1_ack_in );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond1_fu_392_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( out_r_1_ack_in );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( exitcond1_fu_392_p2 );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_b_0_ack_in);
    sensitive << ( b_0_state );

    SC_METHOD(thread_b_0_ack_out);
    sensitive << ( b_0_vld_out );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_b_0_data_out);
    sensitive << ( b_0_payload_A );
    sensitive << ( b_0_payload_B );
    sensitive << ( b_0_sel );

    SC_METHOD(thread_b_0_load_A);
    sensitive << ( b_0_sel_wr );
    sensitive << ( b_0_state_cmp_full );

    SC_METHOD(thread_b_0_load_B);
    sensitive << ( b_0_sel_wr );
    sensitive << ( b_0_state_cmp_full );

    SC_METHOD(thread_b_0_sel);
    sensitive << ( b_0_sel_rd );

    SC_METHOD(thread_b_0_state_cmp_full);
    sensitive << ( b_0_state );

    SC_METHOD(thread_b_0_vld_in);
    sensitive << ( b_TVALID );

    SC_METHOD(thread_b_0_vld_out);
    sensitive << ( b_0_state );

    SC_METHOD(thread_b_TDATA_blk_n);
    sensitive << ( b_0_state );
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_b_TREADY);
    sensitive << ( b_0_state );

    SC_METHOD(thread_exitcond10_fu_440_p2);
    sensitive << ( x_O_w_read_reg_884 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( j_reg_258 );

    SC_METHOD(thread_exitcond11_fu_403_p2);
    sensitive << ( x_O_h_read_reg_891 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( i_reg_247 );

    SC_METHOD(thread_exitcond1_fu_392_p2);
    sensitive << ( out_r_1_ack_in );
    sensitive << ( x_O_c_read_reg_879 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( oc_reg_236 );

    SC_METHOD(thread_exitcond2_fu_657_p2);
    sensitive << ( x_norm_read_reg_857 );
    sensitive << ( x_O_h_read_reg_891 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( oh3_reg_348 );

    SC_METHOD(thread_exitcond3_fu_765_p2);
    sensitive << ( x_O_w_read_reg_884 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ow2_reg_381 );

    SC_METHOD(thread_exitcond4_fu_694_p2);
    sensitive << ( x_norm_read_reg_857 );
    sensitive << ( x_O_h_read_reg_891 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( oh1_reg_359 );

    SC_METHOD(thread_exitcond5_fu_564_p2);
    sensitive << ( x_K_read_reg_873 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( kw_reg_337 );

    SC_METHOD(thread_exitcond6_fu_516_p2);
    sensitive << ( x_K_read_reg_873 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( kh_reg_326 );

    SC_METHOD(thread_exitcond7_fu_505_p2);
    sensitive << ( x_I_w_read_reg_903 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( iw_reg_303 );

    SC_METHOD(thread_exitcond8_fu_489_p2);
    sensitive << ( x_I_h_read_reg_908 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ih_reg_280 );

    SC_METHOD(thread_exitcond9_fu_473_p2);
    sensitive << ( x_I_c_read_reg_898 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ic_reg_269 );

    SC_METHOD(thread_exitcond_fu_731_p2);
    sensitive << ( x_O_w_read_reg_884 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ow4_reg_370 );

    SC_METHOD(thread_grp_fu_819_ap_start);
    sensitive << ( mean_0_vld_out );
    sensitive << ( std_0_vld_out );
    sensitive << ( ap_CS_fsm_state20 );

    SC_METHOD(thread_grp_fu_819_ce);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state54 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state19 );
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_grp_fu_819_p0);
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( a_assign_fu_798_p2 );

    SC_METHOD(thread_i_1_fu_408_p2);
    sensitive << ( i_reg_247 );

    SC_METHOD(thread_ic_1_fu_478_p2);
    sensitive << ( ic_reg_269 );

    SC_METHOD(thread_icmp_fu_645_p2);
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( tmp_32_fu_635_p4 );

    SC_METHOD(thread_ih_1_fu_494_p2);
    sensitive << ( ih_reg_280 );

    SC_METHOD(thread_in_r_0_ack_in);
    sensitive << ( in_r_0_state );

    SC_METHOD(thread_in_r_0_ack_out);
    sensitive << ( in_r_0_vld_out );
    sensitive << ( w_0_vld_out );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_in_r_0_data_out);
    sensitive << ( in_r_0_payload_A );
    sensitive << ( in_r_0_payload_B );
    sensitive << ( in_r_0_sel );

    SC_METHOD(thread_in_r_0_load_A);
    sensitive << ( in_r_0_sel_wr );
    sensitive << ( in_r_0_state_cmp_full );

    SC_METHOD(thread_in_r_0_load_B);
    sensitive << ( in_r_0_sel_wr );
    sensitive << ( in_r_0_state_cmp_full );

    SC_METHOD(thread_in_r_0_sel);
    sensitive << ( in_r_0_sel_rd );

    SC_METHOD(thread_in_r_0_state_cmp_full);
    sensitive << ( in_r_0_state );

    SC_METHOD(thread_in_r_0_vld_in);
    sensitive << ( in_r_TVALID );

    SC_METHOD(thread_in_r_0_vld_out);
    sensitive << ( in_r_0_state );

    SC_METHOD(thread_in_r_TDATA_blk_n);
    sensitive << ( in_r_0_state );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_in_r_TREADY);
    sensitive << ( in_r_0_state );

    SC_METHOD(thread_iw_1_fu_510_p2);
    sensitive << ( iw_reg_303 );

    SC_METHOD(thread_j_1_fu_445_p2);
    sensitive << ( j_reg_258 );

    SC_METHOD(thread_kh_1_fu_521_p2);
    sensitive << ( kh_reg_326 );

    SC_METHOD(thread_kw_1_fu_569_p2);
    sensitive << ( kw_reg_337 );

    SC_METHOD(thread_mean_0_ack_in);
    sensitive << ( mean_0_state );

    SC_METHOD(thread_mean_0_ack_out);
    sensitive << ( mean_0_vld_out );
    sensitive << ( std_0_vld_out );
    sensitive << ( ap_CS_fsm_state20 );

    SC_METHOD(thread_mean_0_data_out);
    sensitive << ( mean_0_payload_A );
    sensitive << ( mean_0_payload_B );
    sensitive << ( mean_0_sel );

    SC_METHOD(thread_mean_0_load_A);
    sensitive << ( mean_0_sel_wr );
    sensitive << ( mean_0_state_cmp_full );

    SC_METHOD(thread_mean_0_load_B);
    sensitive << ( mean_0_sel_wr );
    sensitive << ( mean_0_state_cmp_full );

    SC_METHOD(thread_mean_0_sel);
    sensitive << ( mean_0_sel_rd );

    SC_METHOD(thread_mean_0_state_cmp_full);
    sensitive << ( mean_0_state );

    SC_METHOD(thread_mean_0_vld_in);
    sensitive << ( mean_TVALID );

    SC_METHOD(thread_mean_0_vld_out);
    sensitive << ( mean_0_state );

    SC_METHOD(thread_mean_TDATA_blk_n);
    sensitive << ( mean_0_state );
    sensitive << ( ap_CS_fsm_state20 );

    SC_METHOD(thread_mean_TREADY);
    sensitive << ( mean_0_state );

    SC_METHOD(thread_next_mul1_fu_484_p2);
    sensitive << ( x_S_read_reg_867 );
    sensitive << ( phi_mul1_reg_291 );

    SC_METHOD(thread_next_mul_fu_500_p2);
    sensitive << ( x_S_read_reg_867 );
    sensitive << ( phi_mul_reg_314 );

    SC_METHOD(thread_oc_1_fu_397_p2);
    sensitive << ( oc_reg_236 );

    SC_METHOD(thread_oh_1_fu_662_p2);
    sensitive << ( oh3_reg_348 );

    SC_METHOD(thread_oh_2_fu_533_p2);
    sensitive << ( x_P_read_reg_861 );
    sensitive << ( tmp_14_fu_527_p2 );

    SC_METHOD(thread_oh_fu_699_p2);
    sensitive << ( oh1_reg_359 );

    SC_METHOD(thread_out_r_1_ack_in);
    sensitive << ( out_r_1_state );

    SC_METHOD(thread_out_r_1_ack_out);
    sensitive << ( out_r_TREADY );

    SC_METHOD(thread_out_r_1_data_in);
    sensitive << ( ap_CS_fsm_state53 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( tmp_13_fu_760_p1 );
    sensitive << ( tmp_11_fu_845_p1 );

    SC_METHOD(thread_out_r_1_data_out);
    sensitive << ( out_r_1_payload_A );
    sensitive << ( out_r_1_payload_B );
    sensitive << ( out_r_1_sel );

    SC_METHOD(thread_out_r_1_load_A);
    sensitive << ( out_r_1_sel_wr );
    sensitive << ( out_r_1_state_cmp_full );

    SC_METHOD(thread_out_r_1_load_B);
    sensitive << ( out_r_1_sel_wr );
    sensitive << ( out_r_1_state_cmp_full );

    SC_METHOD(thread_out_r_1_sel);
    sensitive << ( out_r_1_sel_rd );

    SC_METHOD(thread_out_r_1_state_cmp_full);
    sensitive << ( out_r_1_state );

    SC_METHOD(thread_out_r_1_vld_in);
    sensitive << ( out_r_1_ack_in );
    sensitive << ( ap_CS_fsm_state53 );
    sensitive << ( ap_CS_fsm_state16 );

    SC_METHOD(thread_out_r_1_vld_out);
    sensitive << ( out_r_1_state );

    SC_METHOD(thread_out_r_TDATA);
    sensitive << ( out_r_1_data_out );

    SC_METHOD(thread_out_r_TDATA_blk_n);
    sensitive << ( out_r_1_state );
    sensitive << ( ap_CS_fsm_state53 );
    sensitive << ( ap_CS_fsm_state54 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state17 );

    SC_METHOD(thread_out_r_TVALID);
    sensitive << ( out_r_1_state );

    SC_METHOD(thread_ow_1_fu_736_p2);
    sensitive << ( ow4_reg_370 );

    SC_METHOD(thread_ow_2_fu_581_p2);
    sensitive << ( x_P_read_reg_861 );
    sensitive << ( tmp_16_fu_575_p2 );

    SC_METHOD(thread_ow_fu_770_p2);
    sensitive << ( ow2_reg_381 );

    SC_METHOD(thread_p_shl2_cast_fu_430_p1);
    sensitive << ( tmp_2_fu_422_p3 );

    SC_METHOD(thread_p_shl4_cast_fu_554_p1);
    sensitive << ( tmp_27_fu_546_p3 );

    SC_METHOD(thread_p_shl6_cast_fu_721_p1);
    sensitive << ( tmp_6_fu_713_p3 );

    SC_METHOD(thread_p_shl8_cast_fu_684_p1);
    sensitive << ( tmp_9_fu_676_p3 );

    SC_METHOD(thread_std_0_ack_in);
    sensitive << ( std_0_state );

    SC_METHOD(thread_std_0_ack_out);
    sensitive << ( mean_0_vld_out );
    sensitive << ( std_0_vld_out );
    sensitive << ( ap_CS_fsm_state20 );

    SC_METHOD(thread_std_0_data_out);
    sensitive << ( std_0_payload_A );
    sensitive << ( std_0_payload_B );
    sensitive << ( std_0_sel );

    SC_METHOD(thread_std_0_load_A);
    sensitive << ( std_0_sel_wr );
    sensitive << ( std_0_state_cmp_full );

    SC_METHOD(thread_std_0_load_B);
    sensitive << ( std_0_sel_wr );
    sensitive << ( std_0_state_cmp_full );

    SC_METHOD(thread_std_0_sel);
    sensitive << ( std_0_sel_rd );

    SC_METHOD(thread_std_0_state_cmp_full);
    sensitive << ( std_0_state );

    SC_METHOD(thread_std_0_vld_in);
    sensitive << ( std_TVALID );

    SC_METHOD(thread_std_0_vld_out);
    sensitive << ( std_0_state );

    SC_METHOD(thread_std_TDATA_blk_n);
    sensitive << ( std_0_state );
    sensitive << ( ap_CS_fsm_state20 );

    SC_METHOD(thread_std_TREADY);
    sensitive << ( std_0_state );

    SC_METHOD(thread_temp_address0);
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( temp_addr_3_reg_1002 );
    sensitive << ( icmp_reg_1012 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( tmp_21_reg_1016 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( tmp_15_cast_fu_469_p1 );
    sensitive << ( tmp_29_cast_fu_751_p1 );
    sensitive << ( tmp_28_cast_fu_785_p1 );

    SC_METHOD(thread_temp_ce0);
    sensitive << ( in_r_0_vld_out );
    sensitive << ( w_0_vld_out );
    sensitive << ( b_0_vld_out );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( icmp_reg_1012 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( tmp_21_reg_1016 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_temp_d0);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( icmp_reg_1012 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( tmp_21_reg_1016 );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( tmp_3_fu_464_p1 );
    sensitive << ( tmp_19_fu_628_p2 );

    SC_METHOD(thread_temp_we0);
    sensitive << ( b_0_vld_out );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( icmp_reg_1012 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( tmp_21_reg_1016 );
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_tmp_10_cast_fu_742_p1);
    sensitive << ( ow4_reg_370 );

    SC_METHOD(thread_tmp_10_fu_688_p2);
    sensitive << ( tmp_8_fu_668_p3 );
    sensitive << ( p_shl8_cast_fu_684_p1 );

    SC_METHOD(thread_tmp_11_fu_845_p1);
    sensitive << ( y_assign_1_fu_837_p3 );

    SC_METHOD(thread_tmp_12_fu_780_p2);
    sensitive << ( tmp_7_reg_1041 );
    sensitive << ( tmp_7_cast_fu_776_p1 );

    SC_METHOD(thread_tmp_13_fu_760_p1);
    sensitive << ( tmp_25_fu_756_p1 );

    SC_METHOD(thread_tmp_14_fu_527_p2);
    sensitive << ( phi_mul1_reg_291 );
    sensitive << ( kh_reg_326 );

    SC_METHOD(thread_tmp_15_cast_fu_469_p1);
    sensitive << ( tmp_s_reg_942 );

    SC_METHOD(thread_tmp_15_fu_790_p1);
    sensitive << ( temp_q0 );

    SC_METHOD(thread_tmp_16_fu_575_p2);
    sensitive << ( phi_mul_reg_314 );
    sensitive << ( kw_reg_337 );

    SC_METHOD(thread_tmp_17_fu_625_p1);
    sensitive << ( tmp_2_i_reg_1007 );

    SC_METHOD(thread_tmp_18_cast_fu_586_p1);
    sensitive << ( ow_2_fu_581_p2 );

    SC_METHOD(thread_tmp_18_fu_794_p1);
    sensitive << ( mean_0_data_out );

    SC_METHOD(thread_tmp_19_fu_628_p2);
    sensitive << ( temp_q0 );
    sensitive << ( tmp_17_fu_625_p1 );

    SC_METHOD(thread_tmp_1_fu_414_p3);
    sensitive << ( i_reg_247 );

    SC_METHOD(thread_tmp_20_fu_803_p1);
    sensitive << ( std_0_data_out );

    SC_METHOD(thread_tmp_21_fu_651_p2);
    sensitive << ( icmp_fu_645_p2 );
    sensitive << ( ap_CS_fsm_state12 );
    sensitive << ( tmp_19_fu_628_p2 );

    SC_METHOD(thread_tmp_22_fu_825_p1);
    sensitive << ( grp_fu_819_p2 );

    SC_METHOD(thread_tmp_23_fu_829_p3);
    sensitive << ( grp_fu_819_p2 );

    SC_METHOD(thread_tmp_24_fu_746_p2);
    sensitive << ( tmp_10_reg_1028 );
    sensitive << ( tmp_10_cast_fu_742_p1 );

    SC_METHOD(thread_tmp_25_fu_756_p1);
    sensitive << ( temp_q0 );

    SC_METHOD(thread_tmp_26_fu_538_p3);
    sensitive << ( oh_2_fu_533_p2 );

    SC_METHOD(thread_tmp_27_fu_546_p3);
    sensitive << ( oh_2_fu_533_p2 );

    SC_METHOD(thread_tmp_28_cast_fu_785_p1);
    sensitive << ( tmp_12_fu_780_p2 );

    SC_METHOD(thread_tmp_28_fu_558_p2);
    sensitive << ( tmp_26_fu_538_p3 );
    sensitive << ( p_shl4_cast_fu_554_p1 );

    SC_METHOD(thread_tmp_29_cast_fu_751_p1);
    sensitive << ( tmp_24_fu_746_p2 );

    SC_METHOD(thread_tmp_29_fu_600_p1);
    sensitive << ( in_r_0_data_out );

    SC_METHOD(thread_tmp_2_fu_422_p3);
    sensitive << ( i_reg_247 );

    SC_METHOD(thread_tmp_30_fu_604_p1);
    sensitive << ( w_0_data_out );

    SC_METHOD(thread_tmp_31_fu_590_p2);
    sensitive << ( tmp_28_reg_989 );
    sensitive << ( tmp_18_cast_fu_586_p1 );

    SC_METHOD(thread_tmp_32_fu_635_p4);
    sensitive << ( tmp_19_fu_628_p2 );

    SC_METHOD(thread_tmp_33_cast_fu_595_p1);
    sensitive << ( tmp_31_fu_590_p2 );

    SC_METHOD(thread_tmp_3_fu_464_p1);
    sensitive << ( tmp_fu_460_p1 );

    SC_METHOD(thread_tmp_4_fu_434_p2);
    sensitive << ( tmp_1_fu_414_p3 );
    sensitive << ( p_shl2_cast_fu_430_p1 );

    SC_METHOD(thread_tmp_5_cast_fu_451_p1);
    sensitive << ( j_reg_258 );

    SC_METHOD(thread_tmp_5_fu_705_p3);
    sensitive << ( oh1_reg_359 );

    SC_METHOD(thread_tmp_6_fu_713_p3);
    sensitive << ( oh1_reg_359 );

    SC_METHOD(thread_tmp_7_cast_fu_776_p1);
    sensitive << ( ow2_reg_381 );

    SC_METHOD(thread_tmp_7_fu_725_p2);
    sensitive << ( tmp_5_fu_705_p3 );
    sensitive << ( p_shl6_cast_fu_721_p1 );

    SC_METHOD(thread_tmp_8_fu_668_p3);
    sensitive << ( oh3_reg_348 );

    SC_METHOD(thread_tmp_9_fu_676_p3);
    sensitive << ( oh3_reg_348 );

    SC_METHOD(thread_tmp_fu_460_p1);
    sensitive << ( b_0_data_out );

    SC_METHOD(thread_tmp_s_fu_455_p2);
    sensitive << ( tmp_4_reg_929 );
    sensitive << ( tmp_5_cast_fu_451_p1 );

    SC_METHOD(thread_w_0_ack_in);
    sensitive << ( w_0_state );

    SC_METHOD(thread_w_0_ack_out);
    sensitive << ( in_r_0_vld_out );
    sensitive << ( w_0_vld_out );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_w_0_data_out);
    sensitive << ( w_0_payload_A );
    sensitive << ( w_0_payload_B );
    sensitive << ( w_0_sel );

    SC_METHOD(thread_w_0_load_A);
    sensitive << ( w_0_sel_wr );
    sensitive << ( w_0_state_cmp_full );

    SC_METHOD(thread_w_0_load_B);
    sensitive << ( w_0_sel_wr );
    sensitive << ( w_0_state_cmp_full );

    SC_METHOD(thread_w_0_sel);
    sensitive << ( w_0_sel_rd );

    SC_METHOD(thread_w_0_state_cmp_full);
    sensitive << ( w_0_state );

    SC_METHOD(thread_w_0_vld_in);
    sensitive << ( w_TVALID );

    SC_METHOD(thread_w_0_vld_out);
    sensitive << ( w_0_state );

    SC_METHOD(thread_w_TDATA_blk_n);
    sensitive << ( w_0_state );
    sensitive << ( ap_CS_fsm_state11 );

    SC_METHOD(thread_w_TREADY);
    sensitive << ( w_0_state );

    SC_METHOD(thread_y_assign_1_fu_837_p3);
    sensitive << ( tmp_23_fu_829_p3 );
    sensitive << ( tmp_22_fu_825_p1 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( in_r_0_vld_out );
    sensitive << ( out_r_1_ack_in );
    sensitive << ( w_0_vld_out );
    sensitive << ( b_0_vld_out );
    sensitive << ( mean_0_vld_out );
    sensitive << ( std_0_vld_out );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state53 );
    sensitive << ( ap_CS_fsm_state54 );
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( ap_CS_fsm_state17 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state20 );
    sensitive << ( x_norm_read_reg_857 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( exitcond11_fu_403_p2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( exitcond10_fu_440_p2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state8 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( exitcond6_fu_516_p2 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( exitcond5_fu_564_p2 );
    sensitive << ( ap_CS_fsm_state14 );
    sensitive << ( exitcond2_fu_657_p2 );
    sensitive << ( exitcond4_fu_694_p2 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( exitcond_fu_731_p2 );
    sensitive << ( ap_CS_fsm_state18 );
    sensitive << ( exitcond3_fu_765_p2 );
    sensitive << ( exitcond1_fu_392_p2 );
    sensitive << ( exitcond8_fu_489_p2 );
    sensitive << ( exitcond7_fu_505_p2 );
    sensitive << ( exitcond9_fu_473_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "000000000000000000000000000000000000000000000000000001";
    in_r_0_sel_rd = SC_LOGIC_0;
    in_r_0_sel_wr = SC_LOGIC_0;
    in_r_0_state = "00";
    out_r_1_sel_rd = SC_LOGIC_0;
    out_r_1_sel_wr = SC_LOGIC_0;
    out_r_1_state = "00";
    w_0_sel_rd = SC_LOGIC_0;
    w_0_sel_wr = SC_LOGIC_0;
    w_0_state = "00";
    b_0_sel_rd = SC_LOGIC_0;
    b_0_sel_wr = SC_LOGIC_0;
    b_0_state = "00";
    mean_0_sel_rd = SC_LOGIC_0;
    mean_0_sel_wr = SC_LOGIC_0;
    mean_0_state = "00";
    std_0_sel_rd = SC_LOGIC_0;
    std_0_sel_wr = SC_LOGIC_0;
    std_0_state = "00";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "deconv_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, in_r_TDATA, "(port)in_r_TDATA");
    sc_trace(mVcdFile, in_r_TVALID, "(port)in_r_TVALID");
    sc_trace(mVcdFile, in_r_TREADY, "(port)in_r_TREADY");
    sc_trace(mVcdFile, out_r_TDATA, "(port)out_r_TDATA");
    sc_trace(mVcdFile, out_r_TVALID, "(port)out_r_TVALID");
    sc_trace(mVcdFile, out_r_TREADY, "(port)out_r_TREADY");
    sc_trace(mVcdFile, w_TDATA, "(port)w_TDATA");
    sc_trace(mVcdFile, w_TVALID, "(port)w_TVALID");
    sc_trace(mVcdFile, w_TREADY, "(port)w_TREADY");
    sc_trace(mVcdFile, b_TDATA, "(port)b_TDATA");
    sc_trace(mVcdFile, b_TVALID, "(port)b_TVALID");
    sc_trace(mVcdFile, b_TREADY, "(port)b_TREADY");
    sc_trace(mVcdFile, mean_TDATA, "(port)mean_TDATA");
    sc_trace(mVcdFile, mean_TVALID, "(port)mean_TVALID");
    sc_trace(mVcdFile, mean_TREADY, "(port)mean_TREADY");
    sc_trace(mVcdFile, std_TDATA, "(port)std_TDATA");
    sc_trace(mVcdFile, std_TVALID, "(port)std_TVALID");
    sc_trace(mVcdFile, std_TREADY, "(port)std_TREADY");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_AWVALID, "(port)s_axi_CTRL_BUS_AWVALID");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_AWREADY, "(port)s_axi_CTRL_BUS_AWREADY");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_AWADDR, "(port)s_axi_CTRL_BUS_AWADDR");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_WVALID, "(port)s_axi_CTRL_BUS_WVALID");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_WREADY, "(port)s_axi_CTRL_BUS_WREADY");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_WDATA, "(port)s_axi_CTRL_BUS_WDATA");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_WSTRB, "(port)s_axi_CTRL_BUS_WSTRB");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_ARVALID, "(port)s_axi_CTRL_BUS_ARVALID");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_ARREADY, "(port)s_axi_CTRL_BUS_ARREADY");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_ARADDR, "(port)s_axi_CTRL_BUS_ARADDR");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_RVALID, "(port)s_axi_CTRL_BUS_RVALID");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_RREADY, "(port)s_axi_CTRL_BUS_RREADY");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_RDATA, "(port)s_axi_CTRL_BUS_RDATA");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_RRESP, "(port)s_axi_CTRL_BUS_RRESP");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_BVALID, "(port)s_axi_CTRL_BUS_BVALID");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_BREADY, "(port)s_axi_CTRL_BUS_BREADY");
    sc_trace(mVcdFile, s_axi_CTRL_BUS_BRESP, "(port)s_axi_CTRL_BUS_BRESP");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, x_I_h, "x_I_h");
    sc_trace(mVcdFile, x_I_w, "x_I_w");
    sc_trace(mVcdFile, x_I_c, "x_I_c");
    sc_trace(mVcdFile, x_O_h, "x_O_h");
    sc_trace(mVcdFile, x_O_w, "x_O_w");
    sc_trace(mVcdFile, x_O_c, "x_O_c");
    sc_trace(mVcdFile, x_K, "x_K");
    sc_trace(mVcdFile, x_S, "x_S");
    sc_trace(mVcdFile, x_P, "x_P");
    sc_trace(mVcdFile, x_norm, "x_norm");
    sc_trace(mVcdFile, in_r_0_data_out, "in_r_0_data_out");
    sc_trace(mVcdFile, in_r_0_vld_in, "in_r_0_vld_in");
    sc_trace(mVcdFile, in_r_0_vld_out, "in_r_0_vld_out");
    sc_trace(mVcdFile, in_r_0_ack_in, "in_r_0_ack_in");
    sc_trace(mVcdFile, in_r_0_ack_out, "in_r_0_ack_out");
    sc_trace(mVcdFile, in_r_0_payload_A, "in_r_0_payload_A");
    sc_trace(mVcdFile, in_r_0_payload_B, "in_r_0_payload_B");
    sc_trace(mVcdFile, in_r_0_sel_rd, "in_r_0_sel_rd");
    sc_trace(mVcdFile, in_r_0_sel_wr, "in_r_0_sel_wr");
    sc_trace(mVcdFile, in_r_0_sel, "in_r_0_sel");
    sc_trace(mVcdFile, in_r_0_load_A, "in_r_0_load_A");
    sc_trace(mVcdFile, in_r_0_load_B, "in_r_0_load_B");
    sc_trace(mVcdFile, in_r_0_state, "in_r_0_state");
    sc_trace(mVcdFile, in_r_0_state_cmp_full, "in_r_0_state_cmp_full");
    sc_trace(mVcdFile, out_r_1_data_in, "out_r_1_data_in");
    sc_trace(mVcdFile, out_r_1_data_out, "out_r_1_data_out");
    sc_trace(mVcdFile, out_r_1_vld_in, "out_r_1_vld_in");
    sc_trace(mVcdFile, out_r_1_vld_out, "out_r_1_vld_out");
    sc_trace(mVcdFile, out_r_1_ack_in, "out_r_1_ack_in");
    sc_trace(mVcdFile, out_r_1_ack_out, "out_r_1_ack_out");
    sc_trace(mVcdFile, out_r_1_payload_A, "out_r_1_payload_A");
    sc_trace(mVcdFile, out_r_1_payload_B, "out_r_1_payload_B");
    sc_trace(mVcdFile, out_r_1_sel_rd, "out_r_1_sel_rd");
    sc_trace(mVcdFile, out_r_1_sel_wr, "out_r_1_sel_wr");
    sc_trace(mVcdFile, out_r_1_sel, "out_r_1_sel");
    sc_trace(mVcdFile, out_r_1_load_A, "out_r_1_load_A");
    sc_trace(mVcdFile, out_r_1_load_B, "out_r_1_load_B");
    sc_trace(mVcdFile, out_r_1_state, "out_r_1_state");
    sc_trace(mVcdFile, out_r_1_state_cmp_full, "out_r_1_state_cmp_full");
    sc_trace(mVcdFile, w_0_data_out, "w_0_data_out");
    sc_trace(mVcdFile, w_0_vld_in, "w_0_vld_in");
    sc_trace(mVcdFile, w_0_vld_out, "w_0_vld_out");
    sc_trace(mVcdFile, w_0_ack_in, "w_0_ack_in");
    sc_trace(mVcdFile, w_0_ack_out, "w_0_ack_out");
    sc_trace(mVcdFile, w_0_payload_A, "w_0_payload_A");
    sc_trace(mVcdFile, w_0_payload_B, "w_0_payload_B");
    sc_trace(mVcdFile, w_0_sel_rd, "w_0_sel_rd");
    sc_trace(mVcdFile, w_0_sel_wr, "w_0_sel_wr");
    sc_trace(mVcdFile, w_0_sel, "w_0_sel");
    sc_trace(mVcdFile, w_0_load_A, "w_0_load_A");
    sc_trace(mVcdFile, w_0_load_B, "w_0_load_B");
    sc_trace(mVcdFile, w_0_state, "w_0_state");
    sc_trace(mVcdFile, w_0_state_cmp_full, "w_0_state_cmp_full");
    sc_trace(mVcdFile, b_0_data_out, "b_0_data_out");
    sc_trace(mVcdFile, b_0_vld_in, "b_0_vld_in");
    sc_trace(mVcdFile, b_0_vld_out, "b_0_vld_out");
    sc_trace(mVcdFile, b_0_ack_in, "b_0_ack_in");
    sc_trace(mVcdFile, b_0_ack_out, "b_0_ack_out");
    sc_trace(mVcdFile, b_0_payload_A, "b_0_payload_A");
    sc_trace(mVcdFile, b_0_payload_B, "b_0_payload_B");
    sc_trace(mVcdFile, b_0_sel_rd, "b_0_sel_rd");
    sc_trace(mVcdFile, b_0_sel_wr, "b_0_sel_wr");
    sc_trace(mVcdFile, b_0_sel, "b_0_sel");
    sc_trace(mVcdFile, b_0_load_A, "b_0_load_A");
    sc_trace(mVcdFile, b_0_load_B, "b_0_load_B");
    sc_trace(mVcdFile, b_0_state, "b_0_state");
    sc_trace(mVcdFile, b_0_state_cmp_full, "b_0_state_cmp_full");
    sc_trace(mVcdFile, mean_0_data_out, "mean_0_data_out");
    sc_trace(mVcdFile, mean_0_vld_in, "mean_0_vld_in");
    sc_trace(mVcdFile, mean_0_vld_out, "mean_0_vld_out");
    sc_trace(mVcdFile, mean_0_ack_in, "mean_0_ack_in");
    sc_trace(mVcdFile, mean_0_ack_out, "mean_0_ack_out");
    sc_trace(mVcdFile, mean_0_payload_A, "mean_0_payload_A");
    sc_trace(mVcdFile, mean_0_payload_B, "mean_0_payload_B");
    sc_trace(mVcdFile, mean_0_sel_rd, "mean_0_sel_rd");
    sc_trace(mVcdFile, mean_0_sel_wr, "mean_0_sel_wr");
    sc_trace(mVcdFile, mean_0_sel, "mean_0_sel");
    sc_trace(mVcdFile, mean_0_load_A, "mean_0_load_A");
    sc_trace(mVcdFile, mean_0_load_B, "mean_0_load_B");
    sc_trace(mVcdFile, mean_0_state, "mean_0_state");
    sc_trace(mVcdFile, mean_0_state_cmp_full, "mean_0_state_cmp_full");
    sc_trace(mVcdFile, std_0_data_out, "std_0_data_out");
    sc_trace(mVcdFile, std_0_vld_in, "std_0_vld_in");
    sc_trace(mVcdFile, std_0_vld_out, "std_0_vld_out");
    sc_trace(mVcdFile, std_0_ack_in, "std_0_ack_in");
    sc_trace(mVcdFile, std_0_ack_out, "std_0_ack_out");
    sc_trace(mVcdFile, std_0_payload_A, "std_0_payload_A");
    sc_trace(mVcdFile, std_0_payload_B, "std_0_payload_B");
    sc_trace(mVcdFile, std_0_sel_rd, "std_0_sel_rd");
    sc_trace(mVcdFile, std_0_sel_wr, "std_0_sel_wr");
    sc_trace(mVcdFile, std_0_sel, "std_0_sel");
    sc_trace(mVcdFile, std_0_load_A, "std_0_load_A");
    sc_trace(mVcdFile, std_0_load_B, "std_0_load_B");
    sc_trace(mVcdFile, std_0_state, "std_0_state");
    sc_trace(mVcdFile, std_0_state_cmp_full, "std_0_state_cmp_full");
    sc_trace(mVcdFile, temp_address0, "temp_address0");
    sc_trace(mVcdFile, temp_ce0, "temp_ce0");
    sc_trace(mVcdFile, temp_we0, "temp_we0");
    sc_trace(mVcdFile, temp_d0, "temp_d0");
    sc_trace(mVcdFile, temp_q0, "temp_q0");
    sc_trace(mVcdFile, in_r_TDATA_blk_n, "in_r_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, out_r_TDATA_blk_n, "out_r_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state53, "ap_CS_fsm_state53");
    sc_trace(mVcdFile, ap_CS_fsm_state54, "ap_CS_fsm_state54");
    sc_trace(mVcdFile, ap_CS_fsm_state16, "ap_CS_fsm_state16");
    sc_trace(mVcdFile, ap_CS_fsm_state17, "ap_CS_fsm_state17");
    sc_trace(mVcdFile, w_TDATA_blk_n, "w_TDATA_blk_n");
    sc_trace(mVcdFile, b_TDATA_blk_n, "b_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, mean_TDATA_blk_n, "mean_TDATA_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state20, "ap_CS_fsm_state20");
    sc_trace(mVcdFile, std_TDATA_blk_n, "std_TDATA_blk_n");
    sc_trace(mVcdFile, x_norm_read_reg_857, "x_norm_read_reg_857");
    sc_trace(mVcdFile, x_P_read_reg_861, "x_P_read_reg_861");
    sc_trace(mVcdFile, x_S_read_reg_867, "x_S_read_reg_867");
    sc_trace(mVcdFile, x_K_read_reg_873, "x_K_read_reg_873");
    sc_trace(mVcdFile, x_O_c_read_reg_879, "x_O_c_read_reg_879");
    sc_trace(mVcdFile, x_O_w_read_reg_884, "x_O_w_read_reg_884");
    sc_trace(mVcdFile, x_O_h_read_reg_891, "x_O_h_read_reg_891");
    sc_trace(mVcdFile, x_I_c_read_reg_898, "x_I_c_read_reg_898");
    sc_trace(mVcdFile, x_I_w_read_reg_903, "x_I_w_read_reg_903");
    sc_trace(mVcdFile, x_I_h_read_reg_908, "x_I_h_read_reg_908");
    sc_trace(mVcdFile, oc_1_fu_397_p2, "oc_1_fu_397_p2");
    sc_trace(mVcdFile, oc_1_reg_916, "oc_1_reg_916");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, i_1_fu_408_p2, "i_1_fu_408_p2");
    sc_trace(mVcdFile, i_1_reg_924, "i_1_reg_924");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, tmp_4_fu_434_p2, "tmp_4_fu_434_p2");
    sc_trace(mVcdFile, tmp_4_reg_929, "tmp_4_reg_929");
    sc_trace(mVcdFile, exitcond11_fu_403_p2, "exitcond11_fu_403_p2");
    sc_trace(mVcdFile, j_1_fu_445_p2, "j_1_fu_445_p2");
    sc_trace(mVcdFile, j_1_reg_937, "j_1_reg_937");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, tmp_s_fu_455_p2, "tmp_s_fu_455_p2");
    sc_trace(mVcdFile, tmp_s_reg_942, "tmp_s_reg_942");
    sc_trace(mVcdFile, exitcond10_fu_440_p2, "exitcond10_fu_440_p2");
    sc_trace(mVcdFile, ic_1_fu_478_p2, "ic_1_fu_478_p2");
    sc_trace(mVcdFile, ic_1_reg_950, "ic_1_reg_950");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, next_mul1_fu_484_p2, "next_mul1_fu_484_p2");
    sc_trace(mVcdFile, next_mul1_reg_955, "next_mul1_reg_955");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, ih_1_fu_494_p2, "ih_1_fu_494_p2");
    sc_trace(mVcdFile, ih_1_reg_963, "ih_1_reg_963");
    sc_trace(mVcdFile, next_mul_fu_500_p2, "next_mul_fu_500_p2");
    sc_trace(mVcdFile, next_mul_reg_968, "next_mul_reg_968");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, iw_1_fu_510_p2, "iw_1_fu_510_p2");
    sc_trace(mVcdFile, iw_1_reg_976, "iw_1_reg_976");
    sc_trace(mVcdFile, kh_1_fu_521_p2, "kh_1_fu_521_p2");
    sc_trace(mVcdFile, kh_1_reg_984, "kh_1_reg_984");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, tmp_28_fu_558_p2, "tmp_28_fu_558_p2");
    sc_trace(mVcdFile, tmp_28_reg_989, "tmp_28_reg_989");
    sc_trace(mVcdFile, exitcond6_fu_516_p2, "exitcond6_fu_516_p2");
    sc_trace(mVcdFile, kw_1_fu_569_p2, "kw_1_fu_569_p2");
    sc_trace(mVcdFile, kw_1_reg_997, "kw_1_reg_997");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, temp_addr_3_reg_1002, "temp_addr_3_reg_1002");
    sc_trace(mVcdFile, exitcond5_fu_564_p2, "exitcond5_fu_564_p2");
    sc_trace(mVcdFile, tmp_2_i_reg_1007, "tmp_2_i_reg_1007");
    sc_trace(mVcdFile, ap_block_state11, "ap_block_state11");
    sc_trace(mVcdFile, icmp_fu_645_p2, "icmp_fu_645_p2");
    sc_trace(mVcdFile, icmp_reg_1012, "icmp_reg_1012");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, tmp_21_fu_651_p2, "tmp_21_fu_651_p2");
    sc_trace(mVcdFile, tmp_21_reg_1016, "tmp_21_reg_1016");
    sc_trace(mVcdFile, oh_1_fu_662_p2, "oh_1_fu_662_p2");
    sc_trace(mVcdFile, oh_1_reg_1023, "oh_1_reg_1023");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, tmp_10_fu_688_p2, "tmp_10_fu_688_p2");
    sc_trace(mVcdFile, tmp_10_reg_1028, "tmp_10_reg_1028");
    sc_trace(mVcdFile, exitcond2_fu_657_p2, "exitcond2_fu_657_p2");
    sc_trace(mVcdFile, oh_fu_699_p2, "oh_fu_699_p2");
    sc_trace(mVcdFile, oh_reg_1036, "oh_reg_1036");
    sc_trace(mVcdFile, tmp_7_fu_725_p2, "tmp_7_fu_725_p2");
    sc_trace(mVcdFile, tmp_7_reg_1041, "tmp_7_reg_1041");
    sc_trace(mVcdFile, exitcond4_fu_694_p2, "exitcond4_fu_694_p2");
    sc_trace(mVcdFile, ow_1_fu_736_p2, "ow_1_fu_736_p2");
    sc_trace(mVcdFile, ow_1_reg_1049, "ow_1_reg_1049");
    sc_trace(mVcdFile, ap_CS_fsm_state15, "ap_CS_fsm_state15");
    sc_trace(mVcdFile, exitcond_fu_731_p2, "exitcond_fu_731_p2");
    sc_trace(mVcdFile, tmp_13_fu_760_p1, "tmp_13_fu_760_p1");
    sc_trace(mVcdFile, ow_fu_770_p2, "ow_fu_770_p2");
    sc_trace(mVcdFile, ow_reg_1067, "ow_reg_1067");
    sc_trace(mVcdFile, ap_CS_fsm_state18, "ap_CS_fsm_state18");
    sc_trace(mVcdFile, exitcond3_fu_765_p2, "exitcond3_fu_765_p2");
    sc_trace(mVcdFile, tmp_15_fu_790_p1, "tmp_15_fu_790_p1");
    sc_trace(mVcdFile, tmp_15_reg_1077, "tmp_15_reg_1077");
    sc_trace(mVcdFile, ap_CS_fsm_state19, "ap_CS_fsm_state19");
    sc_trace(mVcdFile, ap_block_state20, "ap_block_state20");
    sc_trace(mVcdFile, tmp_11_fu_845_p1, "tmp_11_fu_845_p1");
    sc_trace(mVcdFile, oc_reg_236, "oc_reg_236");
    sc_trace(mVcdFile, i_reg_247, "i_reg_247");
    sc_trace(mVcdFile, exitcond1_fu_392_p2, "exitcond1_fu_392_p2");
    sc_trace(mVcdFile, j_reg_258, "j_reg_258");
    sc_trace(mVcdFile, ic_reg_269, "ic_reg_269");
    sc_trace(mVcdFile, exitcond8_fu_489_p2, "exitcond8_fu_489_p2");
    sc_trace(mVcdFile, ih_reg_280, "ih_reg_280");
    sc_trace(mVcdFile, exitcond7_fu_505_p2, "exitcond7_fu_505_p2");
    sc_trace(mVcdFile, exitcond9_fu_473_p2, "exitcond9_fu_473_p2");
    sc_trace(mVcdFile, phi_mul1_reg_291, "phi_mul1_reg_291");
    sc_trace(mVcdFile, iw_reg_303, "iw_reg_303");
    sc_trace(mVcdFile, phi_mul_reg_314, "phi_mul_reg_314");
    sc_trace(mVcdFile, kh_reg_326, "kh_reg_326");
    sc_trace(mVcdFile, kw_reg_337, "kw_reg_337");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, oh3_reg_348, "oh3_reg_348");
    sc_trace(mVcdFile, oh1_reg_359, "oh1_reg_359");
    sc_trace(mVcdFile, ow4_reg_370, "ow4_reg_370");
    sc_trace(mVcdFile, ow2_reg_381, "ow2_reg_381");
    sc_trace(mVcdFile, tmp_15_cast_fu_469_p1, "tmp_15_cast_fu_469_p1");
    sc_trace(mVcdFile, tmp_33_cast_fu_595_p1, "tmp_33_cast_fu_595_p1");
    sc_trace(mVcdFile, tmp_29_cast_fu_751_p1, "tmp_29_cast_fu_751_p1");
    sc_trace(mVcdFile, tmp_28_cast_fu_785_p1, "tmp_28_cast_fu_785_p1");
    sc_trace(mVcdFile, tmp_3_fu_464_p1, "tmp_3_fu_464_p1");
    sc_trace(mVcdFile, tmp_19_fu_628_p2, "tmp_19_fu_628_p2");
    sc_trace(mVcdFile, tmp_2_fu_422_p3, "tmp_2_fu_422_p3");
    sc_trace(mVcdFile, tmp_1_fu_414_p3, "tmp_1_fu_414_p3");
    sc_trace(mVcdFile, p_shl2_cast_fu_430_p1, "p_shl2_cast_fu_430_p1");
    sc_trace(mVcdFile, tmp_5_cast_fu_451_p1, "tmp_5_cast_fu_451_p1");
    sc_trace(mVcdFile, tmp_fu_460_p1, "tmp_fu_460_p1");
    sc_trace(mVcdFile, tmp_14_fu_527_p2, "tmp_14_fu_527_p2");
    sc_trace(mVcdFile, oh_2_fu_533_p2, "oh_2_fu_533_p2");
    sc_trace(mVcdFile, tmp_27_fu_546_p3, "tmp_27_fu_546_p3");
    sc_trace(mVcdFile, tmp_26_fu_538_p3, "tmp_26_fu_538_p3");
    sc_trace(mVcdFile, p_shl4_cast_fu_554_p1, "p_shl4_cast_fu_554_p1");
    sc_trace(mVcdFile, tmp_16_fu_575_p2, "tmp_16_fu_575_p2");
    sc_trace(mVcdFile, ow_2_fu_581_p2, "ow_2_fu_581_p2");
    sc_trace(mVcdFile, tmp_18_cast_fu_586_p1, "tmp_18_cast_fu_586_p1");
    sc_trace(mVcdFile, tmp_31_fu_590_p2, "tmp_31_fu_590_p2");
    sc_trace(mVcdFile, tmp_29_fu_600_p1, "tmp_29_fu_600_p1");
    sc_trace(mVcdFile, tmp_30_fu_604_p1, "tmp_30_fu_604_p1");
    sc_trace(mVcdFile, c_fu_850_p2, "c_fu_850_p2");
    sc_trace(mVcdFile, tmp_17_fu_625_p1, "tmp_17_fu_625_p1");
    sc_trace(mVcdFile, tmp_32_fu_635_p4, "tmp_32_fu_635_p4");
    sc_trace(mVcdFile, tmp_9_fu_676_p3, "tmp_9_fu_676_p3");
    sc_trace(mVcdFile, tmp_8_fu_668_p3, "tmp_8_fu_668_p3");
    sc_trace(mVcdFile, p_shl8_cast_fu_684_p1, "p_shl8_cast_fu_684_p1");
    sc_trace(mVcdFile, tmp_6_fu_713_p3, "tmp_6_fu_713_p3");
    sc_trace(mVcdFile, tmp_5_fu_705_p3, "tmp_5_fu_705_p3");
    sc_trace(mVcdFile, p_shl6_cast_fu_721_p1, "p_shl6_cast_fu_721_p1");
    sc_trace(mVcdFile, tmp_10_cast_fu_742_p1, "tmp_10_cast_fu_742_p1");
    sc_trace(mVcdFile, tmp_24_fu_746_p2, "tmp_24_fu_746_p2");
    sc_trace(mVcdFile, tmp_25_fu_756_p1, "tmp_25_fu_756_p1");
    sc_trace(mVcdFile, tmp_7_cast_fu_776_p1, "tmp_7_cast_fu_776_p1");
    sc_trace(mVcdFile, tmp_12_fu_780_p2, "tmp_12_fu_780_p2");
    sc_trace(mVcdFile, tmp_18_fu_794_p1, "tmp_18_fu_794_p1");
    sc_trace(mVcdFile, a_assign_fu_798_p2, "a_assign_fu_798_p2");
    sc_trace(mVcdFile, tmp_20_fu_803_p1, "tmp_20_fu_803_p1");
    sc_trace(mVcdFile, grp_fu_819_p0, "grp_fu_819_p0");
    sc_trace(mVcdFile, grp_fu_819_p2, "grp_fu_819_p2");
    sc_trace(mVcdFile, tmp_23_fu_829_p3, "tmp_23_fu_829_p3");
    sc_trace(mVcdFile, tmp_22_fu_825_p1, "tmp_22_fu_825_p1");
    sc_trace(mVcdFile, y_assign_1_fu_837_p3, "y_assign_1_fu_837_p3");
    sc_trace(mVcdFile, grp_fu_819_ap_start, "grp_fu_819_ap_start");
    sc_trace(mVcdFile, grp_fu_819_ap_done, "grp_fu_819_ap_done");
    sc_trace(mVcdFile, grp_fu_819_ce, "grp_fu_819_ce");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("deconv.hdltvin.dat");
    mHdltvoutHandle.open("deconv.hdltvout.dat");
}

deconv::~deconv() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete temp_U;
    delete deconv_CTRL_BUS_s_axi_U;
    delete deconv_sdiv_30ns_bkb_U0;
    delete deconv_mul_mul_18cud_U1;
}

void deconv::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void deconv::thread_ap_clk_no_reset_() {
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        b_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, b_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, b_0_vld_out.read()))) {
            b_0_sel_rd =  (sc_logic) (~b_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        b_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, b_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, b_0_ack_in.read()))) {
            b_0_sel_wr =  (sc_logic) (~b_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        b_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, b_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, b_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, b_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, b_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, b_0_state.read())))) {
            b_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, b_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, b_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, b_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, b_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, b_0_state.read())))) {
            b_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, b_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, b_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, b_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, b_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, b_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, b_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, b_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, b_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, b_0_ack_out.read()))))) {
            b_0_state = ap_const_lv2_3;
        } else {
            b_0_state = ap_const_lv2_2;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(out_r_1_ack_in.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_392_p2.read()))) {
        i_reg_247 = ap_const_lv6_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, exitcond10_fu_440_p2.read()))) {
        i_reg_247 = i_1_reg_924.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, exitcond11_fu_403_p2.read()))) {
        ic_reg_269 = ap_const_lv6_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, exitcond8_fu_489_p2.read()))) {
        ic_reg_269 = ic_1_reg_950.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond9_fu_473_p2.read()))) {
        ih_reg_280 = ap_const_lv6_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, exitcond7_fu_505_p2.read()))) {
        ih_reg_280 = ih_1_reg_963.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        in_r_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, in_r_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, in_r_0_vld_out.read()))) {
            in_r_0_sel_rd =  (sc_logic) (~in_r_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        in_r_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, in_r_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, in_r_0_ack_in.read()))) {
            in_r_0_sel_wr =  (sc_logic) (~in_r_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        in_r_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, in_r_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, in_r_0_ack_out.read()) && 
              esl_seteq<1,2,2>(in_r_0_state.read(), ap_const_lv2_3)) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, in_r_0_vld_in.read()) && 
              esl_seteq<1,2,2>(in_r_0_state.read(), ap_const_lv2_2)))) {
            in_r_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, in_r_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, in_r_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(in_r_0_state.read(), ap_const_lv2_3)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, in_r_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(in_r_0_state.read(), ap_const_lv2_1)))) {
            in_r_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, in_r_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(in_r_0_state.read(), ap_const_lv2_2)) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, in_r_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(in_r_0_state.read(), ap_const_lv2_1)) || 
                    (esl_seteq<1,2,2>(in_r_0_state.read(), ap_const_lv2_3) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, in_r_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, in_r_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, in_r_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, in_r_0_ack_out.read()))))) {
            in_r_0_state = ap_const_lv2_3;
        } else {
            in_r_0_state = ap_const_lv2_2;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond8_fu_489_p2.read()))) {
        iw_reg_303 = ap_const_lv6_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, exitcond6_fu_516_p2.read()))) {
        iw_reg_303 = iw_1_reg_976.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond11_fu_403_p2.read()))) {
        j_reg_258 = ap_const_lv6_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                esl_seteq<1,1,1>(b_0_vld_out.read(), ap_const_logic_1))) {
        j_reg_258 = j_1_reg_937.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond7_fu_505_p2.read()))) {
        kh_reg_326 = ap_const_lv6_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, exitcond5_fu_564_p2.read()))) {
        kh_reg_326 = kh_1_reg_984.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond6_fu_516_p2.read()))) {
        kw_reg_337 = ap_const_lv6_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read())) {
        kw_reg_337 = kw_1_reg_997.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        mean_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, mean_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, mean_0_vld_out.read()))) {
            mean_0_sel_rd =  (sc_logic) (~mean_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        mean_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, mean_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, mean_0_ack_in.read()))) {
            mean_0_sel_wr =  (sc_logic) (~mean_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        mean_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, mean_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, mean_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, mean_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, mean_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, mean_0_state.read())))) {
            mean_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, mean_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, mean_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, mean_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, mean_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, mean_0_state.read())))) {
            mean_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, mean_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, mean_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, mean_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, mean_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, mean_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, mean_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, mean_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, mean_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, mean_0_ack_out.read()))))) {
            mean_0_state = ap_const_lv2_3;
        } else {
            mean_0_state = ap_const_lv2_2;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && 
         ((esl_seteq<1,1,1>(ap_const_lv1_0, x_norm_read_reg_857.read()) && 
           esl_seteq<1,1,1>(ap_const_lv1_1, exitcond2_fu_657_p2.read())) || 
          (esl_seteq<1,1,1>(ap_const_lv1_1, x_norm_read_reg_857.read()) && 
           esl_seteq<1,1,1>(ap_const_lv1_1, exitcond4_fu_694_p2.read()))))) {
        oc_reg_236 = oc_1_reg_916.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        oc_reg_236 = ap_const_lv6_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, x_norm_read_reg_857.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, exitcond9_fu_473_p2.read()))) {
        oh1_reg_359 = ap_const_lv6_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, exitcond3_fu_765_p2.read()))) {
        oh1_reg_359 = oh_reg_1036.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, x_norm_read_reg_857.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, exitcond9_fu_473_p2.read()))) {
        oh3_reg_348 = ap_const_lv6_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_731_p2.read()))) {
        oh3_reg_348 = oh_1_reg_1023.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_r_1_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_r_1_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_r_1_vld_out.read()))) {
            out_r_1_sel_rd =  (sc_logic) (~out_r_1_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_r_1_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, out_r_1_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, out_r_1_ack_in.read()))) {
            out_r_1_sel_wr =  (sc_logic) (~out_r_1_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        out_r_1_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, out_r_1_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, out_r_1_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, out_r_1_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, out_r_1_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, out_r_1_state.read())))) {
            out_r_1_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_r_1_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, out_r_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, out_r_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, out_r_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_r_1_state.read())))) {
            out_r_1_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, out_r_1_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, out_r_1_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, out_r_1_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, out_r_1_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, out_r_1_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, out_r_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, out_r_1_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, out_r_1_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, out_r_1_ack_out.read()))))) {
            out_r_1_state = ap_const_lv2_3;
        } else {
            out_r_1_state = ap_const_lv2_2;
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, x_norm_read_reg_857.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond4_fu_694_p2.read()))) {
        ow2_reg_381 = ap_const_lv6_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state54.read()) && 
                esl_seteq<1,1,1>(out_r_1_ack_in.read(), ap_const_logic_1))) {
        ow2_reg_381 = ow_reg_1067.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, x_norm_read_reg_857.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_fu_657_p2.read()))) {
        ow4_reg_370 = ap_const_lv6_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) && 
                esl_seteq<1,1,1>(out_r_1_ack_in.read(), ap_const_logic_1))) {
        ow4_reg_370 = ow_1_reg_1049.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond9_fu_473_p2.read()))) {
        phi_mul1_reg_291 = ap_const_lv6_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, exitcond7_fu_505_p2.read()))) {
        phi_mul1_reg_291 = next_mul1_reg_955.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, exitcond8_fu_489_p2.read()))) {
        phi_mul_reg_314 = ap_const_lv6_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, exitcond6_fu_516_p2.read()))) {
        phi_mul_reg_314 = next_mul_reg_968.read();
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        std_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, std_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, std_0_vld_out.read()))) {
            std_0_sel_rd =  (sc_logic) (~std_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        std_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, std_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, std_0_ack_in.read()))) {
            std_0_sel_wr =  (sc_logic) (~std_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        std_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, std_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, std_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, std_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, std_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, std_0_state.read())))) {
            std_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, std_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, std_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, std_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, std_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, std_0_state.read())))) {
            std_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, std_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, std_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, std_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, std_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, std_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, std_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, std_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, std_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, std_0_ack_out.read()))))) {
            std_0_state = ap_const_lv2_3;
        } else {
            std_0_state = ap_const_lv2_2;
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        w_0_sel_rd = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, w_0_ack_out.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, w_0_vld_out.read()))) {
            w_0_sel_rd =  (sc_logic) (~w_0_sel_rd.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        w_0_sel_wr = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, w_0_vld_in.read()) && 
             esl_seteq<1,1,1>(ap_const_logic_1, w_0_ack_in.read()))) {
            w_0_sel_wr =  (sc_logic) (~w_0_sel_wr.read());
        }
    }
    if ( ap_rst_n_inv.read() == ap_const_logic_1) {
        w_0_state = ap_const_lv2_0;
    } else {
        if (((esl_seteq<1,1,1>(ap_const_logic_0, w_0_vld_in.read()) && 
              esl_seteq<1,1,1>(ap_const_logic_1, w_0_ack_out.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_3, w_0_state.read())) || 
             (esl_seteq<1,1,1>(ap_const_logic_0, w_0_vld_in.read()) && 
              esl_seteq<1,2,2>(ap_const_lv2_2, w_0_state.read())))) {
            w_0_state = ap_const_lv2_2;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, w_0_vld_in.read()) && 
                     esl_seteq<1,1,1>(ap_const_logic_0, w_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_3, w_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_0, w_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, w_0_state.read())))) {
            w_0_state = ap_const_lv2_1;
        } else if (((esl_seteq<1,1,1>(ap_const_logic_1, w_0_vld_in.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_2, w_0_state.read())) || 
                    (esl_seteq<1,1,1>(ap_const_logic_1, w_0_ack_out.read()) && 
                     esl_seteq<1,2,2>(ap_const_lv2_1, w_0_state.read())) || 
                    (esl_seteq<1,2,2>(ap_const_lv2_3, w_0_state.read()) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_1, w_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_0, w_0_ack_out.read())) && 
                     !(esl_seteq<1,1,1>(ap_const_logic_0, w_0_vld_in.read()) && esl_seteq<1,1,1>(ap_const_logic_1, w_0_ack_out.read()))))) {
            w_0_state = ap_const_lv2_3;
        } else {
            w_0_state = ap_const_lv2_2;
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, b_0_load_A.read())) {
        b_0_payload_A = b_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, b_0_load_B.read())) {
        b_0_payload_B = b_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        i_1_reg_924 = i_1_fu_408_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        ic_1_reg_950 = ic_1_fu_478_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        icmp_reg_1012 = icmp_fu_645_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        ih_1_reg_963 = ih_1_fu_494_p2.read();
        next_mul1_reg_955 = next_mul1_fu_484_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_r_0_load_A.read())) {
        in_r_0_payload_A = in_r_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_r_0_load_B.read())) {
        in_r_0_payload_B = in_r_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        iw_1_reg_976 = iw_1_fu_510_p2.read();
        next_mul_reg_968 = next_mul_fu_500_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        j_1_reg_937 = j_1_fu_445_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        kh_1_reg_984 = kh_1_fu_521_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read())) {
        kw_1_reg_997 = kw_1_fu_569_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, mean_0_load_A.read())) {
        mean_0_payload_A = mean_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, mean_0_load_B.read())) {
        mean_0_payload_B = mean_TDATA.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(out_r_1_ack_in.read(), ap_const_logic_1))) {
        oc_1_reg_916 = oc_1_fu_397_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, x_norm_read_reg_857.read()))) {
        oh_1_reg_1023 = oh_1_fu_662_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, x_norm_read_reg_857.read()))) {
        oh_reg_1036 = oh_fu_699_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_r_1_load_A.read())) {
        out_r_1_payload_A = out_r_1_data_in.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_r_1_load_B.read())) {
        out_r_1_payload_B = out_r_1_data_in.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        ow_1_reg_1049 = ow_1_fu_736_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        ow_reg_1067 = ow_fu_770_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, std_0_load_A.read())) {
        std_0_payload_A = std_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, std_0_load_B.read())) {
        std_0_payload_B = std_TDATA.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond5_fu_564_p2.read()))) {
        temp_addr_3_reg_1002 =  (sc_lv<10>) (tmp_33_cast_fu_595_p1.read());
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, x_norm_read_reg_857.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond2_fu_657_p2.read()))) {
        tmp_10_reg_1028 = tmp_10_fu_688_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read())) {
        tmp_15_reg_1077 = tmp_15_fu_790_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_fu_645_p2.read()))) {
        tmp_21_reg_1016 = tmp_21_fu_651_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond6_fu_516_p2.read()))) {
        tmp_28_reg_989 = tmp_28_fu_558_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, in_r_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, w_0_vld_out.read())))) {
        tmp_2_i_reg_1007 = c_fu_850_p2.read().range(29, 12);
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond11_fu_403_p2.read()))) {
        tmp_4_reg_929 = tmp_4_fu_434_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, x_norm_read_reg_857.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond4_fu_694_p2.read()))) {
        tmp_7_reg_1041 = tmp_7_fu_725_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond10_fu_440_p2.read()))) {
        tmp_s_reg_942 = tmp_s_fu_455_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, w_0_load_A.read())) {
        w_0_payload_A = w_TDATA.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, w_0_load_B.read())) {
        w_0_payload_B = w_TDATA.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        x_I_c_read_reg_898 = x_I_c.read();
        x_I_h_read_reg_908 = x_I_h.read();
        x_I_w_read_reg_903 = x_I_w.read();
        x_K_read_reg_873 = x_K.read();
        x_O_c_read_reg_879 = x_O_c.read();
        x_O_h_read_reg_891 = x_O_h.read();
        x_O_w_read_reg_884 = x_O_w.read();
        x_P_read_reg_861 = x_P.read();
        x_S_read_reg_867 = x_S.read();
        x_norm_read_reg_857 = x_norm.read();
    }
}

void deconv::thread_a_assign_fu_798_p2() {
    a_assign_fu_798_p2 = (!tmp_15_reg_1077.read().is_01() || !tmp_18_fu_794_p1.read().is_01())? sc_lv<18>(): (sc_biguint<18>(tmp_15_reg_1077.read()) - sc_biguint<18>(tmp_18_fu_794_p1.read()));
}

void deconv::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void deconv::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read()[9];
}

void deconv::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read()[10];
}

void deconv::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read()[11];
}

void deconv::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read()[12];
}

void deconv::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read()[13];
}

void deconv::thread_ap_CS_fsm_state15() {
    ap_CS_fsm_state15 = ap_CS_fsm.read()[14];
}

void deconv::thread_ap_CS_fsm_state16() {
    ap_CS_fsm_state16 = ap_CS_fsm.read()[15];
}

void deconv::thread_ap_CS_fsm_state17() {
    ap_CS_fsm_state17 = ap_CS_fsm.read()[16];
}

void deconv::thread_ap_CS_fsm_state18() {
    ap_CS_fsm_state18 = ap_CS_fsm.read()[17];
}

void deconv::thread_ap_CS_fsm_state19() {
    ap_CS_fsm_state19 = ap_CS_fsm.read()[18];
}

void deconv::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void deconv::thread_ap_CS_fsm_state20() {
    ap_CS_fsm_state20 = ap_CS_fsm.read()[19];
}

void deconv::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void deconv::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void deconv::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void deconv::thread_ap_CS_fsm_state53() {
    ap_CS_fsm_state53 = ap_CS_fsm.read()[52];
}

void deconv::thread_ap_CS_fsm_state54() {
    ap_CS_fsm_state54 = ap_CS_fsm.read()[53];
}

void deconv::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void deconv::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void deconv::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void deconv::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void deconv::thread_ap_block_state11() {
    ap_block_state11 = (esl_seteq<1,1,1>(ap_const_logic_0, in_r_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, w_0_vld_out.read()));
}

void deconv::thread_ap_block_state20() {
    ap_block_state20 = (esl_seteq<1,1,1>(ap_const_logic_0, mean_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, std_0_vld_out.read()));
}

void deconv::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(out_r_1_ack_in.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, exitcond1_fu_392_p2.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void deconv::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void deconv::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(out_r_1_ack_in.read(), ap_const_logic_1) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, exitcond1_fu_392_p2.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void deconv::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void deconv::thread_b_0_ack_in() {
    b_0_ack_in = b_0_state.read()[1];
}

void deconv::thread_b_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(b_0_vld_out.read(), ap_const_logic_1))) {
        b_0_ack_out = ap_const_logic_1;
    } else {
        b_0_ack_out = ap_const_logic_0;
    }
}

void deconv::thread_b_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, b_0_sel.read())) {
        b_0_data_out = b_0_payload_B.read();
    } else {
        b_0_data_out = b_0_payload_A.read();
    }
}

void deconv::thread_b_0_load_A() {
    b_0_load_A = (b_0_state_cmp_full.read() & ~b_0_sel_wr.read());
}

void deconv::thread_b_0_load_B() {
    b_0_load_B = (b_0_sel_wr.read() & b_0_state_cmp_full.read());
}

void deconv::thread_b_0_sel() {
    b_0_sel = b_0_sel_rd.read();
}

void deconv::thread_b_0_state_cmp_full() {
    b_0_state_cmp_full =  (sc_logic) ((!b_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(b_0_state.read() != ap_const_lv2_1))[0];
}

void deconv::thread_b_0_vld_in() {
    b_0_vld_in = b_TVALID.read();
}

void deconv::thread_b_0_vld_out() {
    b_0_vld_out = b_0_state.read()[0];
}

void deconv::thread_b_TDATA_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        b_TDATA_blk_n = b_0_state.read()[0];
    } else {
        b_TDATA_blk_n = ap_const_logic_1;
    }
}

void deconv::thread_b_TREADY() {
    b_TREADY = b_0_state.read()[1];
}

void deconv::thread_exitcond10_fu_440_p2() {
    exitcond10_fu_440_p2 = (!j_reg_258.read().is_01() || !x_O_w_read_reg_884.read().is_01())? sc_lv<1>(): sc_lv<1>(j_reg_258.read() == x_O_w_read_reg_884.read());
}

void deconv::thread_exitcond11_fu_403_p2() {
    exitcond11_fu_403_p2 = (!i_reg_247.read().is_01() || !x_O_h_read_reg_891.read().is_01())? sc_lv<1>(): sc_lv<1>(i_reg_247.read() == x_O_h_read_reg_891.read());
}

void deconv::thread_exitcond1_fu_392_p2() {
    exitcond1_fu_392_p2 = (!oc_reg_236.read().is_01() || !x_O_c_read_reg_879.read().is_01())? sc_lv<1>(): sc_lv<1>(oc_reg_236.read() == x_O_c_read_reg_879.read());
}

void deconv::thread_exitcond2_fu_657_p2() {
    exitcond2_fu_657_p2 = (!oh3_reg_348.read().is_01() || !x_O_h_read_reg_891.read().is_01())? sc_lv<1>(): sc_lv<1>(oh3_reg_348.read() == x_O_h_read_reg_891.read());
}

void deconv::thread_exitcond3_fu_765_p2() {
    exitcond3_fu_765_p2 = (!ow2_reg_381.read().is_01() || !x_O_w_read_reg_884.read().is_01())? sc_lv<1>(): sc_lv<1>(ow2_reg_381.read() == x_O_w_read_reg_884.read());
}

void deconv::thread_exitcond4_fu_694_p2() {
    exitcond4_fu_694_p2 = (!oh1_reg_359.read().is_01() || !x_O_h_read_reg_891.read().is_01())? sc_lv<1>(): sc_lv<1>(oh1_reg_359.read() == x_O_h_read_reg_891.read());
}

void deconv::thread_exitcond5_fu_564_p2() {
    exitcond5_fu_564_p2 = (!kw_reg_337.read().is_01() || !x_K_read_reg_873.read().is_01())? sc_lv<1>(): sc_lv<1>(kw_reg_337.read() == x_K_read_reg_873.read());
}

void deconv::thread_exitcond6_fu_516_p2() {
    exitcond6_fu_516_p2 = (!kh_reg_326.read().is_01() || !x_K_read_reg_873.read().is_01())? sc_lv<1>(): sc_lv<1>(kh_reg_326.read() == x_K_read_reg_873.read());
}

void deconv::thread_exitcond7_fu_505_p2() {
    exitcond7_fu_505_p2 = (!iw_reg_303.read().is_01() || !x_I_w_read_reg_903.read().is_01())? sc_lv<1>(): sc_lv<1>(iw_reg_303.read() == x_I_w_read_reg_903.read());
}

void deconv::thread_exitcond8_fu_489_p2() {
    exitcond8_fu_489_p2 = (!ih_reg_280.read().is_01() || !x_I_h_read_reg_908.read().is_01())? sc_lv<1>(): sc_lv<1>(ih_reg_280.read() == x_I_h_read_reg_908.read());
}

void deconv::thread_exitcond9_fu_473_p2() {
    exitcond9_fu_473_p2 = (!ic_reg_269.read().is_01() || !x_I_c_read_reg_898.read().is_01())? sc_lv<1>(): sc_lv<1>(ic_reg_269.read() == x_I_c_read_reg_898.read());
}

void deconv::thread_exitcond_fu_731_p2() {
    exitcond_fu_731_p2 = (!ow4_reg_370.read().is_01() || !x_O_w_read_reg_884.read().is_01())? sc_lv<1>(): sc_lv<1>(ow4_reg_370.read() == x_O_w_read_reg_884.read());
}

void deconv::thread_grp_fu_819_ap_start() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, mean_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, std_0_vld_out.read())))) {
        grp_fu_819_ap_start = ap_const_logic_1;
    } else {
        grp_fu_819_ap_start = ap_const_logic_0;
    }
}

void deconv::thread_grp_fu_819_ce() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state54.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state19.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()))) {
        grp_fu_819_ce = ap_const_logic_0;
    } else {
        grp_fu_819_ce = ap_const_logic_1;
    }
}

void deconv::thread_grp_fu_819_p0() {
    grp_fu_819_p0 = esl_concat<18,12>(a_assign_fu_798_p2.read(), ap_const_lv12_0);
}

void deconv::thread_i_1_fu_408_p2() {
    i_1_fu_408_p2 = (!i_reg_247.read().is_01() || !ap_const_lv6_1.is_01())? sc_lv<6>(): (sc_biguint<6>(i_reg_247.read()) + sc_biguint<6>(ap_const_lv6_1));
}

void deconv::thread_ic_1_fu_478_p2() {
    ic_1_fu_478_p2 = (!ic_reg_269.read().is_01() || !ap_const_lv6_1.is_01())? sc_lv<6>(): (sc_biguint<6>(ic_reg_269.read()) + sc_biguint<6>(ap_const_lv6_1));
}

void deconv::thread_icmp_fu_645_p2() {
    icmp_fu_645_p2 = (!tmp_32_fu_635_p4.read().is_01() || !ap_const_lv3_0.is_01())? sc_lv<1>(): (sc_bigint<3>(tmp_32_fu_635_p4.read()) > sc_bigint<3>(ap_const_lv3_0));
}

void deconv::thread_ih_1_fu_494_p2() {
    ih_1_fu_494_p2 = (!ih_reg_280.read().is_01() || !ap_const_lv6_1.is_01())? sc_lv<6>(): (sc_biguint<6>(ih_reg_280.read()) + sc_biguint<6>(ap_const_lv6_1));
}

void deconv::thread_in_r_0_ack_in() {
    in_r_0_ack_in = in_r_0_state.read()[1];
}

void deconv::thread_in_r_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, in_r_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, w_0_vld_out.read())))) {
        in_r_0_ack_out = ap_const_logic_1;
    } else {
        in_r_0_ack_out = ap_const_logic_0;
    }
}

void deconv::thread_in_r_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, in_r_0_sel.read())) {
        in_r_0_data_out = in_r_0_payload_B.read();
    } else {
        in_r_0_data_out = in_r_0_payload_A.read();
    }
}

void deconv::thread_in_r_0_load_A() {
    in_r_0_load_A = (in_r_0_state_cmp_full.read() & ~in_r_0_sel_wr.read());
}

void deconv::thread_in_r_0_load_B() {
    in_r_0_load_B = (in_r_0_sel_wr.read() & in_r_0_state_cmp_full.read());
}

void deconv::thread_in_r_0_sel() {
    in_r_0_sel = in_r_0_sel_rd.read();
}

void deconv::thread_in_r_0_state_cmp_full() {
    in_r_0_state_cmp_full =  (sc_logic) ((!in_r_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(in_r_0_state.read() != ap_const_lv2_1))[0];
}

void deconv::thread_in_r_0_vld_in() {
    in_r_0_vld_in = in_r_TVALID.read();
}

void deconv::thread_in_r_0_vld_out() {
    in_r_0_vld_out = in_r_0_state.read()[0];
}

void deconv::thread_in_r_TDATA_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        in_r_TDATA_blk_n = in_r_0_state.read()[0];
    } else {
        in_r_TDATA_blk_n = ap_const_logic_1;
    }
}

void deconv::thread_in_r_TREADY() {
    in_r_TREADY = in_r_0_state.read()[1];
}

void deconv::thread_iw_1_fu_510_p2() {
    iw_1_fu_510_p2 = (!iw_reg_303.read().is_01() || !ap_const_lv6_1.is_01())? sc_lv<6>(): (sc_biguint<6>(iw_reg_303.read()) + sc_biguint<6>(ap_const_lv6_1));
}

void deconv::thread_j_1_fu_445_p2() {
    j_1_fu_445_p2 = (!j_reg_258.read().is_01() || !ap_const_lv6_1.is_01())? sc_lv<6>(): (sc_biguint<6>(j_reg_258.read()) + sc_biguint<6>(ap_const_lv6_1));
}

void deconv::thread_kh_1_fu_521_p2() {
    kh_1_fu_521_p2 = (!kh_reg_326.read().is_01() || !ap_const_lv6_1.is_01())? sc_lv<6>(): (sc_biguint<6>(kh_reg_326.read()) + sc_biguint<6>(ap_const_lv6_1));
}

void deconv::thread_kw_1_fu_569_p2() {
    kw_1_fu_569_p2 = (!kw_reg_337.read().is_01() || !ap_const_lv6_1.is_01())? sc_lv<6>(): (sc_biguint<6>(kw_reg_337.read()) + sc_biguint<6>(ap_const_lv6_1));
}

void deconv::thread_mean_0_ack_in() {
    mean_0_ack_in = mean_0_state.read()[1];
}

void deconv::thread_mean_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, mean_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, std_0_vld_out.read())))) {
        mean_0_ack_out = ap_const_logic_1;
    } else {
        mean_0_ack_out = ap_const_logic_0;
    }
}

void deconv::thread_mean_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, mean_0_sel.read())) {
        mean_0_data_out = mean_0_payload_B.read();
    } else {
        mean_0_data_out = mean_0_payload_A.read();
    }
}

void deconv::thread_mean_0_load_A() {
    mean_0_load_A = (mean_0_state_cmp_full.read() & ~mean_0_sel_wr.read());
}

void deconv::thread_mean_0_load_B() {
    mean_0_load_B = (mean_0_sel_wr.read() & mean_0_state_cmp_full.read());
}

void deconv::thread_mean_0_sel() {
    mean_0_sel = mean_0_sel_rd.read();
}

void deconv::thread_mean_0_state_cmp_full() {
    mean_0_state_cmp_full =  (sc_logic) ((!mean_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(mean_0_state.read() != ap_const_lv2_1))[0];
}

void deconv::thread_mean_0_vld_in() {
    mean_0_vld_in = mean_TVALID.read();
}

void deconv::thread_mean_0_vld_out() {
    mean_0_vld_out = mean_0_state.read()[0];
}

void deconv::thread_mean_TDATA_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read())) {
        mean_TDATA_blk_n = mean_0_state.read()[0];
    } else {
        mean_TDATA_blk_n = ap_const_logic_1;
    }
}

void deconv::thread_mean_TREADY() {
    mean_TREADY = mean_0_state.read()[1];
}

void deconv::thread_next_mul1_fu_484_p2() {
    next_mul1_fu_484_p2 = (!phi_mul1_reg_291.read().is_01() || !x_S_read_reg_867.read().is_01())? sc_lv<6>(): (sc_biguint<6>(phi_mul1_reg_291.read()) + sc_biguint<6>(x_S_read_reg_867.read()));
}

void deconv::thread_next_mul_fu_500_p2() {
    next_mul_fu_500_p2 = (!phi_mul_reg_314.read().is_01() || !x_S_read_reg_867.read().is_01())? sc_lv<6>(): (sc_biguint<6>(phi_mul_reg_314.read()) + sc_biguint<6>(x_S_read_reg_867.read()));
}

void deconv::thread_oc_1_fu_397_p2() {
    oc_1_fu_397_p2 = (!oc_reg_236.read().is_01() || !ap_const_lv6_1.is_01())? sc_lv<6>(): (sc_biguint<6>(oc_reg_236.read()) + sc_biguint<6>(ap_const_lv6_1));
}

void deconv::thread_oh_1_fu_662_p2() {
    oh_1_fu_662_p2 = (!oh3_reg_348.read().is_01() || !ap_const_lv6_1.is_01())? sc_lv<6>(): (sc_biguint<6>(oh3_reg_348.read()) + sc_biguint<6>(ap_const_lv6_1));
}

void deconv::thread_oh_2_fu_533_p2() {
    oh_2_fu_533_p2 = (!tmp_14_fu_527_p2.read().is_01() || !x_P_read_reg_861.read().is_01())? sc_lv<6>(): (sc_biguint<6>(tmp_14_fu_527_p2.read()) - sc_biguint<6>(x_P_read_reg_861.read()));
}

void deconv::thread_oh_fu_699_p2() {
    oh_fu_699_p2 = (!oh1_reg_359.read().is_01() || !ap_const_lv6_1.is_01())? sc_lv<6>(): (sc_biguint<6>(oh1_reg_359.read()) + sc_biguint<6>(ap_const_lv6_1));
}

void deconv::thread_out_r_1_ack_in() {
    out_r_1_ack_in = out_r_1_state.read()[1];
}

void deconv::thread_out_r_1_ack_out() {
    out_r_1_ack_out = out_r_TREADY.read();
}

void deconv::thread_out_r_1_data_in() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state53.read())) {
        out_r_1_data_in = tmp_11_fu_845_p1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read())) {
        out_r_1_data_in = tmp_13_fu_760_p1.read();
    } else {
        out_r_1_data_in = "XXXXXXXXXXXXXXXXXXXXXXXX";
    }
}

void deconv::thread_out_r_1_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, out_r_1_sel.read())) {
        out_r_1_data_out = out_r_1_payload_B.read();
    } else {
        out_r_1_data_out = out_r_1_payload_A.read();
    }
}

void deconv::thread_out_r_1_load_A() {
    out_r_1_load_A = (out_r_1_state_cmp_full.read() & ~out_r_1_sel_wr.read());
}

void deconv::thread_out_r_1_load_B() {
    out_r_1_load_B = (out_r_1_sel_wr.read() & out_r_1_state_cmp_full.read());
}

void deconv::thread_out_r_1_sel() {
    out_r_1_sel = out_r_1_sel_rd.read();
}

void deconv::thread_out_r_1_state_cmp_full() {
    out_r_1_state_cmp_full =  (sc_logic) ((!out_r_1_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(out_r_1_state.read() != ap_const_lv2_1))[0];
}

void deconv::thread_out_r_1_vld_in() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && 
          esl_seteq<1,1,1>(out_r_1_ack_in.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state53.read()) && 
          esl_seteq<1,1,1>(out_r_1_ack_in.read(), ap_const_logic_1)))) {
        out_r_1_vld_in = ap_const_logic_1;
    } else {
        out_r_1_vld_in = ap_const_logic_0;
    }
}

void deconv::thread_out_r_1_vld_out() {
    out_r_1_vld_out = out_r_1_state.read()[0];
}

void deconv::thread_out_r_TDATA() {
    out_r_TDATA = out_r_1_data_out.read();
}

void deconv::thread_out_r_TDATA_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state53.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state54.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()))) {
        out_r_TDATA_blk_n = out_r_1_state.read()[1];
    } else {
        out_r_TDATA_blk_n = ap_const_logic_1;
    }
}

void deconv::thread_out_r_TVALID() {
    out_r_TVALID = out_r_1_state.read()[0];
}

void deconv::thread_ow_1_fu_736_p2() {
    ow_1_fu_736_p2 = (!ow4_reg_370.read().is_01() || !ap_const_lv6_1.is_01())? sc_lv<6>(): (sc_biguint<6>(ow4_reg_370.read()) + sc_biguint<6>(ap_const_lv6_1));
}

void deconv::thread_ow_2_fu_581_p2() {
    ow_2_fu_581_p2 = (!tmp_16_fu_575_p2.read().is_01() || !x_P_read_reg_861.read().is_01())? sc_lv<6>(): (sc_biguint<6>(tmp_16_fu_575_p2.read()) - sc_biguint<6>(x_P_read_reg_861.read()));
}

void deconv::thread_ow_fu_770_p2() {
    ow_fu_770_p2 = (!ow2_reg_381.read().is_01() || !ap_const_lv6_1.is_01())? sc_lv<6>(): (sc_biguint<6>(ow2_reg_381.read()) + sc_biguint<6>(ap_const_lv6_1));
}

void deconv::thread_p_shl2_cast_fu_430_p1() {
    p_shl2_cast_fu_430_p1 = esl_zext<11,8>(tmp_2_fu_422_p3.read());
}

void deconv::thread_p_shl4_cast_fu_554_p1() {
    p_shl4_cast_fu_554_p1 = esl_zext<11,8>(tmp_27_fu_546_p3.read());
}

void deconv::thread_p_shl6_cast_fu_721_p1() {
    p_shl6_cast_fu_721_p1 = esl_zext<11,8>(tmp_6_fu_713_p3.read());
}

void deconv::thread_p_shl8_cast_fu_684_p1() {
    p_shl8_cast_fu_684_p1 = esl_zext<11,8>(tmp_9_fu_676_p3.read());
}

void deconv::thread_std_0_ack_in() {
    std_0_ack_in = std_0_state.read()[1];
}

void deconv::thread_std_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, mean_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, std_0_vld_out.read())))) {
        std_0_ack_out = ap_const_logic_1;
    } else {
        std_0_ack_out = ap_const_logic_0;
    }
}

void deconv::thread_std_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, std_0_sel.read())) {
        std_0_data_out = std_0_payload_B.read();
    } else {
        std_0_data_out = std_0_payload_A.read();
    }
}

void deconv::thread_std_0_load_A() {
    std_0_load_A = (std_0_state_cmp_full.read() & ~std_0_sel_wr.read());
}

void deconv::thread_std_0_load_B() {
    std_0_load_B = (std_0_sel_wr.read() & std_0_state_cmp_full.read());
}

void deconv::thread_std_0_sel() {
    std_0_sel = std_0_sel_rd.read();
}

void deconv::thread_std_0_state_cmp_full() {
    std_0_state_cmp_full =  (sc_logic) ((!std_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(std_0_state.read() != ap_const_lv2_1))[0];
}

void deconv::thread_std_0_vld_in() {
    std_0_vld_in = std_TVALID.read();
}

void deconv::thread_std_0_vld_out() {
    std_0_vld_out = std_0_state.read()[0];
}

void deconv::thread_std_TDATA_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read())) {
        std_TDATA_blk_n = std_0_state.read()[0];
    } else {
        std_TDATA_blk_n = ap_const_logic_1;
    }
}

void deconv::thread_std_TREADY() {
    std_TREADY = std_0_state.read()[1];
}

void deconv::thread_temp_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read())) {
        temp_address0 =  (sc_lv<10>) (tmp_28_cast_fu_785_p1.read());
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read())) {
        temp_address0 =  (sc_lv<10>) (tmp_29_cast_fu_751_p1.read());
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) || 
                esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_0, icmp_reg_1012.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_1, tmp_21_reg_1016.read())) || 
                (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) && 
                 esl_seteq<1,1,1>(ap_const_lv1_1, icmp_reg_1012.read())))) {
        temp_address0 = temp_addr_3_reg_1002.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        temp_address0 =  (sc_lv<10>) (tmp_15_cast_fu_469_p1.read());
    } else {
        temp_address0 =  (sc_lv<10>) ("XXXXXXXXXX");
    }
}

void deconv::thread_temp_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
          !(esl_seteq<1,1,1>(ap_const_logic_0, in_r_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, w_0_vld_out.read()))) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(b_0_vld_out.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_reg_1012.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_21_reg_1016.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_reg_1012.read())))) {
        temp_ce0 = ap_const_logic_1;
    } else {
        temp_ce0 = ap_const_logic_0;
    }
}

void deconv::thread_temp_d0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_reg_1012.read()))) {
        temp_d0 = ap_const_lv20_1FFFF;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_0, icmp_reg_1012.read()) && 
                esl_seteq<1,1,1>(ap_const_lv1_1, tmp_21_reg_1016.read()))) {
        temp_d0 = ap_const_lv20_E0000;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read())) {
        temp_d0 = tmp_19_fu_628_p2.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        temp_d0 = tmp_3_fu_464_p1.read();
    } else {
        temp_d0 =  (sc_lv<20>) ("XXXXXXXXXXXXXXXXXXXX");
    }
}

void deconv::thread_temp_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state12.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
          esl_seteq<1,1,1>(b_0_vld_out.read(), ap_const_logic_1)) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_0, icmp_reg_1012.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, tmp_21_reg_1016.read())) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state13.read()) && 
          esl_seteq<1,1,1>(ap_const_lv1_1, icmp_reg_1012.read())))) {
        temp_we0 = ap_const_logic_1;
    } else {
        temp_we0 = ap_const_logic_0;
    }
}

void deconv::thread_tmp_10_cast_fu_742_p1() {
    tmp_10_cast_fu_742_p1 = esl_zext<11,6>(ow4_reg_370.read());
}

void deconv::thread_tmp_10_fu_688_p2() {
    tmp_10_fu_688_p2 = (!tmp_8_fu_668_p3.read().is_01() || !p_shl8_cast_fu_684_p1.read().is_01())? sc_lv<11>(): (sc_biguint<11>(tmp_8_fu_668_p3.read()) - sc_biguint<11>(p_shl8_cast_fu_684_p1.read()));
}

void deconv::thread_tmp_11_fu_845_p1() {
    tmp_11_fu_845_p1 = esl_zext<24,17>(y_assign_1_fu_837_p3.read());
}

void deconv::thread_tmp_12_fu_780_p2() {
    tmp_12_fu_780_p2 = (!tmp_7_reg_1041.read().is_01() || !tmp_7_cast_fu_776_p1.read().is_01())? sc_lv<11>(): (sc_biguint<11>(tmp_7_reg_1041.read()) + sc_biguint<11>(tmp_7_cast_fu_776_p1.read()));
}

void deconv::thread_tmp_13_fu_760_p1() {
    tmp_13_fu_760_p1 = esl_sext<24,18>(tmp_25_fu_756_p1.read());
}

void deconv::thread_tmp_14_fu_527_p2() {
    tmp_14_fu_527_p2 = (!kh_reg_326.read().is_01() || !phi_mul1_reg_291.read().is_01())? sc_lv<6>(): (sc_biguint<6>(kh_reg_326.read()) + sc_biguint<6>(phi_mul1_reg_291.read()));
}

void deconv::thread_tmp_15_cast_fu_469_p1() {
    tmp_15_cast_fu_469_p1 = esl_sext<32,11>(tmp_s_reg_942.read());
}

void deconv::thread_tmp_15_fu_790_p1() {
    tmp_15_fu_790_p1 = temp_q0.read().range(18-1, 0);
}

void deconv::thread_tmp_16_fu_575_p2() {
    tmp_16_fu_575_p2 = (!phi_mul_reg_314.read().is_01() || !kw_reg_337.read().is_01())? sc_lv<6>(): (sc_biguint<6>(phi_mul_reg_314.read()) + sc_biguint<6>(kw_reg_337.read()));
}

void deconv::thread_tmp_17_fu_625_p1() {
    tmp_17_fu_625_p1 = esl_sext<20,18>(tmp_2_i_reg_1007.read());
}

void deconv::thread_tmp_18_cast_fu_586_p1() {
    tmp_18_cast_fu_586_p1 = esl_zext<11,6>(ow_2_fu_581_p2.read());
}

void deconv::thread_tmp_18_fu_794_p1() {
    tmp_18_fu_794_p1 = mean_0_data_out.read().range(18-1, 0);
}

void deconv::thread_tmp_19_fu_628_p2() {
    tmp_19_fu_628_p2 = (!temp_q0.read().is_01() || !tmp_17_fu_625_p1.read().is_01())? sc_lv<20>(): (sc_biguint<20>(temp_q0.read()) + sc_bigint<20>(tmp_17_fu_625_p1.read()));
}

void deconv::thread_tmp_1_fu_414_p3() {
    tmp_1_fu_414_p3 = esl_concat<6,5>(i_reg_247.read(), ap_const_lv5_0);
}

void deconv::thread_tmp_20_fu_803_p1() {
    tmp_20_fu_803_p1 = std_0_data_out.read().range(18-1, 0);
}

void deconv::thread_tmp_21_fu_651_p2() {
    tmp_21_fu_651_p2 = (!tmp_19_fu_628_p2.read().is_01() || !ap_const_lv20_E0000.is_01())? sc_lv<1>(): (sc_bigint<20>(tmp_19_fu_628_p2.read()) < sc_bigint<20>(ap_const_lv20_E0000));
}

void deconv::thread_tmp_22_fu_825_p1() {
    tmp_22_fu_825_p1 = grp_fu_819_p2.read().range(17-1, 0);
}

void deconv::thread_tmp_23_fu_829_p3() {
    tmp_23_fu_829_p3 = grp_fu_819_p2.read().range(17, 17);
}

void deconv::thread_tmp_24_fu_746_p2() {
    tmp_24_fu_746_p2 = (!tmp_10_reg_1028.read().is_01() || !tmp_10_cast_fu_742_p1.read().is_01())? sc_lv<11>(): (sc_biguint<11>(tmp_10_reg_1028.read()) + sc_biguint<11>(tmp_10_cast_fu_742_p1.read()));
}

void deconv::thread_tmp_25_fu_756_p1() {
    tmp_25_fu_756_p1 = temp_q0.read().range(18-1, 0);
}

void deconv::thread_tmp_26_fu_538_p3() {
    tmp_26_fu_538_p3 = esl_concat<6,5>(oh_2_fu_533_p2.read(), ap_const_lv5_0);
}

void deconv::thread_tmp_27_fu_546_p3() {
    tmp_27_fu_546_p3 = esl_concat<6,2>(oh_2_fu_533_p2.read(), ap_const_lv2_0);
}

void deconv::thread_tmp_28_cast_fu_785_p1() {
    tmp_28_cast_fu_785_p1 = esl_sext<32,11>(tmp_12_fu_780_p2.read());
}

void deconv::thread_tmp_28_fu_558_p2() {
    tmp_28_fu_558_p2 = (!tmp_26_fu_538_p3.read().is_01() || !p_shl4_cast_fu_554_p1.read().is_01())? sc_lv<11>(): (sc_biguint<11>(tmp_26_fu_538_p3.read()) - sc_biguint<11>(p_shl4_cast_fu_554_p1.read()));
}

void deconv::thread_tmp_29_cast_fu_751_p1() {
    tmp_29_cast_fu_751_p1 = esl_sext<32,11>(tmp_24_fu_746_p2.read());
}

void deconv::thread_tmp_29_fu_600_p1() {
    tmp_29_fu_600_p1 = in_r_0_data_out.read().range(18-1, 0);
}

void deconv::thread_tmp_2_fu_422_p3() {
    tmp_2_fu_422_p3 = esl_concat<6,2>(i_reg_247.read(), ap_const_lv2_0);
}

void deconv::thread_tmp_30_fu_604_p1() {
    tmp_30_fu_604_p1 = w_0_data_out.read().range(18-1, 0);
}

void deconv::thread_tmp_31_fu_590_p2() {
    tmp_31_fu_590_p2 = (!tmp_18_cast_fu_586_p1.read().is_01() || !tmp_28_reg_989.read().is_01())? sc_lv<11>(): (sc_biguint<11>(tmp_18_cast_fu_586_p1.read()) + sc_biguint<11>(tmp_28_reg_989.read()));
}

void deconv::thread_tmp_32_fu_635_p4() {
    tmp_32_fu_635_p4 = tmp_19_fu_628_p2.read().range(19, 17);
}

void deconv::thread_tmp_33_cast_fu_595_p1() {
    tmp_33_cast_fu_595_p1 = esl_sext<32,11>(tmp_31_fu_590_p2.read());
}

void deconv::thread_tmp_3_fu_464_p1() {
    tmp_3_fu_464_p1 = esl_sext<20,18>(tmp_fu_460_p1.read());
}

void deconv::thread_tmp_4_fu_434_p2() {
    tmp_4_fu_434_p2 = (!tmp_1_fu_414_p3.read().is_01() || !p_shl2_cast_fu_430_p1.read().is_01())? sc_lv<11>(): (sc_biguint<11>(tmp_1_fu_414_p3.read()) - sc_biguint<11>(p_shl2_cast_fu_430_p1.read()));
}

void deconv::thread_tmp_5_cast_fu_451_p1() {
    tmp_5_cast_fu_451_p1 = esl_zext<11,6>(j_reg_258.read());
}

void deconv::thread_tmp_5_fu_705_p3() {
    tmp_5_fu_705_p3 = esl_concat<6,5>(oh1_reg_359.read(), ap_const_lv5_0);
}

void deconv::thread_tmp_6_fu_713_p3() {
    tmp_6_fu_713_p3 = esl_concat<6,2>(oh1_reg_359.read(), ap_const_lv2_0);
}

void deconv::thread_tmp_7_cast_fu_776_p1() {
    tmp_7_cast_fu_776_p1 = esl_zext<11,6>(ow2_reg_381.read());
}

void deconv::thread_tmp_7_fu_725_p2() {
    tmp_7_fu_725_p2 = (!tmp_5_fu_705_p3.read().is_01() || !p_shl6_cast_fu_721_p1.read().is_01())? sc_lv<11>(): (sc_biguint<11>(tmp_5_fu_705_p3.read()) - sc_biguint<11>(p_shl6_cast_fu_721_p1.read()));
}

void deconv::thread_tmp_8_fu_668_p3() {
    tmp_8_fu_668_p3 = esl_concat<6,5>(oh3_reg_348.read(), ap_const_lv5_0);
}

void deconv::thread_tmp_9_fu_676_p3() {
    tmp_9_fu_676_p3 = esl_concat<6,2>(oh3_reg_348.read(), ap_const_lv2_0);
}

void deconv::thread_tmp_fu_460_p1() {
    tmp_fu_460_p1 = b_0_data_out.read().range(18-1, 0);
}

void deconv::thread_tmp_s_fu_455_p2() {
    tmp_s_fu_455_p2 = (!tmp_4_reg_929.read().is_01() || !tmp_5_cast_fu_451_p1.read().is_01())? sc_lv<11>(): (sc_biguint<11>(tmp_4_reg_929.read()) + sc_biguint<11>(tmp_5_cast_fu_451_p1.read()));
}

void deconv::thread_w_0_ack_in() {
    w_0_ack_in = w_0_state.read()[1];
}

void deconv::thread_w_0_ack_out() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && 
         !(esl_seteq<1,1,1>(ap_const_logic_0, in_r_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, w_0_vld_out.read())))) {
        w_0_ack_out = ap_const_logic_1;
    } else {
        w_0_ack_out = ap_const_logic_0;
    }
}

void deconv::thread_w_0_data_out() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, w_0_sel.read())) {
        w_0_data_out = w_0_payload_B.read();
    } else {
        w_0_data_out = w_0_payload_A.read();
    }
}

void deconv::thread_w_0_load_A() {
    w_0_load_A = (w_0_state_cmp_full.read() & ~w_0_sel_wr.read());
}

void deconv::thread_w_0_load_B() {
    w_0_load_B = (w_0_sel_wr.read() & w_0_state_cmp_full.read());
}

void deconv::thread_w_0_sel() {
    w_0_sel = w_0_sel_rd.read();
}

void deconv::thread_w_0_state_cmp_full() {
    w_0_state_cmp_full =  (sc_logic) ((!w_0_state.read().is_01() || !ap_const_lv2_1.is_01())? sc_lv<1>(): sc_lv<1>(w_0_state.read() != ap_const_lv2_1))[0];
}

void deconv::thread_w_0_vld_in() {
    w_0_vld_in = w_TVALID.read();
}

void deconv::thread_w_0_vld_out() {
    w_0_vld_out = w_0_state.read()[0];
}

void deconv::thread_w_TDATA_blk_n() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read())) {
        w_TDATA_blk_n = w_0_state.read()[0];
    } else {
        w_TDATA_blk_n = ap_const_logic_1;
    }
}

void deconv::thread_w_TREADY() {
    w_TREADY = w_0_state.read()[1];
}

void deconv::thread_y_assign_1_fu_837_p3() {
    y_assign_1_fu_837_p3 = (!tmp_23_fu_829_p3.read()[0].is_01())? sc_lv<17>(): ((tmp_23_fu_829_p3.read()[0].to_bool())? ap_const_lv17_0: tmp_22_fu_825_p1.read());
}

void deconv::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(out_r_1_ack_in.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_lv1_1, exitcond1_fu_392_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(out_r_1_ack_in.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond1_fu_392_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, exitcond11_fu_403_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state6;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, exitcond10_fu_440_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(b_0_vld_out.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 32 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, exitcond9_fu_473_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state14;
            } else {
                ap_NS_fsm = ap_ST_fsm_state7;
            }
            break;
        case 64 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, exitcond8_fu_489_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state6;
            } else {
                ap_NS_fsm = ap_ST_fsm_state8;
            }
            break;
        case 128 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, exitcond7_fu_505_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state7;
            } else {
                ap_NS_fsm = ap_ST_fsm_state9;
            }
            break;
        case 256 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, exitcond6_fu_516_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state8;
            } else {
                ap_NS_fsm = ap_ST_fsm_state10;
            }
            break;
        case 512 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state10.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, exitcond5_fu_564_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state9;
            } else {
                ap_NS_fsm = ap_ST_fsm_state11;
            }
            break;
        case 1024 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state11.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, in_r_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, w_0_vld_out.read())))) {
                ap_NS_fsm = ap_ST_fsm_state12;
            } else {
                ap_NS_fsm = ap_ST_fsm_state11;
            }
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 8192 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && ((esl_seteq<1,1,1>(ap_const_lv1_0, x_norm_read_reg_857.read()) && 
   esl_seteq<1,1,1>(ap_const_lv1_1, exitcond2_fu_657_p2.read())) || 
  (esl_seteq<1,1,1>(ap_const_lv1_1, x_norm_read_reg_857.read()) && 
   esl_seteq<1,1,1>(ap_const_lv1_1, exitcond4_fu_694_p2.read()))))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state14.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, x_norm_read_reg_857.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, exitcond4_fu_694_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state18;
            } else {
                ap_NS_fsm = ap_ST_fsm_state15;
            }
            break;
        case 16384 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state15.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, exitcond_fu_731_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state14;
            } else {
                ap_NS_fsm = ap_ST_fsm_state16;
            }
            break;
        case 32768 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state16.read()) && esl_seteq<1,1,1>(out_r_1_ack_in.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state17;
            } else {
                ap_NS_fsm = ap_ST_fsm_state16;
            }
            break;
        case 65536 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state17.read()) && esl_seteq<1,1,1>(out_r_1_ack_in.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state15;
            } else {
                ap_NS_fsm = ap_ST_fsm_state17;
            }
            break;
        case 131072 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state18.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, exitcond3_fu_765_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state14;
            } else {
                ap_NS_fsm = ap_ST_fsm_state19;
            }
            break;
        case 262144 : 
            ap_NS_fsm = ap_ST_fsm_state20;
            break;
        case 524288 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state20.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, mean_0_vld_out.read()) || esl_seteq<1,1,1>(ap_const_logic_0, std_0_vld_out.read())))) {
                ap_NS_fsm = ap_ST_fsm_state21;
            } else {
                ap_NS_fsm = ap_ST_fsm_state20;
            }
            break;
        case 1048576 : 
            ap_NS_fsm = ap_ST_fsm_state22;
            break;
        case 2097152 : 
            ap_NS_fsm = ap_ST_fsm_state23;
            break;
        case 4194304 : 
            ap_NS_fsm = ap_ST_fsm_state24;
            break;
        case 8388608 : 
            ap_NS_fsm = ap_ST_fsm_state25;
            break;
        case 16777216 : 
            ap_NS_fsm = ap_ST_fsm_state26;
            break;
        case 33554432 : 
            ap_NS_fsm = ap_ST_fsm_state27;
            break;
        case 67108864 : 
            ap_NS_fsm = ap_ST_fsm_state28;
            break;
        case 134217728 : 
            ap_NS_fsm = ap_ST_fsm_state29;
            break;
        case 268435456 : 
            ap_NS_fsm = ap_ST_fsm_state30;
            break;
        case 536870912 : 
            ap_NS_fsm = ap_ST_fsm_state31;
            break;
        case 1073741824 : 
            ap_NS_fsm = ap_ST_fsm_state32;
            break;
        case 2147483648 : 
            ap_NS_fsm = ap_ST_fsm_state33;
            break;
        case 4294967296 : 
            ap_NS_fsm = ap_ST_fsm_state34;
            break;
        case 8589934592 : 
            ap_NS_fsm = ap_ST_fsm_state35;
            break;
        case 17179869184 : 
            ap_NS_fsm = ap_ST_fsm_state36;
            break;
        case 34359738368 : 
            ap_NS_fsm = ap_ST_fsm_state37;
            break;
        case 68719476736 : 
            ap_NS_fsm = ap_ST_fsm_state38;
            break;
        case 137438953472 : 
            ap_NS_fsm = ap_ST_fsm_state39;
            break;
        case 274877906944 : 
            ap_NS_fsm = ap_ST_fsm_state40;
            break;
        case 549755813888 : 
            ap_NS_fsm = ap_ST_fsm_state41;
            break;
        case 1099511627776 : 
            ap_NS_fsm = ap_ST_fsm_state42;
            break;
        case 2199023255552 : 
            ap_NS_fsm = ap_ST_fsm_state43;
            break;
        case 4398046511104 : 
            ap_NS_fsm = ap_ST_fsm_state44;
            break;
        case 8796093022208 : 
            ap_NS_fsm = ap_ST_fsm_state45;
            break;
        case 17592186044416 : 
            ap_NS_fsm = ap_ST_fsm_state46;
            break;
        case 35184372088832 : 
            ap_NS_fsm = ap_ST_fsm_state47;
            break;
        case 70368744177664 : 
            ap_NS_fsm = ap_ST_fsm_state48;
            break;
        case 140737488355328 : 
            ap_NS_fsm = ap_ST_fsm_state49;
            break;
        case 281474976710656 : 
            ap_NS_fsm = ap_ST_fsm_state50;
            break;
        case 562949953421312 : 
            ap_NS_fsm = ap_ST_fsm_state51;
            break;
        case 1125899906842624 : 
            ap_NS_fsm = ap_ST_fsm_state52;
            break;
        case 2251799813685248 : 
            ap_NS_fsm = ap_ST_fsm_state53;
            break;
        case 4503599627370496 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state53.read()) && esl_seteq<1,1,1>(out_r_1_ack_in.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state54;
            } else {
                ap_NS_fsm = ap_ST_fsm_state53;
            }
            break;
        case 9007199254740992 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state54.read()) && esl_seteq<1,1,1>(out_r_1_ack_in.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state18;
            } else {
                ap_NS_fsm = ap_ST_fsm_state54;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<54>) ("XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX");
            break;
    }
}

void deconv::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_r_TDATA\" :  \"" << in_r_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"in_r_TVALID\" :  \"" << in_r_TVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"in_r_TREADY\" :  \"" << in_r_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r_TDATA\" :  \"" << out_r_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"out_r_TVALID\" :  \"" << out_r_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"out_r_TREADY\" :  \"" << out_r_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"w_TDATA\" :  \"" << w_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"w_TVALID\" :  \"" << w_TVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"w_TREADY\" :  \"" << w_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"b_TDATA\" :  \"" << b_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"b_TVALID\" :  \"" << b_TVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"b_TREADY\" :  \"" << b_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"mean_TDATA\" :  \"" << mean_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"mean_TVALID\" :  \"" << mean_TVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"mean_TREADY\" :  \"" << mean_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"std_TDATA\" :  \"" << std_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"std_TVALID\" :  \"" << std_TVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"std_TREADY\" :  \"" << std_TREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_AWVALID\" :  \"" << s_axi_CTRL_BUS_AWVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BUS_AWREADY\" :  \"" << s_axi_CTRL_BUS_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_AWADDR\" :  \"" << s_axi_CTRL_BUS_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_WVALID\" :  \"" << s_axi_CTRL_BUS_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BUS_WREADY\" :  \"" << s_axi_CTRL_BUS_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_WDATA\" :  \"" << s_axi_CTRL_BUS_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_WSTRB\" :  \"" << s_axi_CTRL_BUS_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_ARVALID\" :  \"" << s_axi_CTRL_BUS_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BUS_ARREADY\" :  \"" << s_axi_CTRL_BUS_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_ARADDR\" :  \"" << s_axi_CTRL_BUS_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BUS_RVALID\" :  \"" << s_axi_CTRL_BUS_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_RREADY\" :  \"" << s_axi_CTRL_BUS_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BUS_RDATA\" :  \"" << s_axi_CTRL_BUS_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BUS_RRESP\" :  \"" << s_axi_CTRL_BUS_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BUS_BVALID\" :  \"" << s_axi_CTRL_BUS_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_CTRL_BUS_BREADY\" :  \"" << s_axi_CTRL_BUS_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_CTRL_BUS_BRESP\" :  \"" << s_axi_CTRL_BUS_BRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

