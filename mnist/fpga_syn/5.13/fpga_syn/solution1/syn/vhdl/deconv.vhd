-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.1
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity deconv is
generic (
    C_S_AXI_CTRL_BUS_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_CTRL_BUS_DATA_WIDTH : INTEGER := 32 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    in_r_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
    in_r_TVALID : IN STD_LOGIC;
    in_r_TREADY : OUT STD_LOGIC;
    out_r_TDATA : OUT STD_LOGIC_VECTOR (23 downto 0);
    out_r_TVALID : OUT STD_LOGIC;
    out_r_TREADY : IN STD_LOGIC;
    w_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
    w_TVALID : IN STD_LOGIC;
    w_TREADY : OUT STD_LOGIC;
    b_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
    b_TVALID : IN STD_LOGIC;
    b_TREADY : OUT STD_LOGIC;
    mean_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
    mean_TVALID : IN STD_LOGIC;
    mean_TREADY : OUT STD_LOGIC;
    std_TDATA : IN STD_LOGIC_VECTOR (23 downto 0);
    std_TVALID : IN STD_LOGIC;
    std_TREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_WVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_CTRL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_CTRL_BUS_RREADY : IN STD_LOGIC;
    s_axi_CTRL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CTRL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_CTRL_BUS_BREADY : IN STD_LOGIC;
    s_axi_CTRL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of deconv is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "deconv,hls_ip_2017_1,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.703750,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=1,HLS_SYN_FF=1207,HLS_SYN_LUT=1778}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (53 downto 0) := "000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (53 downto 0) := "000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (53 downto 0) := "000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (53 downto 0) := "000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (53 downto 0) := "000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (53 downto 0) := "000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (53 downto 0) := "000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (53 downto 0) := "000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (53 downto 0) := "000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (53 downto 0) := "000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (53 downto 0) := "001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (53 downto 0) := "010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (53 downto 0) := "100000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv20_E0000 : STD_LOGIC_VECTOR (19 downto 0) := "11100000000000000000";
    constant ap_const_lv20_1FFFF : STD_LOGIC_VECTOR (19 downto 0) := "00011111111111111111";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (53 downto 0) := "000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal x_I_h : STD_LOGIC_VECTOR (5 downto 0);
    signal x_I_w : STD_LOGIC_VECTOR (5 downto 0);
    signal x_I_c : STD_LOGIC_VECTOR (5 downto 0);
    signal x_O_h : STD_LOGIC_VECTOR (5 downto 0);
    signal x_O_w : STD_LOGIC_VECTOR (5 downto 0);
    signal x_O_c : STD_LOGIC_VECTOR (5 downto 0);
    signal x_K : STD_LOGIC_VECTOR (5 downto 0);
    signal x_S : STD_LOGIC_VECTOR (5 downto 0);
    signal x_P : STD_LOGIC_VECTOR (5 downto 0);
    signal x_norm : STD_LOGIC_VECTOR (0 downto 0);
    signal in_r_0_data_out : STD_LOGIC_VECTOR (23 downto 0);
    signal in_r_0_vld_in : STD_LOGIC;
    signal in_r_0_vld_out : STD_LOGIC;
    signal in_r_0_ack_in : STD_LOGIC;
    signal in_r_0_ack_out : STD_LOGIC;
    signal in_r_0_payload_A : STD_LOGIC_VECTOR (23 downto 0);
    signal in_r_0_payload_B : STD_LOGIC_VECTOR (23 downto 0);
    signal in_r_0_sel_rd : STD_LOGIC := '0';
    signal in_r_0_sel_wr : STD_LOGIC := '0';
    signal in_r_0_sel : STD_LOGIC;
    signal in_r_0_load_A : STD_LOGIC;
    signal in_r_0_load_B : STD_LOGIC;
    signal in_r_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal in_r_0_state_cmp_full : STD_LOGIC;
    signal out_r_1_data_in : STD_LOGIC_VECTOR (23 downto 0);
    signal out_r_1_data_out : STD_LOGIC_VECTOR (23 downto 0);
    signal out_r_1_vld_in : STD_LOGIC;
    signal out_r_1_vld_out : STD_LOGIC;
    signal out_r_1_ack_in : STD_LOGIC;
    signal out_r_1_ack_out : STD_LOGIC;
    signal out_r_1_payload_A : STD_LOGIC_VECTOR (23 downto 0);
    signal out_r_1_payload_B : STD_LOGIC_VECTOR (23 downto 0);
    signal out_r_1_sel_rd : STD_LOGIC := '0';
    signal out_r_1_sel_wr : STD_LOGIC := '0';
    signal out_r_1_sel : STD_LOGIC;
    signal out_r_1_load_A : STD_LOGIC;
    signal out_r_1_load_B : STD_LOGIC;
    signal out_r_1_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal out_r_1_state_cmp_full : STD_LOGIC;
    signal w_0_data_out : STD_LOGIC_VECTOR (23 downto 0);
    signal w_0_vld_in : STD_LOGIC;
    signal w_0_vld_out : STD_LOGIC;
    signal w_0_ack_in : STD_LOGIC;
    signal w_0_ack_out : STD_LOGIC;
    signal w_0_payload_A : STD_LOGIC_VECTOR (23 downto 0);
    signal w_0_payload_B : STD_LOGIC_VECTOR (23 downto 0);
    signal w_0_sel_rd : STD_LOGIC := '0';
    signal w_0_sel_wr : STD_LOGIC := '0';
    signal w_0_sel : STD_LOGIC;
    signal w_0_load_A : STD_LOGIC;
    signal w_0_load_B : STD_LOGIC;
    signal w_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal w_0_state_cmp_full : STD_LOGIC;
    signal b_0_data_out : STD_LOGIC_VECTOR (23 downto 0);
    signal b_0_vld_in : STD_LOGIC;
    signal b_0_vld_out : STD_LOGIC;
    signal b_0_ack_in : STD_LOGIC;
    signal b_0_ack_out : STD_LOGIC;
    signal b_0_payload_A : STD_LOGIC_VECTOR (23 downto 0);
    signal b_0_payload_B : STD_LOGIC_VECTOR (23 downto 0);
    signal b_0_sel_rd : STD_LOGIC := '0';
    signal b_0_sel_wr : STD_LOGIC := '0';
    signal b_0_sel : STD_LOGIC;
    signal b_0_load_A : STD_LOGIC;
    signal b_0_load_B : STD_LOGIC;
    signal b_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal b_0_state_cmp_full : STD_LOGIC;
    signal mean_0_data_out : STD_LOGIC_VECTOR (23 downto 0);
    signal mean_0_vld_in : STD_LOGIC;
    signal mean_0_vld_out : STD_LOGIC;
    signal mean_0_ack_in : STD_LOGIC;
    signal mean_0_ack_out : STD_LOGIC;
    signal mean_0_payload_A : STD_LOGIC_VECTOR (23 downto 0);
    signal mean_0_payload_B : STD_LOGIC_VECTOR (23 downto 0);
    signal mean_0_sel_rd : STD_LOGIC := '0';
    signal mean_0_sel_wr : STD_LOGIC := '0';
    signal mean_0_sel : STD_LOGIC;
    signal mean_0_load_A : STD_LOGIC;
    signal mean_0_load_B : STD_LOGIC;
    signal mean_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal mean_0_state_cmp_full : STD_LOGIC;
    signal std_0_data_out : STD_LOGIC_VECTOR (23 downto 0);
    signal std_0_vld_in : STD_LOGIC;
    signal std_0_vld_out : STD_LOGIC;
    signal std_0_ack_in : STD_LOGIC;
    signal std_0_ack_out : STD_LOGIC;
    signal std_0_payload_A : STD_LOGIC_VECTOR (23 downto 0);
    signal std_0_payload_B : STD_LOGIC_VECTOR (23 downto 0);
    signal std_0_sel_rd : STD_LOGIC := '0';
    signal std_0_sel_wr : STD_LOGIC := '0';
    signal std_0_sel : STD_LOGIC;
    signal std_0_load_A : STD_LOGIC;
    signal std_0_load_B : STD_LOGIC;
    signal std_0_state : STD_LOGIC_VECTOR (1 downto 0) := "00";
    signal std_0_state_cmp_full : STD_LOGIC;
    signal temp_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal temp_ce0 : STD_LOGIC;
    signal temp_we0 : STD_LOGIC;
    signal temp_d0 : STD_LOGIC_VECTOR (19 downto 0);
    signal temp_q0 : STD_LOGIC_VECTOR (19 downto 0);
    signal in_r_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal out_r_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal w_TDATA_blk_n : STD_LOGIC;
    signal b_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal mean_TDATA_blk_n : STD_LOGIC;
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal std_TDATA_blk_n : STD_LOGIC;
    signal x_norm_read_reg_857 : STD_LOGIC_VECTOR (0 downto 0);
    signal x_P_read_reg_861 : STD_LOGIC_VECTOR (5 downto 0);
    signal x_S_read_reg_867 : STD_LOGIC_VECTOR (5 downto 0);
    signal x_K_read_reg_873 : STD_LOGIC_VECTOR (5 downto 0);
    signal x_O_c_read_reg_879 : STD_LOGIC_VECTOR (5 downto 0);
    signal x_O_w_read_reg_884 : STD_LOGIC_VECTOR (5 downto 0);
    signal x_O_h_read_reg_891 : STD_LOGIC_VECTOR (5 downto 0);
    signal x_I_c_read_reg_898 : STD_LOGIC_VECTOR (5 downto 0);
    signal x_I_w_read_reg_903 : STD_LOGIC_VECTOR (5 downto 0);
    signal x_I_h_read_reg_908 : STD_LOGIC_VECTOR (5 downto 0);
    signal oc_1_fu_397_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal oc_1_reg_916 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_1_fu_408_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_1_reg_924 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal tmp_4_fu_434_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_4_reg_929 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond11_fu_403_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_1_fu_445_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal j_1_reg_937 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_s_fu_455_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_s_reg_942 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond10_fu_440_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ic_1_fu_478_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ic_1_reg_950 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal next_mul1_fu_484_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal next_mul1_reg_955 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ih_1_fu_494_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ih_1_reg_963 : STD_LOGIC_VECTOR (5 downto 0);
    signal next_mul_fu_500_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal next_mul_reg_968 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal iw_1_fu_510_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal iw_1_reg_976 : STD_LOGIC_VECTOR (5 downto 0);
    signal kh_1_fu_521_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal kh_1_reg_984 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_28_fu_558_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_28_reg_989 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond6_fu_516_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal kw_1_fu_569_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal kw_1_reg_997 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal temp_addr_3_reg_1002 : STD_LOGIC_VECTOR (9 downto 0);
    signal exitcond5_fu_564_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_i_reg_1007 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_block_state11 : BOOLEAN;
    signal icmp_fu_645_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_reg_1012 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal tmp_21_fu_651_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_reg_1016 : STD_LOGIC_VECTOR (0 downto 0);
    signal oh_1_fu_662_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal oh_1_reg_1023 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal tmp_10_fu_688_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_10_reg_1028 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond2_fu_657_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal oh_fu_699_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal oh_reg_1036 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_7_fu_725_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_7_reg_1041 : STD_LOGIC_VECTOR (10 downto 0);
    signal exitcond4_fu_694_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ow_1_fu_736_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ow_1_reg_1049 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal exitcond_fu_731_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_fu_760_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal ow_fu_770_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ow_reg_1067 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal exitcond3_fu_765_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_15_fu_790_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_15_reg_1077 : STD_LOGIC_VECTOR (17 downto 0);
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_block_state20 : BOOLEAN;
    signal tmp_11_fu_845_p1 : STD_LOGIC_VECTOR (23 downto 0);
    signal oc_reg_236 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_reg_247 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond1_fu_392_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_reg_258 : STD_LOGIC_VECTOR (5 downto 0);
    signal ic_reg_269 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond8_fu_489_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ih_reg_280 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond7_fu_505_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond9_fu_473_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal phi_mul1_reg_291 : STD_LOGIC_VECTOR (5 downto 0);
    signal iw_reg_303 : STD_LOGIC_VECTOR (5 downto 0);
    signal phi_mul_reg_314 : STD_LOGIC_VECTOR (5 downto 0);
    signal kh_reg_326 : STD_LOGIC_VECTOR (5 downto 0);
    signal kw_reg_337 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal oh3_reg_348 : STD_LOGIC_VECTOR (5 downto 0);
    signal oh1_reg_359 : STD_LOGIC_VECTOR (5 downto 0);
    signal ow4_reg_370 : STD_LOGIC_VECTOR (5 downto 0);
    signal ow2_reg_381 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_15_cast_fu_469_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_33_cast_fu_595_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_29_cast_fu_751_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_28_cast_fu_785_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_464_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_19_fu_628_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_2_fu_422_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_1_fu_414_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl2_cast_fu_430_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_5_cast_fu_451_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_fu_460_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_14_fu_527_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal oh_2_fu_533_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_27_fu_546_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_26_fu_538_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl4_cast_fu_554_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_16_fu_575_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ow_2_fu_581_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_18_cast_fu_586_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_31_fu_590_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_29_fu_600_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_30_fu_604_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal c_fu_850_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_17_fu_625_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_32_fu_635_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_9_fu_676_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_8_fu_668_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl8_cast_fu_684_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_6_fu_713_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_5_fu_705_p3 : STD_LOGIC_VECTOR (10 downto 0);
    signal p_shl6_cast_fu_721_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_10_cast_fu_742_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_24_fu_746_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_25_fu_756_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_7_cast_fu_776_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_12_fu_780_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_18_fu_794_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal a_assign_fu_798_p2 : STD_LOGIC_VECTOR (17 downto 0);
    signal tmp_20_fu_803_p1 : STD_LOGIC_VECTOR (17 downto 0);
    signal grp_fu_819_p0 : STD_LOGIC_VECTOR (29 downto 0);
    signal grp_fu_819_p2 : STD_LOGIC_VECTOR (29 downto 0);
    signal tmp_23_fu_829_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_fu_825_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal y_assign_1_fu_837_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal grp_fu_819_ap_start : STD_LOGIC;
    signal grp_fu_819_ap_done : STD_LOGIC;
    signal grp_fu_819_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (53 downto 0);

    component deconv_sdiv_30ns_bkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (29 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component deconv_mul_mul_18cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (17 downto 0);
        din1 : IN STD_LOGIC_VECTOR (17 downto 0);
        dout : OUT STD_LOGIC_VECTOR (29 downto 0) );
    end component;


    component deconv_temp IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (19 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (19 downto 0) );
    end component;


    component deconv_CTRL_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        x_I_h : OUT STD_LOGIC_VECTOR (5 downto 0);
        x_I_w : OUT STD_LOGIC_VECTOR (5 downto 0);
        x_I_c : OUT STD_LOGIC_VECTOR (5 downto 0);
        x_O_h : OUT STD_LOGIC_VECTOR (5 downto 0);
        x_O_w : OUT STD_LOGIC_VECTOR (5 downto 0);
        x_O_c : OUT STD_LOGIC_VECTOR (5 downto 0);
        x_K : OUT STD_LOGIC_VECTOR (5 downto 0);
        x_S : OUT STD_LOGIC_VECTOR (5 downto 0);
        x_P : OUT STD_LOGIC_VECTOR (5 downto 0);
        x_norm : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    temp_U : component deconv_temp
    generic map (
        DataWidth => 20,
        AddressRange => 784,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        address0 => temp_address0,
        ce0 => temp_ce0,
        we0 => temp_we0,
        d0 => temp_d0,
        q0 => temp_q0);

    deconv_CTRL_BUS_s_axi_U : component deconv_CTRL_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CTRL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CTRL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CTRL_BUS_AWVALID,
        AWREADY => s_axi_CTRL_BUS_AWREADY,
        AWADDR => s_axi_CTRL_BUS_AWADDR,
        WVALID => s_axi_CTRL_BUS_WVALID,
        WREADY => s_axi_CTRL_BUS_WREADY,
        WDATA => s_axi_CTRL_BUS_WDATA,
        WSTRB => s_axi_CTRL_BUS_WSTRB,
        ARVALID => s_axi_CTRL_BUS_ARVALID,
        ARREADY => s_axi_CTRL_BUS_ARREADY,
        ARADDR => s_axi_CTRL_BUS_ARADDR,
        RVALID => s_axi_CTRL_BUS_RVALID,
        RREADY => s_axi_CTRL_BUS_RREADY,
        RDATA => s_axi_CTRL_BUS_RDATA,
        RRESP => s_axi_CTRL_BUS_RRESP,
        BVALID => s_axi_CTRL_BUS_BVALID,
        BREADY => s_axi_CTRL_BUS_BREADY,
        BRESP => s_axi_CTRL_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        x_I_h => x_I_h,
        x_I_w => x_I_w,
        x_I_c => x_I_c,
        x_O_h => x_O_h,
        x_O_w => x_O_w,
        x_O_c => x_O_c,
        x_K => x_K,
        x_S => x_S,
        x_P => x_P,
        x_norm => x_norm);

    deconv_sdiv_30ns_bkb_U0 : component deconv_sdiv_30ns_bkb
    generic map (
        ID => 1,
        NUM_STAGE => 34,
        din0_WIDTH => 30,
        din1_WIDTH => 18,
        dout_WIDTH => 30)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        start => grp_fu_819_ap_start,
        done => grp_fu_819_ap_done,
        din0 => grp_fu_819_p0,
        din1 => tmp_20_fu_803_p1,
        ce => grp_fu_819_ce,
        dout => grp_fu_819_p2);

    deconv_mul_mul_18cud_U1 : component deconv_mul_mul_18cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 18,
        din1_WIDTH => 18,
        dout_WIDTH => 30)
    port map (
        din0 => tmp_30_fu_604_p1,
        din1 => tmp_29_fu_600_p1,
        dout => c_fu_850_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    b_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                b_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = b_0_ack_out) and (ap_const_logic_1 = b_0_vld_out))) then 
                                        b_0_sel_rd <= not(b_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    b_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                b_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = b_0_vld_in) and (ap_const_logic_1 = b_0_ack_in))) then 
                                        b_0_sel_wr <= not(b_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    b_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                b_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = b_0_vld_in) and (ap_const_logic_1 = b_0_ack_out) and (ap_const_lv2_3 = b_0_state)) or ((ap_const_logic_0 = b_0_vld_in) and (ap_const_lv2_2 = b_0_state)))) then 
                    b_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = b_0_vld_in) and (ap_const_logic_0 = b_0_ack_out) and (ap_const_lv2_3 = b_0_state)) or ((ap_const_logic_0 = b_0_ack_out) and (ap_const_lv2_1 = b_0_state)))) then 
                    b_0_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = b_0_vld_in) and (ap_const_lv2_2 = b_0_state)) or ((ap_const_logic_1 = b_0_ack_out) and (ap_const_lv2_1 = b_0_state)) or ((ap_const_lv2_3 = b_0_state) and not(((ap_const_logic_1 = b_0_vld_in) and (ap_const_logic_0 = b_0_ack_out))) and not(((ap_const_logic_0 = b_0_vld_in) and (ap_const_logic_1 = b_0_ack_out)))))) then 
                    b_0_state <= ap_const_lv2_3;
                else 
                    b_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    in_r_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_r_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = in_r_0_ack_out) and (ap_const_logic_1 = in_r_0_vld_out))) then 
                                        in_r_0_sel_rd <= not(in_r_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    in_r_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_r_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = in_r_0_vld_in) and (ap_const_logic_1 = in_r_0_ack_in))) then 
                                        in_r_0_sel_wr <= not(in_r_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    in_r_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                in_r_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = in_r_0_vld_in) and (ap_const_logic_1 = in_r_0_ack_out) and (in_r_0_state = ap_const_lv2_3)) or ((ap_const_logic_0 = in_r_0_vld_in) and (in_r_0_state = ap_const_lv2_2)))) then 
                    in_r_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = in_r_0_vld_in) and (ap_const_logic_0 = in_r_0_ack_out) and (in_r_0_state = ap_const_lv2_3)) or ((ap_const_logic_0 = in_r_0_ack_out) and (in_r_0_state = ap_const_lv2_1)))) then 
                    in_r_0_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = in_r_0_vld_in) and (in_r_0_state = ap_const_lv2_2)) or ((ap_const_logic_1 = in_r_0_ack_out) and (in_r_0_state = ap_const_lv2_1)) or ((in_r_0_state = ap_const_lv2_3) and not(((ap_const_logic_1 = in_r_0_vld_in) and (ap_const_logic_0 = in_r_0_ack_out))) and not(((ap_const_logic_0 = in_r_0_vld_in) and (ap_const_logic_1 = in_r_0_ack_out)))))) then 
                    in_r_0_state <= ap_const_lv2_3;
                else 
                    in_r_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    mean_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                mean_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = mean_0_ack_out) and (ap_const_logic_1 = mean_0_vld_out))) then 
                                        mean_0_sel_rd <= not(mean_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    mean_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                mean_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = mean_0_vld_in) and (ap_const_logic_1 = mean_0_ack_in))) then 
                                        mean_0_sel_wr <= not(mean_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    mean_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                mean_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = mean_0_vld_in) and (ap_const_logic_1 = mean_0_ack_out) and (ap_const_lv2_3 = mean_0_state)) or ((ap_const_logic_0 = mean_0_vld_in) and (ap_const_lv2_2 = mean_0_state)))) then 
                    mean_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = mean_0_vld_in) and (ap_const_logic_0 = mean_0_ack_out) and (ap_const_lv2_3 = mean_0_state)) or ((ap_const_logic_0 = mean_0_ack_out) and (ap_const_lv2_1 = mean_0_state)))) then 
                    mean_0_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = mean_0_vld_in) and (ap_const_lv2_2 = mean_0_state)) or ((ap_const_logic_1 = mean_0_ack_out) and (ap_const_lv2_1 = mean_0_state)) or ((ap_const_lv2_3 = mean_0_state) and not(((ap_const_logic_1 = mean_0_vld_in) and (ap_const_logic_0 = mean_0_ack_out))) and not(((ap_const_logic_0 = mean_0_vld_in) and (ap_const_logic_1 = mean_0_ack_out)))))) then 
                    mean_0_state <= ap_const_lv2_3;
                else 
                    mean_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    out_r_1_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_r_1_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = out_r_1_ack_out) and (ap_const_logic_1 = out_r_1_vld_out))) then 
                                        out_r_1_sel_rd <= not(out_r_1_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    out_r_1_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_r_1_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = out_r_1_vld_in) and (ap_const_logic_1 = out_r_1_ack_in))) then 
                                        out_r_1_sel_wr <= not(out_r_1_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    out_r_1_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                out_r_1_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = out_r_1_vld_in) and (ap_const_logic_1 = out_r_1_ack_out) and (ap_const_lv2_3 = out_r_1_state)) or ((ap_const_logic_0 = out_r_1_vld_in) and (ap_const_lv2_2 = out_r_1_state)))) then 
                    out_r_1_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = out_r_1_vld_in) and (ap_const_logic_0 = out_r_1_ack_out) and (ap_const_lv2_3 = out_r_1_state)) or ((ap_const_logic_0 = out_r_1_ack_out) and (ap_const_lv2_1 = out_r_1_state)))) then 
                    out_r_1_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = out_r_1_vld_in) and (ap_const_lv2_2 = out_r_1_state)) or ((ap_const_logic_1 = out_r_1_ack_out) and (ap_const_lv2_1 = out_r_1_state)) or ((ap_const_lv2_3 = out_r_1_state) and not(((ap_const_logic_1 = out_r_1_vld_in) and (ap_const_logic_0 = out_r_1_ack_out))) and not(((ap_const_logic_0 = out_r_1_vld_in) and (ap_const_logic_1 = out_r_1_ack_out)))))) then 
                    out_r_1_state <= ap_const_lv2_3;
                else 
                    out_r_1_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    std_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                std_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = std_0_ack_out) and (ap_const_logic_1 = std_0_vld_out))) then 
                                        std_0_sel_rd <= not(std_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    std_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                std_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = std_0_vld_in) and (ap_const_logic_1 = std_0_ack_in))) then 
                                        std_0_sel_wr <= not(std_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    std_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                std_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = std_0_vld_in) and (ap_const_logic_1 = std_0_ack_out) and (ap_const_lv2_3 = std_0_state)) or ((ap_const_logic_0 = std_0_vld_in) and (ap_const_lv2_2 = std_0_state)))) then 
                    std_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = std_0_vld_in) and (ap_const_logic_0 = std_0_ack_out) and (ap_const_lv2_3 = std_0_state)) or ((ap_const_logic_0 = std_0_ack_out) and (ap_const_lv2_1 = std_0_state)))) then 
                    std_0_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = std_0_vld_in) and (ap_const_lv2_2 = std_0_state)) or ((ap_const_logic_1 = std_0_ack_out) and (ap_const_lv2_1 = std_0_state)) or ((ap_const_lv2_3 = std_0_state) and not(((ap_const_logic_1 = std_0_vld_in) and (ap_const_logic_0 = std_0_ack_out))) and not(((ap_const_logic_0 = std_0_vld_in) and (ap_const_logic_1 = std_0_ack_out)))))) then 
                    std_0_state <= ap_const_lv2_3;
                else 
                    std_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    w_0_sel_rd_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                w_0_sel_rd <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = w_0_ack_out) and (ap_const_logic_1 = w_0_vld_out))) then 
                                        w_0_sel_rd <= not(w_0_sel_rd);
                end if; 
            end if;
        end if;
    end process;


    w_0_sel_wr_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                w_0_sel_wr <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = w_0_vld_in) and (ap_const_logic_1 = w_0_ack_in))) then 
                                        w_0_sel_wr <= not(w_0_sel_wr);
                end if; 
            end if;
        end if;
    end process;


    w_0_state_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                w_0_state <= ap_const_lv2_0;
            else
                if ((((ap_const_logic_0 = w_0_vld_in) and (ap_const_logic_1 = w_0_ack_out) and (ap_const_lv2_3 = w_0_state)) or ((ap_const_logic_0 = w_0_vld_in) and (ap_const_lv2_2 = w_0_state)))) then 
                    w_0_state <= ap_const_lv2_2;
                elsif ((((ap_const_logic_1 = w_0_vld_in) and (ap_const_logic_0 = w_0_ack_out) and (ap_const_lv2_3 = w_0_state)) or ((ap_const_logic_0 = w_0_ack_out) and (ap_const_lv2_1 = w_0_state)))) then 
                    w_0_state <= ap_const_lv2_1;
                elsif ((((ap_const_logic_1 = w_0_vld_in) and (ap_const_lv2_2 = w_0_state)) or ((ap_const_logic_1 = w_0_ack_out) and (ap_const_lv2_1 = w_0_state)) or ((ap_const_lv2_3 = w_0_state) and not(((ap_const_logic_1 = w_0_vld_in) and (ap_const_logic_0 = w_0_ack_out))) and not(((ap_const_logic_0 = w_0_vld_in) and (ap_const_logic_1 = w_0_ack_out)))))) then 
                    w_0_state <= ap_const_lv2_3;
                else 
                    w_0_state <= ap_const_lv2_2;
                end if; 
            end if;
        end if;
    end process;


    i_reg_247_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (out_r_1_ack_in = ap_const_logic_1) and (ap_const_lv1_0 = exitcond1_fu_392_p2))) then 
                i_reg_247 <= ap_const_lv6_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_1 = exitcond10_fu_440_p2))) then 
                i_reg_247 <= i_1_reg_924;
            end if; 
        end if;
    end process;

    ic_reg_269_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = exitcond11_fu_403_p2))) then 
                ic_reg_269 <= ap_const_lv6_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = exitcond8_fu_489_p2))) then 
                ic_reg_269 <= ic_1_reg_950;
            end if; 
        end if;
    end process;

    ih_reg_280_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_0 = exitcond9_fu_473_p2))) then 
                ih_reg_280 <= ap_const_lv6_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_1 = exitcond7_fu_505_p2))) then 
                ih_reg_280 <= ih_1_reg_963;
            end if; 
        end if;
    end process;

    iw_reg_303_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_0 = exitcond8_fu_489_p2))) then 
                iw_reg_303 <= ap_const_lv6_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = exitcond6_fu_516_p2))) then 
                iw_reg_303 <= iw_1_reg_976;
            end if; 
        end if;
    end process;

    j_reg_258_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond11_fu_403_p2))) then 
                j_reg_258 <= ap_const_lv6_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state5) and (b_0_vld_out = ap_const_logic_1))) then 
                j_reg_258 <= j_1_reg_937;
            end if; 
        end if;
    end process;

    kh_reg_326_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_0 = exitcond7_fu_505_p2))) then 
                kh_reg_326 <= ap_const_lv6_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_lv1_1 = exitcond5_fu_564_p2))) then 
                kh_reg_326 <= kh_1_reg_984;
            end if; 
        end if;
    end process;

    kw_reg_337_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = exitcond6_fu_516_p2))) then 
                kw_reg_337 <= ap_const_lv6_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                kw_reg_337 <= kw_1_reg_997;
            end if; 
        end if;
    end process;

    oc_reg_236_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and (((ap_const_lv1_0 = x_norm_read_reg_857) and (ap_const_lv1_1 = exitcond2_fu_657_p2)) or ((ap_const_lv1_1 = x_norm_read_reg_857) and (ap_const_lv1_1 = exitcond4_fu_694_p2))))) then 
                oc_reg_236 <= oc_1_reg_916;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                oc_reg_236 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;

    oh1_reg_359_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = x_norm_read_reg_857) and (ap_const_lv1_1 = exitcond9_fu_473_p2))) then 
                oh1_reg_359 <= ap_const_lv6_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state18) and (ap_const_lv1_1 = exitcond3_fu_765_p2))) then 
                oh1_reg_359 <= oh_reg_1036;
            end if; 
        end if;
    end process;

    oh3_reg_348_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_0 = x_norm_read_reg_857) and (ap_const_lv1_1 = exitcond9_fu_473_p2))) then 
                oh3_reg_348 <= ap_const_lv6_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state15) and (ap_const_lv1_1 = exitcond_fu_731_p2))) then 
                oh3_reg_348 <= oh_1_reg_1023;
            end if; 
        end if;
    end process;

    ow2_reg_381_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and (ap_const_lv1_1 = x_norm_read_reg_857) and (ap_const_lv1_0 = exitcond4_fu_694_p2))) then 
                ow2_reg_381 <= ap_const_lv6_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state54) and (out_r_1_ack_in = ap_const_logic_1))) then 
                ow2_reg_381 <= ow_reg_1067;
            end if; 
        end if;
    end process;

    ow4_reg_370_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and (ap_const_lv1_0 = x_norm_read_reg_857) and (ap_const_lv1_0 = exitcond2_fu_657_p2))) then 
                ow4_reg_370 <= ap_const_lv6_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state17) and (out_r_1_ack_in = ap_const_logic_1))) then 
                ow4_reg_370 <= ow_1_reg_1049;
            end if; 
        end if;
    end process;

    phi_mul1_reg_291_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_0 = exitcond9_fu_473_p2))) then 
                phi_mul1_reg_291 <= ap_const_lv6_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_1 = exitcond7_fu_505_p2))) then 
                phi_mul1_reg_291 <= next_mul1_reg_955;
            end if; 
        end if;
    end process;

    phi_mul_reg_314_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_0 = exitcond8_fu_489_p2))) then 
                phi_mul_reg_314 <= ap_const_lv6_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = exitcond6_fu_516_p2))) then 
                phi_mul_reg_314 <= next_mul_reg_968;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = b_0_load_A)) then
                b_0_payload_A <= b_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = b_0_load_B)) then
                b_0_payload_B <= b_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                i_1_reg_924 <= i_1_fu_408_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                ic_1_reg_950 <= ic_1_fu_478_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                icmp_reg_1012 <= icmp_fu_645_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                ih_1_reg_963 <= ih_1_fu_494_p2;
                next_mul1_reg_955 <= next_mul1_fu_484_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = in_r_0_load_A)) then
                in_r_0_payload_A <= in_r_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = in_r_0_load_B)) then
                in_r_0_payload_B <= in_r_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                iw_1_reg_976 <= iw_1_fu_510_p2;
                next_mul_reg_968 <= next_mul_fu_500_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                j_1_reg_937 <= j_1_fu_445_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                kh_1_reg_984 <= kh_1_fu_521_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                kw_1_reg_997 <= kw_1_fu_569_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = mean_0_load_A)) then
                mean_0_payload_A <= mean_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = mean_0_load_B)) then
                mean_0_payload_B <= mean_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state2) and (out_r_1_ack_in = ap_const_logic_1))) then
                oc_1_reg_916 <= oc_1_fu_397_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and (ap_const_lv1_0 = x_norm_read_reg_857))) then
                oh_1_reg_1023 <= oh_1_fu_662_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and (ap_const_lv1_1 = x_norm_read_reg_857))) then
                oh_reg_1036 <= oh_fu_699_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = out_r_1_load_A)) then
                out_r_1_payload_A <= out_r_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = out_r_1_load_B)) then
                out_r_1_payload_B <= out_r_1_data_in;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state15)) then
                ow_1_reg_1049 <= ow_1_fu_736_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state18)) then
                ow_reg_1067 <= ow_fu_770_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = std_0_load_A)) then
                std_0_payload_A <= std_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = std_0_load_B)) then
                std_0_payload_B <= std_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_lv1_0 = exitcond5_fu_564_p2))) then
                temp_addr_3_reg_1002 <= tmp_33_cast_fu_595_p1(10 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and (ap_const_lv1_0 = x_norm_read_reg_857) and (ap_const_lv1_0 = exitcond2_fu_657_p2))) then
                    tmp_10_reg_1028(10 downto 2) <= tmp_10_fu_688_p2(10 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state19)) then
                tmp_15_reg_1077 <= tmp_15_fu_790_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state12) and (ap_const_lv1_0 = icmp_fu_645_p2))) then
                tmp_21_reg_1016 <= tmp_21_fu_651_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_0 = exitcond6_fu_516_p2))) then
                    tmp_28_reg_989(10 downto 2) <= tmp_28_fu_558_p2(10 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state11) and not(((ap_const_logic_0 = in_r_0_vld_out) or (ap_const_logic_0 = w_0_vld_out))))) then
                tmp_2_i_reg_1007 <= c_fu_850_p2(29 downto 12);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_0 = exitcond11_fu_403_p2))) then
                    tmp_4_reg_929(10 downto 2) <= tmp_4_fu_434_p2(10 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state14) and (ap_const_lv1_1 = x_norm_read_reg_857) and (ap_const_lv1_0 = exitcond4_fu_694_p2))) then
                    tmp_7_reg_1041(10 downto 2) <= tmp_7_fu_725_p2(10 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_0 = exitcond10_fu_440_p2))) then
                tmp_s_reg_942 <= tmp_s_fu_455_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = w_0_load_A)) then
                w_0_payload_A <= w_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = w_0_load_B)) then
                w_0_payload_B <= w_TDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                x_I_c_read_reg_898 <= x_I_c;
                x_I_h_read_reg_908 <= x_I_h;
                x_I_w_read_reg_903 <= x_I_w;
                x_K_read_reg_873 <= x_K;
                x_O_c_read_reg_879 <= x_O_c;
                x_O_h_read_reg_891 <= x_O_h;
                x_O_w_read_reg_884 <= x_O_w;
                x_P_read_reg_861 <= x_P;
                x_S_read_reg_867 <= x_S;
                x_norm_read_reg_857 <= x_norm;
            end if;
        end if;
    end process;
    tmp_4_reg_929(1 downto 0) <= "00";
    tmp_28_reg_989(1 downto 0) <= "00";
    tmp_10_reg_1028(1 downto 0) <= "00";
    tmp_7_reg_1041(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, in_r_0_vld_out, out_r_1_ack_in, w_0_vld_out, b_0_vld_out, mean_0_vld_out, std_0_vld_out, ap_CS_fsm_state11, ap_CS_fsm_state53, ap_CS_fsm_state54, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state5, ap_CS_fsm_state20, x_norm_read_reg_857, ap_CS_fsm_state2, ap_CS_fsm_state3, exitcond11_fu_403_p2, ap_CS_fsm_state4, exitcond10_fu_440_p2, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, exitcond6_fu_516_p2, ap_CS_fsm_state10, exitcond5_fu_564_p2, ap_CS_fsm_state14, exitcond2_fu_657_p2, exitcond4_fu_694_p2, ap_CS_fsm_state15, exitcond_fu_731_p2, ap_CS_fsm_state18, exitcond3_fu_765_p2, exitcond1_fu_392_p2, exitcond8_fu_489_p2, exitcond7_fu_505_p2, exitcond9_fu_473_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state2) and (out_r_1_ack_in = ap_const_logic_1) and (ap_const_lv1_1 = exitcond1_fu_392_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state2) and (out_r_1_ack_in = ap_const_logic_1) and (ap_const_lv1_0 = exitcond1_fu_392_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (ap_const_lv1_1 = exitcond11_fu_403_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (ap_const_lv1_1 = exitcond10_fu_440_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state5) and (b_0_vld_out = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (ap_const_lv1_1 = exitcond9_fu_473_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (ap_const_lv1_1 = exitcond8_fu_489_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (ap_const_lv1_1 = exitcond7_fu_505_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (ap_const_lv1_1 = exitcond6_fu_516_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (ap_const_lv1_1 = exitcond5_fu_564_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and not(((ap_const_logic_0 = in_r_0_vld_out) or (ap_const_logic_0 = w_0_vld_out))))) then
                    ap_NS_fsm <= ap_ST_fsm_state12;
                else
                    ap_NS_fsm <= ap_ST_fsm_state11;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state14 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state14) and (((ap_const_lv1_0 = x_norm_read_reg_857) and (ap_const_lv1_1 = exitcond2_fu_657_p2)) or ((ap_const_lv1_1 = x_norm_read_reg_857) and (ap_const_lv1_1 = exitcond4_fu_694_p2))))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state14) and (ap_const_lv1_1 = x_norm_read_reg_857) and (ap_const_lv1_0 = exitcond4_fu_694_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state15;
                end if;
            when ap_ST_fsm_state15 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state15) and (ap_const_lv1_1 = exitcond_fu_731_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state16 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state16) and (out_r_1_ack_in = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state17;
                else
                    ap_NS_fsm <= ap_ST_fsm_state16;
                end if;
            when ap_ST_fsm_state17 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state17) and (out_r_1_ack_in = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state15;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state18 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state18) and (ap_const_lv1_1 = exitcond3_fu_765_p2))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state19;
                end if;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state20) and not(((ap_const_logic_0 = mean_0_vld_out) or (ap_const_logic_0 = std_0_vld_out))))) then
                    ap_NS_fsm <= ap_ST_fsm_state21;
                else
                    ap_NS_fsm <= ap_ST_fsm_state20;
                end if;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state53) and (out_r_1_ack_in = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state54;
                else
                    ap_NS_fsm <= ap_ST_fsm_state53;
                end if;
            when ap_ST_fsm_state54 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state54) and (out_r_1_ack_in = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state54;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    a_assign_fu_798_p2 <= std_logic_vector(unsigned(tmp_15_reg_1077) - unsigned(tmp_18_fu_794_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_block_state11_assign_proc : process(in_r_0_vld_out, w_0_vld_out)
    begin
                ap_block_state11 <= ((ap_const_logic_0 = in_r_0_vld_out) or (ap_const_logic_0 = w_0_vld_out));
    end process;


    ap_block_state20_assign_proc : process(mean_0_vld_out, std_0_vld_out)
    begin
                ap_block_state20 <= ((ap_const_logic_0 = mean_0_vld_out) or (ap_const_logic_0 = std_0_vld_out));
    end process;


    ap_done_assign_proc : process(out_r_1_ack_in, ap_CS_fsm_state2, exitcond1_fu_392_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (out_r_1_ack_in = ap_const_logic_1) and (ap_const_lv1_1 = exitcond1_fu_392_p2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_0 = ap_start) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(out_r_1_ack_in, ap_CS_fsm_state2, exitcond1_fu_392_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state2) and (out_r_1_ack_in = ap_const_logic_1) and (ap_const_lv1_1 = exitcond1_fu_392_p2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    b_0_ack_in <= b_0_state(1);

    b_0_ack_out_assign_proc : process(b_0_vld_out, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) and (b_0_vld_out = ap_const_logic_1))) then 
            b_0_ack_out <= ap_const_logic_1;
        else 
            b_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    b_0_data_out_assign_proc : process(b_0_payload_A, b_0_payload_B, b_0_sel)
    begin
        if ((ap_const_logic_1 = b_0_sel)) then 
            b_0_data_out <= b_0_payload_B;
        else 
            b_0_data_out <= b_0_payload_A;
        end if; 
    end process;

    b_0_load_A <= (b_0_state_cmp_full and not(b_0_sel_wr));
    b_0_load_B <= (b_0_sel_wr and b_0_state_cmp_full);
    b_0_sel <= b_0_sel_rd;
    b_0_state_cmp_full <= '0' when (b_0_state = ap_const_lv2_1) else '1';
    b_0_vld_in <= b_TVALID;
    b_0_vld_out <= b_0_state(0);

    b_TDATA_blk_n_assign_proc : process(b_0_state, ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            b_TDATA_blk_n <= b_0_state(0);
        else 
            b_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    b_TREADY <= b_0_state(1);
    exitcond10_fu_440_p2 <= "1" when (j_reg_258 = x_O_w_read_reg_884) else "0";
    exitcond11_fu_403_p2 <= "1" when (i_reg_247 = x_O_h_read_reg_891) else "0";
    exitcond1_fu_392_p2 <= "1" when (oc_reg_236 = x_O_c_read_reg_879) else "0";
    exitcond2_fu_657_p2 <= "1" when (oh3_reg_348 = x_O_h_read_reg_891) else "0";
    exitcond3_fu_765_p2 <= "1" when (ow2_reg_381 = x_O_w_read_reg_884) else "0";
    exitcond4_fu_694_p2 <= "1" when (oh1_reg_359 = x_O_h_read_reg_891) else "0";
    exitcond5_fu_564_p2 <= "1" when (kw_reg_337 = x_K_read_reg_873) else "0";
    exitcond6_fu_516_p2 <= "1" when (kh_reg_326 = x_K_read_reg_873) else "0";
    exitcond7_fu_505_p2 <= "1" when (iw_reg_303 = x_I_w_read_reg_903) else "0";
    exitcond8_fu_489_p2 <= "1" when (ih_reg_280 = x_I_h_read_reg_908) else "0";
    exitcond9_fu_473_p2 <= "1" when (ic_reg_269 = x_I_c_read_reg_898) else "0";
    exitcond_fu_731_p2 <= "1" when (ow4_reg_370 = x_O_w_read_reg_884) else "0";

    grp_fu_819_ap_start_assign_proc : process(mean_0_vld_out, std_0_vld_out, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) and not(((ap_const_logic_0 = mean_0_vld_out) or (ap_const_logic_0 = std_0_vld_out))))) then 
            grp_fu_819_ap_start <= ap_const_logic_1;
        else 
            grp_fu_819_ap_start <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_819_ce_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state11, ap_CS_fsm_state54, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state5, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state12, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state2) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            grp_fu_819_ce <= ap_const_logic_0;
        else 
            grp_fu_819_ce <= ap_const_logic_1;
        end if; 
    end process;

    grp_fu_819_p0 <= (a_assign_fu_798_p2 & ap_const_lv12_0);
    i_1_fu_408_p2 <= std_logic_vector(unsigned(i_reg_247) + unsigned(ap_const_lv6_1));
    ic_1_fu_478_p2 <= std_logic_vector(unsigned(ic_reg_269) + unsigned(ap_const_lv6_1));
    icmp_fu_645_p2 <= "1" when (signed(tmp_32_fu_635_p4) > signed(ap_const_lv3_0)) else "0";
    ih_1_fu_494_p2 <= std_logic_vector(unsigned(ih_reg_280) + unsigned(ap_const_lv6_1));
    in_r_0_ack_in <= in_r_0_state(1);

    in_r_0_ack_out_assign_proc : process(in_r_0_vld_out, w_0_vld_out, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) and not(((ap_const_logic_0 = in_r_0_vld_out) or (ap_const_logic_0 = w_0_vld_out))))) then 
            in_r_0_ack_out <= ap_const_logic_1;
        else 
            in_r_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    in_r_0_data_out_assign_proc : process(in_r_0_payload_A, in_r_0_payload_B, in_r_0_sel)
    begin
        if ((ap_const_logic_1 = in_r_0_sel)) then 
            in_r_0_data_out <= in_r_0_payload_B;
        else 
            in_r_0_data_out <= in_r_0_payload_A;
        end if; 
    end process;

    in_r_0_load_A <= (in_r_0_state_cmp_full and not(in_r_0_sel_wr));
    in_r_0_load_B <= (in_r_0_sel_wr and in_r_0_state_cmp_full);
    in_r_0_sel <= in_r_0_sel_rd;
    in_r_0_state_cmp_full <= '0' when (in_r_0_state = ap_const_lv2_1) else '1';
    in_r_0_vld_in <= in_r_TVALID;
    in_r_0_vld_out <= in_r_0_state(0);

    in_r_TDATA_blk_n_assign_proc : process(in_r_0_state, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            in_r_TDATA_blk_n <= in_r_0_state(0);
        else 
            in_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    in_r_TREADY <= in_r_0_state(1);
    iw_1_fu_510_p2 <= std_logic_vector(unsigned(iw_reg_303) + unsigned(ap_const_lv6_1));
    j_1_fu_445_p2 <= std_logic_vector(unsigned(j_reg_258) + unsigned(ap_const_lv6_1));
    kh_1_fu_521_p2 <= std_logic_vector(unsigned(kh_reg_326) + unsigned(ap_const_lv6_1));
    kw_1_fu_569_p2 <= std_logic_vector(unsigned(kw_reg_337) + unsigned(ap_const_lv6_1));
    mean_0_ack_in <= mean_0_state(1);

    mean_0_ack_out_assign_proc : process(mean_0_vld_out, std_0_vld_out, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) and not(((ap_const_logic_0 = mean_0_vld_out) or (ap_const_logic_0 = std_0_vld_out))))) then 
            mean_0_ack_out <= ap_const_logic_1;
        else 
            mean_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    mean_0_data_out_assign_proc : process(mean_0_payload_A, mean_0_payload_B, mean_0_sel)
    begin
        if ((ap_const_logic_1 = mean_0_sel)) then 
            mean_0_data_out <= mean_0_payload_B;
        else 
            mean_0_data_out <= mean_0_payload_A;
        end if; 
    end process;

    mean_0_load_A <= (mean_0_state_cmp_full and not(mean_0_sel_wr));
    mean_0_load_B <= (mean_0_sel_wr and mean_0_state_cmp_full);
    mean_0_sel <= mean_0_sel_rd;
    mean_0_state_cmp_full <= '0' when (mean_0_state = ap_const_lv2_1) else '1';
    mean_0_vld_in <= mean_TVALID;
    mean_0_vld_out <= mean_0_state(0);

    mean_TDATA_blk_n_assign_proc : process(mean_0_state, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            mean_TDATA_blk_n <= mean_0_state(0);
        else 
            mean_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    mean_TREADY <= mean_0_state(1);
    next_mul1_fu_484_p2 <= std_logic_vector(unsigned(phi_mul1_reg_291) + unsigned(x_S_read_reg_867));
    next_mul_fu_500_p2 <= std_logic_vector(unsigned(phi_mul_reg_314) + unsigned(x_S_read_reg_867));
    oc_1_fu_397_p2 <= std_logic_vector(unsigned(oc_reg_236) + unsigned(ap_const_lv6_1));
    oh_1_fu_662_p2 <= std_logic_vector(unsigned(oh3_reg_348) + unsigned(ap_const_lv6_1));
    oh_2_fu_533_p2 <= std_logic_vector(unsigned(tmp_14_fu_527_p2) - unsigned(x_P_read_reg_861));
    oh_fu_699_p2 <= std_logic_vector(unsigned(oh1_reg_359) + unsigned(ap_const_lv6_1));
    out_r_1_ack_in <= out_r_1_state(1);
    out_r_1_ack_out <= out_r_TREADY;

    out_r_1_data_in_assign_proc : process(ap_CS_fsm_state53, ap_CS_fsm_state16, tmp_13_fu_760_p1, tmp_11_fu_845_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            out_r_1_data_in <= tmp_11_fu_845_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            out_r_1_data_in <= tmp_13_fu_760_p1;
        else 
            out_r_1_data_in <= "XXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    out_r_1_data_out_assign_proc : process(out_r_1_payload_A, out_r_1_payload_B, out_r_1_sel)
    begin
        if ((ap_const_logic_1 = out_r_1_sel)) then 
            out_r_1_data_out <= out_r_1_payload_B;
        else 
            out_r_1_data_out <= out_r_1_payload_A;
        end if; 
    end process;

    out_r_1_load_A <= (out_r_1_state_cmp_full and not(out_r_1_sel_wr));
    out_r_1_load_B <= (out_r_1_sel_wr and out_r_1_state_cmp_full);
    out_r_1_sel <= out_r_1_sel_rd;
    out_r_1_state_cmp_full <= '0' when (out_r_1_state = ap_const_lv2_1) else '1';

    out_r_1_vld_in_assign_proc : process(out_r_1_ack_in, ap_CS_fsm_state53, ap_CS_fsm_state16)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state16) and (out_r_1_ack_in = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state53) and (out_r_1_ack_in = ap_const_logic_1)))) then 
            out_r_1_vld_in <= ap_const_logic_1;
        else 
            out_r_1_vld_in <= ap_const_logic_0;
        end if; 
    end process;

    out_r_1_vld_out <= out_r_1_state(0);
    out_r_TDATA <= out_r_1_data_out;

    out_r_TDATA_blk_n_assign_proc : process(out_r_1_state, ap_CS_fsm_state53, ap_CS_fsm_state54, ap_CS_fsm_state16, ap_CS_fsm_state17)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            out_r_TDATA_blk_n <= out_r_1_state(1);
        else 
            out_r_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    out_r_TVALID <= out_r_1_state(0);
    ow_1_fu_736_p2 <= std_logic_vector(unsigned(ow4_reg_370) + unsigned(ap_const_lv6_1));
    ow_2_fu_581_p2 <= std_logic_vector(unsigned(tmp_16_fu_575_p2) - unsigned(x_P_read_reg_861));
    ow_fu_770_p2 <= std_logic_vector(unsigned(ow2_reg_381) + unsigned(ap_const_lv6_1));
    p_shl2_cast_fu_430_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_422_p3),11));
    p_shl4_cast_fu_554_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_27_fu_546_p3),11));
    p_shl6_cast_fu_721_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_713_p3),11));
    p_shl8_cast_fu_684_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_676_p3),11));
    std_0_ack_in <= std_0_state(1);

    std_0_ack_out_assign_proc : process(mean_0_vld_out, std_0_vld_out, ap_CS_fsm_state20)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state20) and not(((ap_const_logic_0 = mean_0_vld_out) or (ap_const_logic_0 = std_0_vld_out))))) then 
            std_0_ack_out <= ap_const_logic_1;
        else 
            std_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    std_0_data_out_assign_proc : process(std_0_payload_A, std_0_payload_B, std_0_sel)
    begin
        if ((ap_const_logic_1 = std_0_sel)) then 
            std_0_data_out <= std_0_payload_B;
        else 
            std_0_data_out <= std_0_payload_A;
        end if; 
    end process;

    std_0_load_A <= (std_0_state_cmp_full and not(std_0_sel_wr));
    std_0_load_B <= (std_0_sel_wr and std_0_state_cmp_full);
    std_0_sel <= std_0_sel_rd;
    std_0_state_cmp_full <= '0' when (std_0_state = ap_const_lv2_1) else '1';
    std_0_vld_in <= std_TVALID;
    std_0_vld_out <= std_0_state(0);

    std_TDATA_blk_n_assign_proc : process(std_0_state, ap_CS_fsm_state20)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            std_TDATA_blk_n <= std_0_state(0);
        else 
            std_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    std_TREADY <= std_0_state(1);

    temp_address0_assign_proc : process(ap_CS_fsm_state11, ap_CS_fsm_state5, temp_addr_3_reg_1002, icmp_reg_1012, ap_CS_fsm_state12, tmp_21_reg_1016, ap_CS_fsm_state15, ap_CS_fsm_state18, ap_CS_fsm_state13, tmp_15_cast_fu_469_p1, tmp_29_cast_fu_751_p1, tmp_28_cast_fu_785_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            temp_address0 <= tmp_28_cast_fu_785_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            temp_address0 <= tmp_29_cast_fu_751_p1(10 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state12) or ((ap_const_logic_1 = ap_CS_fsm_state13) and (ap_const_lv1_0 = icmp_reg_1012) and (ap_const_lv1_1 = tmp_21_reg_1016)) or ((ap_const_logic_1 = ap_CS_fsm_state13) and (ap_const_lv1_1 = icmp_reg_1012)))) then 
            temp_address0 <= temp_addr_3_reg_1002;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            temp_address0 <= tmp_15_cast_fu_469_p1(10 - 1 downto 0);
        else 
            temp_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    temp_ce0_assign_proc : process(in_r_0_vld_out, w_0_vld_out, b_0_vld_out, ap_CS_fsm_state11, ap_CS_fsm_state5, icmp_reg_1012, ap_CS_fsm_state12, tmp_21_reg_1016, ap_CS_fsm_state15, ap_CS_fsm_state18, ap_CS_fsm_state13)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_state11) and not(((ap_const_logic_0 = in_r_0_vld_out) or (ap_const_logic_0 = w_0_vld_out)))) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state18) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (b_0_vld_out = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state13) and (ap_const_lv1_0 = icmp_reg_1012) and (ap_const_lv1_1 = tmp_21_reg_1016)) or ((ap_const_logic_1 = ap_CS_fsm_state13) and (ap_const_lv1_1 = icmp_reg_1012)))) then 
            temp_ce0 <= ap_const_logic_1;
        else 
            temp_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    temp_d0_assign_proc : process(ap_CS_fsm_state5, icmp_reg_1012, ap_CS_fsm_state12, tmp_21_reg_1016, ap_CS_fsm_state13, tmp_3_fu_464_p1, tmp_19_fu_628_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) and (ap_const_lv1_1 = icmp_reg_1012))) then 
            temp_d0 <= ap_const_lv20_1FFFF;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state13) and (ap_const_lv1_0 = icmp_reg_1012) and (ap_const_lv1_1 = tmp_21_reg_1016))) then 
            temp_d0 <= ap_const_lv20_E0000;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            temp_d0 <= tmp_19_fu_628_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            temp_d0 <= tmp_3_fu_464_p1;
        else 
            temp_d0 <= "XXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    temp_we0_assign_proc : process(b_0_vld_out, ap_CS_fsm_state5, icmp_reg_1012, ap_CS_fsm_state12, tmp_21_reg_1016, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state12) or ((ap_const_logic_1 = ap_CS_fsm_state5) and (b_0_vld_out = ap_const_logic_1)) or ((ap_const_logic_1 = ap_CS_fsm_state13) and (ap_const_lv1_0 = icmp_reg_1012) and (ap_const_lv1_1 = tmp_21_reg_1016)) or ((ap_const_logic_1 = ap_CS_fsm_state13) and (ap_const_lv1_1 = icmp_reg_1012)))) then 
            temp_we0 <= ap_const_logic_1;
        else 
            temp_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_10_cast_fu_742_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ow4_reg_370),11));
    tmp_10_fu_688_p2 <= std_logic_vector(unsigned(tmp_8_fu_668_p3) - unsigned(p_shl8_cast_fu_684_p1));
    tmp_11_fu_845_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(y_assign_1_fu_837_p3),24));
    tmp_12_fu_780_p2 <= std_logic_vector(unsigned(tmp_7_reg_1041) + unsigned(tmp_7_cast_fu_776_p1));
        tmp_13_fu_760_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_25_fu_756_p1),24));

    tmp_14_fu_527_p2 <= std_logic_vector(unsigned(kh_reg_326) + unsigned(phi_mul1_reg_291));
        tmp_15_cast_fu_469_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_s_reg_942),32));

    tmp_15_fu_790_p1 <= temp_q0(18 - 1 downto 0);
    tmp_16_fu_575_p2 <= std_logic_vector(unsigned(phi_mul_reg_314) + unsigned(kw_reg_337));
        tmp_17_fu_625_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_2_i_reg_1007),20));

    tmp_18_cast_fu_586_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ow_2_fu_581_p2),11));
    tmp_18_fu_794_p1 <= mean_0_data_out(18 - 1 downto 0);
    tmp_19_fu_628_p2 <= std_logic_vector(unsigned(temp_q0) + unsigned(tmp_17_fu_625_p1));
    tmp_1_fu_414_p3 <= (i_reg_247 & ap_const_lv5_0);
    tmp_20_fu_803_p1 <= std_0_data_out(18 - 1 downto 0);
    tmp_21_fu_651_p2 <= "1" when (signed(tmp_19_fu_628_p2) < signed(ap_const_lv20_E0000)) else "0";
    tmp_22_fu_825_p1 <= grp_fu_819_p2(17 - 1 downto 0);
    tmp_23_fu_829_p3 <= grp_fu_819_p2(17 downto 17);
    tmp_24_fu_746_p2 <= std_logic_vector(unsigned(tmp_10_reg_1028) + unsigned(tmp_10_cast_fu_742_p1));
    tmp_25_fu_756_p1 <= temp_q0(18 - 1 downto 0);
    tmp_26_fu_538_p3 <= (oh_2_fu_533_p2 & ap_const_lv5_0);
    tmp_27_fu_546_p3 <= (oh_2_fu_533_p2 & ap_const_lv2_0);
        tmp_28_cast_fu_785_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_12_fu_780_p2),32));

    tmp_28_fu_558_p2 <= std_logic_vector(unsigned(tmp_26_fu_538_p3) - unsigned(p_shl4_cast_fu_554_p1));
        tmp_29_cast_fu_751_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_24_fu_746_p2),32));

    tmp_29_fu_600_p1 <= in_r_0_data_out(18 - 1 downto 0);
    tmp_2_fu_422_p3 <= (i_reg_247 & ap_const_lv2_0);
    tmp_30_fu_604_p1 <= w_0_data_out(18 - 1 downto 0);
    tmp_31_fu_590_p2 <= std_logic_vector(unsigned(tmp_18_cast_fu_586_p1) + unsigned(tmp_28_reg_989));
    tmp_32_fu_635_p4 <= tmp_19_fu_628_p2(19 downto 17);
        tmp_33_cast_fu_595_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_31_fu_590_p2),32));

        tmp_3_fu_464_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_fu_460_p1),20));

    tmp_4_fu_434_p2 <= std_logic_vector(unsigned(tmp_1_fu_414_p3) - unsigned(p_shl2_cast_fu_430_p1));
    tmp_5_cast_fu_451_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_258),11));
    tmp_5_fu_705_p3 <= (oh1_reg_359 & ap_const_lv5_0);
    tmp_6_fu_713_p3 <= (oh1_reg_359 & ap_const_lv2_0);
    tmp_7_cast_fu_776_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ow2_reg_381),11));
    tmp_7_fu_725_p2 <= std_logic_vector(unsigned(tmp_5_fu_705_p3) - unsigned(p_shl6_cast_fu_721_p1));
    tmp_8_fu_668_p3 <= (oh3_reg_348 & ap_const_lv5_0);
    tmp_9_fu_676_p3 <= (oh3_reg_348 & ap_const_lv2_0);
    tmp_fu_460_p1 <= b_0_data_out(18 - 1 downto 0);
    tmp_s_fu_455_p2 <= std_logic_vector(unsigned(tmp_4_reg_929) + unsigned(tmp_5_cast_fu_451_p1));
    w_0_ack_in <= w_0_state(1);

    w_0_ack_out_assign_proc : process(in_r_0_vld_out, w_0_vld_out, ap_CS_fsm_state11)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) and not(((ap_const_logic_0 = in_r_0_vld_out) or (ap_const_logic_0 = w_0_vld_out))))) then 
            w_0_ack_out <= ap_const_logic_1;
        else 
            w_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    w_0_data_out_assign_proc : process(w_0_payload_A, w_0_payload_B, w_0_sel)
    begin
        if ((ap_const_logic_1 = w_0_sel)) then 
            w_0_data_out <= w_0_payload_B;
        else 
            w_0_data_out <= w_0_payload_A;
        end if; 
    end process;

    w_0_load_A <= (w_0_state_cmp_full and not(w_0_sel_wr));
    w_0_load_B <= (w_0_sel_wr and w_0_state_cmp_full);
    w_0_sel <= w_0_sel_rd;
    w_0_state_cmp_full <= '0' when (w_0_state = ap_const_lv2_1) else '1';
    w_0_vld_in <= w_TVALID;
    w_0_vld_out <= w_0_state(0);

    w_TDATA_blk_n_assign_proc : process(w_0_state, ap_CS_fsm_state11)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            w_TDATA_blk_n <= w_0_state(0);
        else 
            w_TDATA_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    w_TREADY <= w_0_state(1);
    y_assign_1_fu_837_p3 <= 
        ap_const_lv17_0 when (tmp_23_fu_829_p3(0) = '1') else 
        tmp_22_fu_825_p1;
end behav;
